// Generated from antlr4-grammar-vsql\antlr4-grammar-vsql\src\main\antlr4\VSqlParser.g4 by ANTLR 4.7.2
package org.antlr.sql.dialects.vsql;

  package org.antlr4.vsql;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class VSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		K_ALL=1, K_AND=2, K_ANY=3, K_ARRAY=4, K_AS=5, K_ASC=6, K_AUTHORIZATION=7, 
		K_BETWEEN=8, K_BIGINT=9, K_BINARY=10, K_BIT=11, K_BOOLEAN=12, K_BOTH=13, 
		K_CASE=14, K_CAST=15, K_CHAR=16, K_CHAR_LENGTH=17, K_CHARACTER_LENGTH=18, 
		K_CHECK=19, K_COLLATE=20, K_COLUMN=21, K_CONSTRAINT=22, K_CORRELATION=23, 
		K_CREATE=24, K_CROSS=25, K_CURRENT_DATABASE=26, K_CURRENT_DATE=27, K_CURRENT_SCHEMA=28, 
		K_CURRENT_TIME=29, K_CURRENT_TIMESTAMP=30, K_CURRENT_USER=31, K_DATEDIFF=32, 
		K_DATETIME=33, K_DECIMAL=34, K_DECODE=35, K_DEFAULT=36, K_DEFERRABLE=37, 
		K_DESC=38, K_DISTINCT=39, K_ELSE=40, K_ENCODED=41, K_END=42, K_EXCEPT=43, 
		K_EXISTS=44, K_EXTRACT=45, K_FALSE=46, K_FLOAT=47, K_FOR=48, K_FOREIGN=49, 
		K_FROM=50, K_FULL=51, K_GRANT=52, K_GROUP=53, K_HAVING=54, K_ILIKE=55, 
		K_ILIKEB=56, K_IN=57, K_INITIALLY=58, K_INNER=59, K_INOUT=60, K_INT=61, 
		K_INTEGER=62, K_INTERSECT=63, K_INTERVAL=64, K_INTERVALYM=65, K_INTO=66, 
		K_IS=67, K_ISNULL=68, K_JOIN=69, K_KSAFE=70, K_LEADING=71, K_LEFT=72, 
		K_LIKE=73, K_LIKEB=74, K_LIMIT=75, K_LOCALTIME=76, K_LOCALTIMESTAMP=77, 
		K_MATCH=78, K_MINUS=79, K_MONEY=80, K_NATURAL=81, K_NCHAR=82, K_NEW=83, 
		K_NONE=84, K_NOT=85, K_NOTNULL=86, K_NULL=87, K_NULLSEQUAL=88, K_NUMBER=89, 
		K_NUMERIC=90, K_OFFSET=91, K_OLD=92, K_ON=93, K_ONLY=94, K_OR=95, K_ORDER=96, 
		K_OUT=97, K_OUTER=98, K_OVER=99, K_OVERLAPS=100, K_OVERLAY=101, K_PINNED=102, 
		K_POSITION=103, K_PRECISION=104, K_PRIMARY=105, K_REAL=106, K_REFERENCES=107, 
		K_RIGHT=108, K_ROW=109, K_SCHEMA=110, K_SELECT=111, K_SESSION_USER=112, 
		K_SIMILAR=113, K_SMALLDATETIME=114, K_SMALLINT=115, K_SOME=116, K_SUBSTRING=117, 
		K_SYSDATE=118, K_TABLE=119, K_TEXT=120, K_THEN=121, K_TIME=122, K_TIMESERIES=123, 
		K_TIMESTAMP=124, K_TIMESTAMPADD=125, K_TIMESTAMPDIFF=126, K_TIMESTAMPTZ=127, 
		K_TIMETZ=128, K_TIMEZONE=129, K_TINYINT=130, K_TO=131, K_TRAILING=132, 
		K_TREAT=133, K_TRIM=134, K_TRUE=135, K_UNBOUNDED=136, K_UNION=137, K_UNIQUE=138, 
		K_USER=139, K_USING=140, K_UUID=141, K_VARBINARY=142, K_VARCHAR=143, K_VARCHAR2=144, 
		K_WHEN=145, K_WHERE=146, K_WINDOW=147, K_WITH=148, K_WITHIN=149, K_ABORT=150, 
		K_ABSOLUTE=151, K_ACCESS=152, K_ACCESSRANK=153, K_ACCOUNT=154, K_ACTION=155, 
		K_ACTIVATE=156, K_ACTIVEPARTITIONCOUNT=157, K_ADD=158, K_ADMIN=159, K_AFTER=160, 
		K_AGGREGATE=161, K_ALSO=162, K_ALTER=163, K_ANALYSE=164, K_ANALYTIC=165, 
		K_ANALYZE=166, K_ANNOTATED=167, K_ANTI=168, K_ASSERTION=169, K_ASSIGNMENT=170, 
		K_AT=171, K_AUTHENTICATION=172, K_AUTO=173, K_AUTO_INCREMENT=174, K_AVAILABLE=175, 
		K_BACKWARD=176, K_BASENAME=177, K_BATCH=178, K_BEFORE=179, K_BEGIN=180, 
		K_BEST=181, K_BLOCK=182, K_BLOCK_DICT=183, K_BLOCKDICT_COMP=184, K_BROADCAST=185, 
		K_BY=186, K_BYTEA=187, K_BYTES=188, K_BZIP=189, K_BZIP_COMP=190, K_CACHE=191, 
		K_CALLED=192, K_CASCADE=193, K_CATALOGPATH=194, K_CHAIN=195, K_CHARACTER=196, 
		K_CHARACTERISTICS=197, K_CHARACTERS=198, K_CHECKPOINT=199, K_CLASS=200, 
		K_CLEAR=201, K_CLOSE=202, K_CLUSTER=203, K_COLSIZES=204, K_COLUMNS_COUNT=205, 
		K_COMMENT=206, K_COMMIT=207, K_COMMITTED=208, K_COMMONDELTA_COMP=209, 
		K_COMMUNAL=210, K_COMPLEX=211, K_CONNECT=212, K_CONSTRAINTS=213, K_CONTROL=214, 
		K_COPY=215, K_CPUAFFINITYMODE=216, K_CPUAFFINITYSET=217, K_CREATEDB=218, 
		K_CREATEUSER=219, K_CSV=220, K_CUBE=221, K_CURRENT=222, K_CURSOR=223, 
		K_CUSTOM=224, K_CUSTOM_PARTITIONS=225, K_CYCLE=226, K_DATA=227, K_DATABASE=228, 
		K_DATAPATH=229, K_DAY=230, K_DEACTIVATE=231, K_DEALLOCATE=232, K_DEC=233, 
		K_DECLARE=234, K_DEFAULTS=235, K_DEFERRED=236, K_DEFINE=237, K_DEFINER=238, 
		K_DELETE=239, K_DELIMITER=240, K_DELIMITERS=241, K_DELTARANGE_COMP=242, 
		K_DELTARANGE_COMP_SP=243, K_DELTAVAL=244, K_DEPENDS=245, K_DETERMINES=246, 
		K_DIRECT=247, K_DIRECTCOLS=248, K_DIRECTED=249, K_DIRECTGROUPED=250, K_DIRECTPROJ=251, 
		K_DISABLE=252, K_DISABLED=253, K_DISCONNECT=254, K_DISTVALINDEX=255, K_DO=256, 
		K_DOMAIN=257, K_DOUBLE=258, K_DROP=259, K_DURABLE=260, K_EACH=261, K_ENABLE=262, 
		K_ENABLED=263, K_ENCLOSED=264, K_ENCODING=265, K_ENCRYPTED=266, K_ENFORCELENGTH=267, 
		K_EPHEMERAL=268, K_EPOCH=269, K_ERROR=270, K_ESCAPE=271, K_EVENT=272, 
		K_EVENTS=273, K_EXCEPTION=274, K_EXCEPTIONS=275, K_EXCLUDE=276, K_EXCLUDING=277, 
		K_EXCLUSIVE=278, K_EXECUTE=279, K_EXECUTIONPARALLELISM=280, K_EXPIRE=281, 
		K_EXPLAIN=282, K_EXPORT=283, K_EXTERNAL=284, K_FAILED_LOGIN_ATTEMPTS=285, 
		K_FAULT=286, K_FENCED=287, K_FETCH=288, K_FILESYSTEM=289, K_FILLER=290, 
		K_FILTER=291, K_FIRST=292, K_FIXEDWIDTH=293, K_FLEX=294, K_FLEXIBLE=295, 
		K_FOLLOWING=296, K_FORCE=297, K_FORMAT=298, K_FORWARD=299, K_FREEZE=300, 
		K_FUNCTION=301, K_FUNCTIONS=302, K_GCDDELTA=303, K_GET=304, K_GLOBAL=305, 
		K_GRACEPERIOD=306, K_GROUPED=307, K_GROUPING=308, K_GZIP=309, K_GZIP_COMP=310, 
		K_HANDLER=311, K_HCATALOG=312, K_HCATALOG_CONNECTION_TIMEOUT=313, K_HCATALOG_DB=314, 
		K_HCATALOG_SCHEMA=315, K_HCATALOG_SLOW_TRANSFER_LIMIT=316, K_HCATALOG_SLOW_TRANSFER_TIME=317, 
		K_HCATALOG_USER=318, K_HIGH=319, K_HIVE_PARTITION_COLS=320, K_HIVESERVER2_HOSTNAME=321, 
		K_HOLD=322, K_HOST=323, K_HOSTNAME=324, K_HOUR=325, K_HOURS=326, K_IDENTIFIED=327, 
		K_IDENTITY=328, K_IDLESESSIONTIMEOUT=329, K_IF=330, K_IGNORE=331, K_IMMEDIATE=332, 
		K_IMMUTABLE=333, K_IMPLICIT=334, K_INCLUDE=335, K_INCLUDING=336, K_INCREMENT=337, 
		K_INDEX=338, K_INHERITS=339, K_INPUT=340, K_INSENSITIVE=341, K_INSERT=342, 
		K_INSTEAD=343, K_INTERFACE=344, K_INTERPOLATE=345, K_INVOKER=346, K_ISOLATION=347, 
		K_JSON=348, K_KEY=349, K_LABEL=350, K_LANCOMPILER=351, K_LANGUAGE=352, 
		K_LARGE=353, K_LAST=354, K_LATEST=355, K_LESS=356, K_LEVEL=357, K_LIBRARY=358, 
		K_LISTEN=359, K_LOAD=360, K_LOCAL=361, K_LOCATION=362, K_LOCK=363, K_LONG=364, 
		K_LOW=365, K_LZO=366, K_MANAGED=367, K_MASK=368, K_MATCHED=369, K_MATERIALIZE=370, 
		K_MAXCONCURRENCY=371, K_MAXCONCURRENCYGRACE=372, K_MAXCONNECTIONS=373, 
		K_MAXMEMORYSIZE=374, K_MAXPAYLOAD=375, K_MAXQUERYMEMORYSIZE=376, K_MAXVALUE=377, 
		K_MEDIUM=378, K_MEMORYCAP=379, K_MEMORYSIZE=380, K_MERGE=381, K_MERGEOUT=382, 
		K_METHOD=383, K_MICROSECONDS=384, K_MILLISECONDS=385, K_MINUTE=386, K_MINUTES=387, 
		K_MINVALUE=388, K_MODE=389, K_MODEL=390, K_MONTH=391, K_MOVE=392, K_MOVEOUT=393, 
		K_NAME=394, K_NATIONAL=395, K_NATIVE=396, K_NETWORK=397, K_NEXT=398, K_NO=399, 
		K_NOCREATEDB=400, K_NOCREATEUSER=401, K_NODE=402, K_NODES=403, K_NOTHING=404, 
		K_NOTIFIER=405, K_NOTIFY=406, K_NOWAIT=407, K_NULLAWARE=408, K_NULLCOLS=409, 
		K_NULLS=410, K_OBJECT=411, K_OCTETS=412, K_OF=413, K_OFF=414, K_OIDS=415, 
		K_OPERATOR=416, K_OPT=417, K_OPTIMIZER=418, K_OPTION=419, K_OPTVER=420, 
		K_ORC=421, K_OTHERS=422, K_OWNER=423, K_PARAMETER=424, K_PARAMETERS=425, 
		K_PARQUET=426, K_PARSER=427, K_PARTIAL=428, K_PARTITION=429, K_PARTITIONING=430, 
		K_PASSWORD=431, K_PASSWORD_GRACE_TIME=432, K_PASSWORD_LIFE_TIME=433, K_PASSWORD_LOCK_TIME=434, 
		K_PASSWORD_MAX_LENGTH=435, K_PASSWORD_MIN_DIGITS=436, K_PASSWORD_MIN_LENGTH=437, 
		K_PASSWORD_MIN_LETTERS=438, K_PASSWORD_MIN_LOWERCASE_LETTERS=439, K_PASSWORD_MIN_SYMBOLS=440, 
		K_PASSWORD_MIN_UPPERCASE_LETTERS=441, K_PASSWORD_REUSE_MAX=442, K_PASSWORD_REUSE_TIME=443, 
		K_PATTERN=444, K_PERCENT=445, K_PERMANENT=446, K_PLACING=447, K_PLANNEDCONCURRENCY=448, 
		K_POLICY=449, K_POOL=450, K_PORT=451, K_PRECEDING=452, K_PREPARE=453, 
		K_PREPASS=454, K_PRESERVE=455, K_PREVIOUS=456, K_PRIOR=457, K_PRIORITY=458, 
		K_PRIVILEGES=459, K_PROCEDURAL=460, K_PROCEDURE=461, K_PROFILE=462, K_PROJECTION=463, 
		K_PROJECTIONS=464, K_PSDATE=465, K_QUERY=466, K_QUEUETIMEOUT=467, K_QUOTE=468, 
		K_RANGE=469, K_RAW=470, K_READ=471, K_RECHECK=472, K_RECORD=473, K_RECOVER=474, 
		K_RECURSIVE=475, K_REFRESH=476, K_REINDEX=477, K_REJECTED=478, K_REJECTMAX=479, 
		K_RELATIVE=480, K_RELEASE=481, K_REMOVE=482, K_RENAME=483, K_REORGANIZE=484, 
		K_REPEATABLE=485, K_REPLACE=486, K_RESET=487, K_RESOURCE=488, K_RESTART=489, 
		K_RESTRICT=490, K_RESULTS=491, K_RETURN=492, K_RETURNREJECTED=493, K_REVOKE=494, 
		K_RLE=495, K_ROLE=496, K_ROLES=497, K_ROLLBACK=498, K_ROLLUP=499, K_ROWS=500, 
		K_RULE=501, K_RUNTIMECAP=502, K_RUNTIMEPRIORITY=503, K_RUNTIMEPRIORITYTHRESHOLD=504, 
		K_SAVE=505, K_SAVEPOINT=506, K_SCROLL=507, K_SEARCH_PATH=508, K_SECOND=509, 
		K_SECONDS=510, K_SECURITY=511, K_SECURITY_ALGORITHM=512, K_SEGMENTED=513, 
		K_SEMI=514, K_SEMIALL=515, K_SEQUENCE=516, K_SEQUENCES=517, K_SERIALIZABLE=518, 
		K_SESSION=519, K_SET=520, K_SETOF=521, K_SETS=522, K_SHARE=523, K_SHARED=524, 
		K_SHOW=525, K_SIMPLE=526, K_SINGLEINITIATOR=527, K_SITE=528, K_SITES=529, 
		K_SKIP=530, K_SOURCE=531, K_SPLIT=532, K_SSL_CONFIG=533, K_STABLE=534, 
		K_STANDBY=535, K_START=536, K_STATEMENT=537, K_STATISTICS=538, K_STDIN=539, 
		K_STDOUT=540, K_STEMMER=541, K_STORAGE=542, K_STREAM=543, K_STRENGTH=544, 
		K_STRICT=545, K_SUBNET=546, K_SYSID=547, K_SYSTEM=548, K_TABLES=549, K_TABLESAMPLE=550, 
		K_TABLESPACE=551, K_TEMP=552, K_TEMPLATE=553, K_TEMPORARY=554, K_TEMPSPACECAP=555, 
		K_TERMINATOR=556, K_THAN=557, K_TIES=558, K_TLS=559, K_TOAST=560, K_TOKENIZER=561, 
		K_TOLERANCE=562, K_TRANSACTION=563, K_TRANSFORM=564, K_TRICKLE=565, K_TRIGGER=566, 
		K_TRUNCATE=567, K_TRUSTED=568, K_TUNING=569, K_TYPE=570, K_UDPARAMETER=571, 
		K_UNCOMMITTED=572, K_UNCOMPRESSED=573, K_UNI=574, K_UNINDEXED=575, K_UNKNOWN=576, 
		K_UNLIMITED=577, K_UNLISTEN=578, K_UNLOCK=579, K_UNPACKER=580, K_UNSEGMENTED=581, 
		K_UPDATE=582, K_USAGE=583, K_VACUUM=584, K_VALIDATE=585, K_VALIDATOR=586, 
		K_VALINDEX=587, K_VALUE=588, K_VALUES=589, K_VARYING=590, K_VERBOSE=591, 
		K_VERTICA=592, K_VIEW=593, K_VOLATILE=594, K_WAIT=595, K_WEBHDFS_ADDRESS=596, 
		K_WEBSERVICE_HOSTNAME=597, K_WEBSERVICE_PORT=598, K_WITHOUT=599, K_WORK=600, 
		K_WRITE=601, K_YEAR=602, K_ZONE=603, K_UDPARAMETERS=604, K_ALLNODES=605, 
		K_PUBLIC=606, K_DIRECTORY=607, K_ROWGROUPSIZEMB=608, K_COMPRESSION=609, 
		K_FILESIZEMB=610, K_FILEMODE=611, K_DIRMODE=612, K_ZSTD=613, K_ROUTE=614, 
		K_ROUTING=615, K_ESCAPE_STRING_WARNING=616, K_STANDARD_CONFORMING_STRINGS=617, 
		K_AUTOCOMMIT=618, K_LOCALE=619, K_MULTIPLEACTIVERESULTSETS=620, K_RESOURCE_POOL=621, 
		K_INTERVALSTYLE=622, K_PLAIN=623, K_UNITS=624, K_DATESTYLE=625, K_ISO=626, 
		K_MDY=627, K_POSTGRES=628, K_SQL=629, K_GERMAN=630, K_DMY=631, K_TLSMODE=632, 
		K_PREFER=633, K_INT8=634, K_FLOAT8=635, K_GEOMETRY=636, K_GEOGRAPHY=637, 
		K_DATE=638, K_ADDRESS=639, K_BALANCE=640, K_GBYTYPE=641, K_HASH=642, K_PIPE=643, 
		K_SYN_JOIN=644, K_ENABLE_WITH_CLAUSE_MATERIALIZATION=645, K_EARLY_MATERIALIZATION=646, 
		K_SYNTACTIC_JOIN=647, K_BRANCH=648, K_DATATYPE=649, K_VERBATIM=650, K_IGNORECONST=651, 
		K_UTYPE=652, K_JTYPE=653, K_DISTRIB=654, K_PROJS=655, K_SKIP_PROJS=656, 
		COMMA=657, MINUS=658, STAR=659, PLUS=660, DCOLON=661, OPEN_PAREN=662, 
		CLOSE_PAREN=663, DOT=664, SEMI=665, UNDERSCORE=666, AMP=667, AMP_AMP=668, 
		AMP_LT=669, BANG=670, BANG_BANG=671, BANG_EQUAL=672, EQUAL=673, EQUAL_GT=674, 
		EQUAL2=675, GT=676, GTE=677, LT=678, LTE=679, LT_GT=680, DIV=681, IPV4_ADDR=682, 
		IPV6_ADDR=683, SPACE=684, COMMENT=685, LINE_COMMENT_LITERAL=686, OPEN_HINT=687, 
		CLOSE_HINT=688, DOUBLE_QUOTE_STRING=689, WORD=690, SINGLE_QUOTE_STRING=691, 
		FLOAT=692, REAL=693, DECIMAL=694, ANY=695;
	public static final int
		RULE_root = 0, RULE_statement = 1, RULE_alter_access_policy_statement = 2, 
		RULE_alter_authentication_statement = 3, RULE_alter_database_drop_statement = 4, 
		RULE_alter_fault_group_statement = 5, RULE_alter_function_statement = 6, 
		RULE_alter_hcatalog_schema_statement = 7, RULE_alter_library_statement = 8, 
		RULE_alter_model_statement = 9, RULE_alter_network_interface_statement = 10, 
		RULE_alter_node_statement = 11, RULE_alter_notfifier_statement = 12, RULE_notifier_params = 13, 
		RULE_alter_projection_statement = 14, RULE_alter_profile_statement = 15, 
		RULE_alter_profile_rename_statement = 16, RULE_alter_resource_pool_statement = 17, 
		RULE_resource_pool_param = 18, RULE_alter_role_rename_statement = 19, 
		RULE_alter_schema_statement = 20, RULE_alter_sequence_statement = 21, 
		RULE_sequence_params = 22, RULE_alter_session_statement = 23, RULE_alter_subnet_statement = 24, 
		RULE_alter_table_rename_statement = 25, RULE_alter_table_general_statment = 26, 
		RULE_alter_table_item = 27, RULE_alter_user_statement = 28, RULE_user_params = 29, 
		RULE_alter_view_statement = 30, RULE_todo_statement = 31, RULE_begin_transaction_statement = 32, 
		RULE_comment_on_statement = 33, RULE_comment_on_column_statement = 34, 
		RULE_comment_on_constraint_statement = 35, RULE_comment_on_function_statement = 36, 
		RULE_comment_on_transform_function_statement = 37, RULE_comment_on_library_statement = 38, 
		RULE_comment_on_node_statement = 39, RULE_comment_on_schema_statement = 40, 
		RULE_comment_on_sequence_statement = 41, RULE_comment_on_table_statement = 42, 
		RULE_comment_on_view_statement = 43, RULE_comment_on_projection_statement = 44, 
		RULE_comment_value = 45, RULE_commit_statement = 46, RULE_connect_statement = 47, 
		RULE_copy_column = 48, RULE_column_option = 49, RULE_path = 50, RULE_local_path = 51, 
		RULE_inputFormat = 52, RULE_vertica_source = 53, RULE_udl_clause = 54, 
		RULE_copy_statement = 55, RULE_copy_local_statement = 56, RULE_copy_from_vertica_statement = 57, 
		RULE_create_access_policy_statement = 58, RULE_create_authentication_statement = 59, 
		RULE_create_branch_statement = 60, RULE_create_external_table_as_copy_statement = 61, 
		RULE_create_fault_group_statement = 62, RULE_create_flex_table_statement = 63, 
		RULE_create_flex_external_table_as_copy_statement = 64, RULE_create_function_statements_statement = 65, 
		RULE_create_or_replace_transform_function_statement = 66, RULE_create_or_replace_source_function_statement = 67, 
		RULE_create_or_replace_parser_function_statement = 68, RULE_create_or_replace_udf_function_statement = 69, 
		RULE_create_or_replace_sql_function_statement = 70, RULE_create_or_replace_filter_statement = 71, 
		RULE_create_or_replace_analytic_function_statement = 72, RULE_create_or_replace_aggregate_function_statement = 73, 
		RULE_create_hcatalog_schema_statement = 74, RULE_hcatalog_schema_param = 75, 
		RULE_create_library_statement = 76, RULE_create_load_balance_group_statement = 77, 
		RULE_create_local_temporary_view_statement = 78, RULE_create_location_statement = 79, 
		RULE_create_network_address_statement = 80, RULE_create_network_interface_statement = 81, 
		RULE_create_notifier_statement = 82, RULE_create_procedure_statement = 83, 
		RULE_argument_list = 84, RULE_argument_item = 85, RULE_create_profile_statement = 86, 
		RULE_projection_clause_item = 87, RULE_ksafe_clause = 88, RULE_ifNotExistsClause = 89, 
		RULE_create_projection_statement = 90, RULE_create_projection_live_aggregate_projections_statement = 91, 
		RULE_create_projection_live_aggregate_projections_gr_statement = 92, RULE_create_projection_live_aggregate_projections_topk_statement = 93, 
		RULE_create_projection_udtfs_statement = 94, RULE_columns = 95, RULE_batch_query = 96, 
		RULE_prepass_query = 97, RULE_create_resource_pool_statement = 98, RULE_create_role_statement = 99, 
		RULE_create_routing_rule_statement = 100, RULE_create_schema_statement = 101, 
		RULE_create_sequence_statement = 102, RULE_create_subnet_statement = 103, 
		RULE_create_table_statement = 104, RULE_schema_privileges_clause = 105, 
		RULE_create_table_as_statement = 106, RULE_column_name_list = 107, RULE_column_name_list_item = 108, 
		RULE_access_rank = 109, RULE_grouped_clause = 110, RULE_create_table_like_statement = 111, 
		RULE_create_table_default_statement = 112, RULE_table_constraint = 113, 
		RULE_column_definition_list = 114, RULE_column_definition = 115, RULE_column_constraint = 116, 
		RULE_load_method = 117, RULE_segmentation_clause = 118, RULE_create_temporary_table_statement = 119, 
		RULE_create_temporary_table_with_def_statement = 120, RULE_create_temporary_table_from_table_statement = 121, 
		RULE_encodedBy_clause = 122, RULE_column_ref = 123, RULE_create_text_index_statement = 124, 
		RULE_create_user_statement = 125, RULE_create_view_statement = 126, RULE_delete_statement = 127, 
		RULE_directed_query_statements_statement = 128, RULE_activate_directed_query_statement = 129, 
		RULE_create_directed_query_statement = 130, RULE_deactivate_directed_query_statement = 131, 
		RULE_drop_directed_query_statement = 132, RULE_get_directed_query_statement = 133, 
		RULE_save_query = 134, RULE_disconnect_statement = 135, RULE_drop_access_policy_statement = 136, 
		RULE_drop_aggregate_function_statement = 137, RULE_drop_authentication_statement = 138, 
		RULE_drop_branch_statement = 139, RULE_drop_fault_group_statement = 140, 
		RULE_drop_function_statement = 141, RULE_drop_source_statement = 142, 
		RULE_drop_filter_statement = 143, RULE_drop_parser_statement = 144, RULE_drop_model_statement = 145, 
		RULE_drop_library_statement = 146, RULE_drop_load_balance_group_statement = 147, 
		RULE_drop_network_address_statement = 148, RULE_drop_network_interface_statement = 149, 
		RULE_drop_notifier_statement = 150, RULE_drop_procedure_statement = 151, 
		RULE_drop_profile_statement = 152, RULE_drop_projection_statement = 153, 
		RULE_drop_resource_pool_statement = 154, RULE_drop_role_statement = 155, 
		RULE_drop_routing_rule_statement = 156, RULE_drop_schema_statement = 157, 
		RULE_drop_sequence_statement = 158, RULE_drop_subnet_statement = 159, 
		RULE_drop_table_statement = 160, RULE_drop_text_index_statement = 161, 
		RULE_drop_transform_function_statement = 162, RULE_drop_user_statement = 163, 
		RULE_drop_view_statement = 164, RULE_end_statement = 165, RULE_explain_statement = 166, 
		RULE_export_to_parquet_statement = 167, RULE_export_to_vertica_statement = 168, 
		RULE_grant_statements_statement = 169, RULE_grant_on_view_statement = 170, 
		RULE_grant_on_ude_statement = 171, RULE_grant_on_table_statement = 172, 
		RULE_grant_on_location_statement = 173, RULE_grant_on_sequence_statement = 174, 
		RULE_grant_on_schema_statement = 175, RULE_schema_privilege = 176, RULE_grant_on_role_statement = 177, 
		RULE_grant_on_resourcepool_statement = 178, RULE_grant_on_procedure_statement = 179, 
		RULE_grant_on_model_statement = 180, RULE_grant_on_library_statement = 181, 
		RULE_grant_privileges_on_database_statement = 182, RULE_grant_authentication_to_statement = 183, 
		RULE_withGrantOption = 184, RULE_grantees = 185, RULE_grantee = 186, RULE_grant_authentication_statement = 187, 
		RULE_insert_statement = 188, RULE_merge_statement = 189, RULE_matchingClause = 190, 
		RULE_profile_statement = 191, RULE_release_savepoint_statement = 192, 
		RULE_revoke_statements_statement = 193, RULE_revoke_on_view_statement = 194, 
		RULE_revoke_on_function_statement = 195, RULE_revoke_on_table_statement = 196, 
		RULE_revoke_on_location_statement = 197, RULE_revoke_on_sequence_statement = 198, 
		RULE_revoke_on_schema_statement = 199, RULE_revoke_on_role_statement = 200, 
		RULE_revoke_on_resource_pool_statement = 201, RULE_revoke_on_prodecure_statement = 202, 
		RULE_revoke_on_model_statement = 203, RULE_revoke_on_library_statement = 204, 
		RULE_revoke_on_database_statement = 205, RULE_revoke_authentication_statement = 206, 
		RULE_rollback_statement = 207, RULE_rollback_to_savepoint_statement = 208, 
		RULE_savepoint_statement = 209, RULE_at_epoch_clause = 210, RULE_select_statement = 211, 
		RULE_set_datestyle_statement = 212, RULE_set_escape_string_warning_statement = 213, 
		RULE_set_intervalstyle_statement = 214, RULE_set_locale_statement = 215, 
		RULE_set_role_statement = 216, RULE_set_search_path_statement = 217, RULE_set_session_autocommit_statement = 218, 
		RULE_set_session_characteristics_as_transaction_statement = 219, RULE_set_session_graceperiod_statement = 220, 
		RULE_set_session_idlesessiontimeout_statement = 221, RULE_set_session_memorycap_statement = 222, 
		RULE_set_session_multipleactiveresultsets_statement = 223, RULE_set_session_resource_pool_statement = 224, 
		RULE_set_session_runtimecap_statement = 225, RULE_set_session_tempspacecap_statement = 226, 
		RULE_set_standard_conforming_strings_statement = 227, RULE_set_time_zone_statement = 228, 
		RULE_show_statement = 229, RULE_show_current_statement = 230, RULE_show_database_statement = 231, 
		RULE_show_node_statement = 232, RULE_show_session_statement = 233, RULE_start_transaction_statement = 234, 
		RULE_truncate_table_statement = 235, RULE_update_statement = 236, RULE_simple_select_query_clause = 237, 
		RULE_select_query = 238, RULE_offset_clause = 239, RULE_limit_clause = 240, 
		RULE_select_clause = 241, RULE_intersect_clause = 242, RULE_except_clause = 243, 
		RULE_from_clause = 244, RULE_into_clause = 245, RULE_timeseries_clause = 246, 
		RULE_over_clause = 247, RULE_groupBy_clause = 248, RULE_having_clause = 249, 
		RULE_where_clause = 250, RULE_orderby_clause = 251, RULE_match_clause = 252, 
		RULE_partition_clause = 253, RULE_encoding_clause = 254, RULE_owner_clause = 255, 
		RULE_rename_clause = 256, RULE_set_schema_clause = 257, RULE_orderbyItem = 258, 
		RULE_predicates = 259, RULE_tableSample = 260, RULE_dataset = 261, RULE_joinedTable = 262, 
		RULE_elements = 263, RULE_element = 264, RULE_expressions = 265, RULE_castExpr = 266, 
		RULE_expression = 267, RULE_predicate = 268, RULE_nullPredicate = 269, 
		RULE_likePredicate = 270, RULE_joinPredicate = 271, RULE_interpolatePredicate = 272, 
		RULE_columnValuePredicate = 273, RULE_inPredicate = 274, RULE_constantExp = 275, 
		RULE_betweenPredicate = 276, RULE_booleanPredicate = 277, RULE_caseExp = 278, 
		RULE_alias = 279, RULE_functionCall = 280, RULE_commaSeparatedKeyValuePairs = 281, 
		RULE_values = 282, RULE_keyValuePair = 283, RULE_hints = 284, RULE_hint = 285, 
		RULE_columnReference = 286, RULE_tableReference = 287, RULE_viewReference = 288, 
		RULE_sourceReference = 289, RULE_filterReference = 290, RULE_parserReference = 291, 
		RULE_projectionReference = 292, RULE_procedureReference = 293, RULE_procedure = 294, 
		RULE_functionReference = 295, RULE_libraryReference = 296, RULE_sequenceReference = 297, 
		RULE_modelReference = 298, RULE_txtIndexReference = 299, RULE_schemaReference = 300, 
		RULE_dbname = 301, RULE_txtIndex = 302, RULE_host = 303, RULE_port = 304, 
		RULE_source = 305, RULE_notifier = 306, RULE_model = 307, RULE_filter = 308, 
		RULE_parserName = 309, RULE_view = 310, RULE_lb_group = 311, RULE_network_address = 312, 
		RULE_routingRule = 313, RULE_branch_identifier = 314, RULE_role = 315, 
		RULE_lang = 316, RULE_resourcePool = 317, RULE_schema = 318, RULE_table = 319, 
		RULE_params = 320, RULE_projection = 321, RULE_library = 322, RULE_function = 323, 
		RULE_param = 324, RULE_node = 325, RULE_sequence = 326, RULE_column = 327, 
		RULE_string = 328, RULE_singleChar = 329, RULE_number = 330, RULE_integerNumber = 331, 
		RULE_asteriskExp = 332, RULE_subnet = 333, RULE_user = 334, RULE_owner = 335, 
		RULE_method = 336, RULE_faultGroup = 337, RULE_auth_method_name = 338, 
		RULE_constraint = 339, RULE_network_interface = 340, RULE_profile = 341, 
		RULE_id = 342, RULE_value = 343, RULE_enableOrDisable = 344, RULE_nullOrNotNull = 345, 
		RULE_address = 346, RULE_compressionType = 347, RULE_password_parameter = 348, 
		RULE_operator = 349, RULE_comparisonOperator = 350, RULE_isolationLevel = 351, 
		RULE_transactionMode = 352, RULE_bool_expression = 353, RULE_dataTypes = 354, 
		RULE_binaryTypes = 355, RULE_booleanTypes = 356, RULE_charTypes = 357, 
		RULE_dateTypes = 358, RULE_apNumericTypes = 359, RULE_eNumericTypes = 360, 
		RULE_spatialTypes = 361, RULE_uuidTypes = 362;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "statement", "alter_access_policy_statement", "alter_authentication_statement", 
			"alter_database_drop_statement", "alter_fault_group_statement", "alter_function_statement", 
			"alter_hcatalog_schema_statement", "alter_library_statement", "alter_model_statement", 
			"alter_network_interface_statement", "alter_node_statement", "alter_notfifier_statement", 
			"notifier_params", "alter_projection_statement", "alter_profile_statement", 
			"alter_profile_rename_statement", "alter_resource_pool_statement", "resource_pool_param", 
			"alter_role_rename_statement", "alter_schema_statement", "alter_sequence_statement", 
			"sequence_params", "alter_session_statement", "alter_subnet_statement", 
			"alter_table_rename_statement", "alter_table_general_statment", "alter_table_item", 
			"alter_user_statement", "user_params", "alter_view_statement", "todo_statement", 
			"begin_transaction_statement", "comment_on_statement", "comment_on_column_statement", 
			"comment_on_constraint_statement", "comment_on_function_statement", "comment_on_transform_function_statement", 
			"comment_on_library_statement", "comment_on_node_statement", "comment_on_schema_statement", 
			"comment_on_sequence_statement", "comment_on_table_statement", "comment_on_view_statement", 
			"comment_on_projection_statement", "comment_value", "commit_statement", 
			"connect_statement", "copy_column", "column_option", "path", "local_path", 
			"inputFormat", "vertica_source", "udl_clause", "copy_statement", "copy_local_statement", 
			"copy_from_vertica_statement", "create_access_policy_statement", "create_authentication_statement", 
			"create_branch_statement", "create_external_table_as_copy_statement", 
			"create_fault_group_statement", "create_flex_table_statement", "create_flex_external_table_as_copy_statement", 
			"create_function_statements_statement", "create_or_replace_transform_function_statement", 
			"create_or_replace_source_function_statement", "create_or_replace_parser_function_statement", 
			"create_or_replace_udf_function_statement", "create_or_replace_sql_function_statement", 
			"create_or_replace_filter_statement", "create_or_replace_analytic_function_statement", 
			"create_or_replace_aggregate_function_statement", "create_hcatalog_schema_statement", 
			"hcatalog_schema_param", "create_library_statement", "create_load_balance_group_statement", 
			"create_local_temporary_view_statement", "create_location_statement", 
			"create_network_address_statement", "create_network_interface_statement", 
			"create_notifier_statement", "create_procedure_statement", "argument_list", 
			"argument_item", "create_profile_statement", "projection_clause_item", 
			"ksafe_clause", "ifNotExistsClause", "create_projection_statement", "create_projection_live_aggregate_projections_statement", 
			"create_projection_live_aggregate_projections_gr_statement", "create_projection_live_aggregate_projections_topk_statement", 
			"create_projection_udtfs_statement", "columns", "batch_query", "prepass_query", 
			"create_resource_pool_statement", "create_role_statement", "create_routing_rule_statement", 
			"create_schema_statement", "create_sequence_statement", "create_subnet_statement", 
			"create_table_statement", "schema_privileges_clause", "create_table_as_statement", 
			"column_name_list", "column_name_list_item", "access_rank", "grouped_clause", 
			"create_table_like_statement", "create_table_default_statement", "table_constraint", 
			"column_definition_list", "column_definition", "column_constraint", "load_method", 
			"segmentation_clause", "create_temporary_table_statement", "create_temporary_table_with_def_statement", 
			"create_temporary_table_from_table_statement", "encodedBy_clause", "column_ref", 
			"create_text_index_statement", "create_user_statement", "create_view_statement", 
			"delete_statement", "directed_query_statements_statement", "activate_directed_query_statement", 
			"create_directed_query_statement", "deactivate_directed_query_statement", 
			"drop_directed_query_statement", "get_directed_query_statement", "save_query", 
			"disconnect_statement", "drop_access_policy_statement", "drop_aggregate_function_statement", 
			"drop_authentication_statement", "drop_branch_statement", "drop_fault_group_statement", 
			"drop_function_statement", "drop_source_statement", "drop_filter_statement", 
			"drop_parser_statement", "drop_model_statement", "drop_library_statement", 
			"drop_load_balance_group_statement", "drop_network_address_statement", 
			"drop_network_interface_statement", "drop_notifier_statement", "drop_procedure_statement", 
			"drop_profile_statement", "drop_projection_statement", "drop_resource_pool_statement", 
			"drop_role_statement", "drop_routing_rule_statement", "drop_schema_statement", 
			"drop_sequence_statement", "drop_subnet_statement", "drop_table_statement", 
			"drop_text_index_statement", "drop_transform_function_statement", "drop_user_statement", 
			"drop_view_statement", "end_statement", "explain_statement", "export_to_parquet_statement", 
			"export_to_vertica_statement", "grant_statements_statement", "grant_on_view_statement", 
			"grant_on_ude_statement", "grant_on_table_statement", "grant_on_location_statement", 
			"grant_on_sequence_statement", "grant_on_schema_statement", "schema_privilege", 
			"grant_on_role_statement", "grant_on_resourcepool_statement", "grant_on_procedure_statement", 
			"grant_on_model_statement", "grant_on_library_statement", "grant_privileges_on_database_statement", 
			"grant_authentication_to_statement", "withGrantOption", "grantees", "grantee", 
			"grant_authentication_statement", "insert_statement", "merge_statement", 
			"matchingClause", "profile_statement", "release_savepoint_statement", 
			"revoke_statements_statement", "revoke_on_view_statement", "revoke_on_function_statement", 
			"revoke_on_table_statement", "revoke_on_location_statement", "revoke_on_sequence_statement", 
			"revoke_on_schema_statement", "revoke_on_role_statement", "revoke_on_resource_pool_statement", 
			"revoke_on_prodecure_statement", "revoke_on_model_statement", "revoke_on_library_statement", 
			"revoke_on_database_statement", "revoke_authentication_statement", "rollback_statement", 
			"rollback_to_savepoint_statement", "savepoint_statement", "at_epoch_clause", 
			"select_statement", "set_datestyle_statement", "set_escape_string_warning_statement", 
			"set_intervalstyle_statement", "set_locale_statement", "set_role_statement", 
			"set_search_path_statement", "set_session_autocommit_statement", "set_session_characteristics_as_transaction_statement", 
			"set_session_graceperiod_statement", "set_session_idlesessiontimeout_statement", 
			"set_session_memorycap_statement", "set_session_multipleactiveresultsets_statement", 
			"set_session_resource_pool_statement", "set_session_runtimecap_statement", 
			"set_session_tempspacecap_statement", "set_standard_conforming_strings_statement", 
			"set_time_zone_statement", "show_statement", "show_current_statement", 
			"show_database_statement", "show_node_statement", "show_session_statement", 
			"start_transaction_statement", "truncate_table_statement", "update_statement", 
			"simple_select_query_clause", "select_query", "offset_clause", "limit_clause", 
			"select_clause", "intersect_clause", "except_clause", "from_clause", 
			"into_clause", "timeseries_clause", "over_clause", "groupBy_clause", 
			"having_clause", "where_clause", "orderby_clause", "match_clause", "partition_clause", 
			"encoding_clause", "owner_clause", "rename_clause", "set_schema_clause", 
			"orderbyItem", "predicates", "tableSample", "dataset", "joinedTable", 
			"elements", "element", "expressions", "castExpr", "expression", "predicate", 
			"nullPredicate", "likePredicate", "joinPredicate", "interpolatePredicate", 
			"columnValuePredicate", "inPredicate", "constantExp", "betweenPredicate", 
			"booleanPredicate", "caseExp", "alias", "functionCall", "commaSeparatedKeyValuePairs", 
			"values", "keyValuePair", "hints", "hint", "columnReference", "tableReference", 
			"viewReference", "sourceReference", "filterReference", "parserReference", 
			"projectionReference", "procedureReference", "procedure", "functionReference", 
			"libraryReference", "sequenceReference", "modelReference", "txtIndexReference", 
			"schemaReference", "dbname", "txtIndex", "host", "port", "source", "notifier", 
			"model", "filter", "parserName", "view", "lb_group", "network_address", 
			"routingRule", "branch_identifier", "role", "lang", "resourcePool", "schema", 
			"table", "params", "projection", "library", "function", "param", "node", 
			"sequence", "column", "string", "singleChar", "number", "integerNumber", 
			"asteriskExp", "subnet", "user", "owner", "method", "faultGroup", "auth_method_name", 
			"constraint", "network_interface", "profile", "id", "value", "enableOrDisable", 
			"nullOrNotNull", "address", "compressionType", "password_parameter", 
			"operator", "comparisonOperator", "isolationLevel", "transactionMode", 
			"bool_expression", "dataTypes", "binaryTypes", "booleanTypes", "charTypes", 
			"dateTypes", "apNumericTypes", "eNumericTypes", "spatialTypes", "uuidTypes"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "','", "'-'", "'*'", 
			"'+'", "'::'", "'('", "')'", "'.'", "';'", "'_'", "'&'", "'&&'", "'&<'", 
			"'!'", "'!!'", "'!='", "'='", "'=>'", "'<=>'", "'>'", "'>='", "'<'", 
			"'<='", "'<>'", "'/'", null, null, null, null, null, "'/*+'", "'*/'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "K_ALL", "K_AND", "K_ANY", "K_ARRAY", "K_AS", "K_ASC", "K_AUTHORIZATION", 
			"K_BETWEEN", "K_BIGINT", "K_BINARY", "K_BIT", "K_BOOLEAN", "K_BOTH", 
			"K_CASE", "K_CAST", "K_CHAR", "K_CHAR_LENGTH", "K_CHARACTER_LENGTH", 
			"K_CHECK", "K_COLLATE", "K_COLUMN", "K_CONSTRAINT", "K_CORRELATION", 
			"K_CREATE", "K_CROSS", "K_CURRENT_DATABASE", "K_CURRENT_DATE", "K_CURRENT_SCHEMA", 
			"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_CURRENT_USER", "K_DATEDIFF", 
			"K_DATETIME", "K_DECIMAL", "K_DECODE", "K_DEFAULT", "K_DEFERRABLE", "K_DESC", 
			"K_DISTINCT", "K_ELSE", "K_ENCODED", "K_END", "K_EXCEPT", "K_EXISTS", 
			"K_EXTRACT", "K_FALSE", "K_FLOAT", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", 
			"K_GRANT", "K_GROUP", "K_HAVING", "K_ILIKE", "K_ILIKEB", "K_IN", "K_INITIALLY", 
			"K_INNER", "K_INOUT", "K_INT", "K_INTEGER", "K_INTERSECT", "K_INTERVAL", 
			"K_INTERVALYM", "K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KSAFE", "K_LEADING", 
			"K_LEFT", "K_LIKE", "K_LIKEB", "K_LIMIT", "K_LOCALTIME", "K_LOCALTIMESTAMP", 
			"K_MATCH", "K_MINUS", "K_MONEY", "K_NATURAL", "K_NCHAR", "K_NEW", "K_NONE", 
			"K_NOT", "K_NOTNULL", "K_NULL", "K_NULLSEQUAL", "K_NUMBER", "K_NUMERIC", 
			"K_OFFSET", "K_OLD", "K_ON", "K_ONLY", "K_OR", "K_ORDER", "K_OUT", "K_OUTER", 
			"K_OVER", "K_OVERLAPS", "K_OVERLAY", "K_PINNED", "K_POSITION", "K_PRECISION", 
			"K_PRIMARY", "K_REAL", "K_REFERENCES", "K_RIGHT", "K_ROW", "K_SCHEMA", 
			"K_SELECT", "K_SESSION_USER", "K_SIMILAR", "K_SMALLDATETIME", "K_SMALLINT", 
			"K_SOME", "K_SUBSTRING", "K_SYSDATE", "K_TABLE", "K_TEXT", "K_THEN", 
			"K_TIME", "K_TIMESERIES", "K_TIMESTAMP", "K_TIMESTAMPADD", "K_TIMESTAMPDIFF", 
			"K_TIMESTAMPTZ", "K_TIMETZ", "K_TIMEZONE", "K_TINYINT", "K_TO", "K_TRAILING", 
			"K_TREAT", "K_TRIM", "K_TRUE", "K_UNBOUNDED", "K_UNION", "K_UNIQUE", 
			"K_USER", "K_USING", "K_UUID", "K_VARBINARY", "K_VARCHAR", "K_VARCHAR2", 
			"K_WHEN", "K_WHERE", "K_WINDOW", "K_WITH", "K_WITHIN", "K_ABORT", "K_ABSOLUTE", 
			"K_ACCESS", "K_ACCESSRANK", "K_ACCOUNT", "K_ACTION", "K_ACTIVATE", "K_ACTIVEPARTITIONCOUNT", 
			"K_ADD", "K_ADMIN", "K_AFTER", "K_AGGREGATE", "K_ALSO", "K_ALTER", "K_ANALYSE", 
			"K_ANALYTIC", "K_ANALYZE", "K_ANNOTATED", "K_ANTI", "K_ASSERTION", "K_ASSIGNMENT", 
			"K_AT", "K_AUTHENTICATION", "K_AUTO", "K_AUTO_INCREMENT", "K_AVAILABLE", 
			"K_BACKWARD", "K_BASENAME", "K_BATCH", "K_BEFORE", "K_BEGIN", "K_BEST", 
			"K_BLOCK", "K_BLOCK_DICT", "K_BLOCKDICT_COMP", "K_BROADCAST", "K_BY", 
			"K_BYTEA", "K_BYTES", "K_BZIP", "K_BZIP_COMP", "K_CACHE", "K_CALLED", 
			"K_CASCADE", "K_CATALOGPATH", "K_CHAIN", "K_CHARACTER", "K_CHARACTERISTICS", 
			"K_CHARACTERS", "K_CHECKPOINT", "K_CLASS", "K_CLEAR", "K_CLOSE", "K_CLUSTER", 
			"K_COLSIZES", "K_COLUMNS_COUNT", "K_COMMENT", "K_COMMIT", "K_COMMITTED", 
			"K_COMMONDELTA_COMP", "K_COMMUNAL", "K_COMPLEX", "K_CONNECT", "K_CONSTRAINTS", 
			"K_CONTROL", "K_COPY", "K_CPUAFFINITYMODE", "K_CPUAFFINITYSET", "K_CREATEDB", 
			"K_CREATEUSER", "K_CSV", "K_CUBE", "K_CURRENT", "K_CURSOR", "K_CUSTOM", 
			"K_CUSTOM_PARTITIONS", "K_CYCLE", "K_DATA", "K_DATABASE", "K_DATAPATH", 
			"K_DAY", "K_DEACTIVATE", "K_DEALLOCATE", "K_DEC", "K_DECLARE", "K_DEFAULTS", 
			"K_DEFERRED", "K_DEFINE", "K_DEFINER", "K_DELETE", "K_DELIMITER", "K_DELIMITERS", 
			"K_DELTARANGE_COMP", "K_DELTARANGE_COMP_SP", "K_DELTAVAL", "K_DEPENDS", 
			"K_DETERMINES", "K_DIRECT", "K_DIRECTCOLS", "K_DIRECTED", "K_DIRECTGROUPED", 
			"K_DIRECTPROJ", "K_DISABLE", "K_DISABLED", "K_DISCONNECT", "K_DISTVALINDEX", 
			"K_DO", "K_DOMAIN", "K_DOUBLE", "K_DROP", "K_DURABLE", "K_EACH", "K_ENABLE", 
			"K_ENABLED", "K_ENCLOSED", "K_ENCODING", "K_ENCRYPTED", "K_ENFORCELENGTH", 
			"K_EPHEMERAL", "K_EPOCH", "K_ERROR", "K_ESCAPE", "K_EVENT", "K_EVENTS", 
			"K_EXCEPTION", "K_EXCEPTIONS", "K_EXCLUDE", "K_EXCLUDING", "K_EXCLUSIVE", 
			"K_EXECUTE", "K_EXECUTIONPARALLELISM", "K_EXPIRE", "K_EXPLAIN", "K_EXPORT", 
			"K_EXTERNAL", "K_FAILED_LOGIN_ATTEMPTS", "K_FAULT", "K_FENCED", "K_FETCH", 
			"K_FILESYSTEM", "K_FILLER", "K_FILTER", "K_FIRST", "K_FIXEDWIDTH", "K_FLEX", 
			"K_FLEXIBLE", "K_FOLLOWING", "K_FORCE", "K_FORMAT", "K_FORWARD", "K_FREEZE", 
			"K_FUNCTION", "K_FUNCTIONS", "K_GCDDELTA", "K_GET", "K_GLOBAL", "K_GRACEPERIOD", 
			"K_GROUPED", "K_GROUPING", "K_GZIP", "K_GZIP_COMP", "K_HANDLER", "K_HCATALOG", 
			"K_HCATALOG_CONNECTION_TIMEOUT", "K_HCATALOG_DB", "K_HCATALOG_SCHEMA", 
			"K_HCATALOG_SLOW_TRANSFER_LIMIT", "K_HCATALOG_SLOW_TRANSFER_TIME", "K_HCATALOG_USER", 
			"K_HIGH", "K_HIVE_PARTITION_COLS", "K_HIVESERVER2_HOSTNAME", "K_HOLD", 
			"K_HOST", "K_HOSTNAME", "K_HOUR", "K_HOURS", "K_IDENTIFIED", "K_IDENTITY", 
			"K_IDLESESSIONTIMEOUT", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IMMUTABLE", 
			"K_IMPLICIT", "K_INCLUDE", "K_INCLUDING", "K_INCREMENT", "K_INDEX", "K_INHERITS", 
			"K_INPUT", "K_INSENSITIVE", "K_INSERT", "K_INSTEAD", "K_INTERFACE", "K_INTERPOLATE", 
			"K_INVOKER", "K_ISOLATION", "K_JSON", "K_KEY", "K_LABEL", "K_LANCOMPILER", 
			"K_LANGUAGE", "K_LARGE", "K_LAST", "K_LATEST", "K_LESS", "K_LEVEL", "K_LIBRARY", 
			"K_LISTEN", "K_LOAD", "K_LOCAL", "K_LOCATION", "K_LOCK", "K_LONG", "K_LOW", 
			"K_LZO", "K_MANAGED", "K_MASK", "K_MATCHED", "K_MATERIALIZE", "K_MAXCONCURRENCY", 
			"K_MAXCONCURRENCYGRACE", "K_MAXCONNECTIONS", "K_MAXMEMORYSIZE", "K_MAXPAYLOAD", 
			"K_MAXQUERYMEMORYSIZE", "K_MAXVALUE", "K_MEDIUM", "K_MEMORYCAP", "K_MEMORYSIZE", 
			"K_MERGE", "K_MERGEOUT", "K_METHOD", "K_MICROSECONDS", "K_MILLISECONDS", 
			"K_MINUTE", "K_MINUTES", "K_MINVALUE", "K_MODE", "K_MODEL", "K_MONTH", 
			"K_MOVE", "K_MOVEOUT", "K_NAME", "K_NATIONAL", "K_NATIVE", "K_NETWORK", 
			"K_NEXT", "K_NO", "K_NOCREATEDB", "K_NOCREATEUSER", "K_NODE", "K_NODES", 
			"K_NOTHING", "K_NOTIFIER", "K_NOTIFY", "K_NOWAIT", "K_NULLAWARE", "K_NULLCOLS", 
			"K_NULLS", "K_OBJECT", "K_OCTETS", "K_OF", "K_OFF", "K_OIDS", "K_OPERATOR", 
			"K_OPT", "K_OPTIMIZER", "K_OPTION", "K_OPTVER", "K_ORC", "K_OTHERS", 
			"K_OWNER", "K_PARAMETER", "K_PARAMETERS", "K_PARQUET", "K_PARSER", "K_PARTIAL", 
			"K_PARTITION", "K_PARTITIONING", "K_PASSWORD", "K_PASSWORD_GRACE_TIME", 
			"K_PASSWORD_LIFE_TIME", "K_PASSWORD_LOCK_TIME", "K_PASSWORD_MAX_LENGTH", 
			"K_PASSWORD_MIN_DIGITS", "K_PASSWORD_MIN_LENGTH", "K_PASSWORD_MIN_LETTERS", 
			"K_PASSWORD_MIN_LOWERCASE_LETTERS", "K_PASSWORD_MIN_SYMBOLS", "K_PASSWORD_MIN_UPPERCASE_LETTERS", 
			"K_PASSWORD_REUSE_MAX", "K_PASSWORD_REUSE_TIME", "K_PATTERN", "K_PERCENT", 
			"K_PERMANENT", "K_PLACING", "K_PLANNEDCONCURRENCY", "K_POLICY", "K_POOL", 
			"K_PORT", "K_PRECEDING", "K_PREPARE", "K_PREPASS", "K_PRESERVE", "K_PREVIOUS", 
			"K_PRIOR", "K_PRIORITY", "K_PRIVILEGES", "K_PROCEDURAL", "K_PROCEDURE", 
			"K_PROFILE", "K_PROJECTION", "K_PROJECTIONS", "K_PSDATE", "K_QUERY", 
			"K_QUEUETIMEOUT", "K_QUOTE", "K_RANGE", "K_RAW", "K_READ", "K_RECHECK", 
			"K_RECORD", "K_RECOVER", "K_RECURSIVE", "K_REFRESH", "K_REINDEX", "K_REJECTED", 
			"K_REJECTMAX", "K_RELATIVE", "K_RELEASE", "K_REMOVE", "K_RENAME", "K_REORGANIZE", 
			"K_REPEATABLE", "K_REPLACE", "K_RESET", "K_RESOURCE", "K_RESTART", "K_RESTRICT", 
			"K_RESULTS", "K_RETURN", "K_RETURNREJECTED", "K_REVOKE", "K_RLE", "K_ROLE", 
			"K_ROLES", "K_ROLLBACK", "K_ROLLUP", "K_ROWS", "K_RULE", "K_RUNTIMECAP", 
			"K_RUNTIMEPRIORITY", "K_RUNTIMEPRIORITYTHRESHOLD", "K_SAVE", "K_SAVEPOINT", 
			"K_SCROLL", "K_SEARCH_PATH", "K_SECOND", "K_SECONDS", "K_SECURITY", "K_SECURITY_ALGORITHM", 
			"K_SEGMENTED", "K_SEMI", "K_SEMIALL", "K_SEQUENCE", "K_SEQUENCES", "K_SERIALIZABLE", 
			"K_SESSION", "K_SET", "K_SETOF", "K_SETS", "K_SHARE", "K_SHARED", "K_SHOW", 
			"K_SIMPLE", "K_SINGLEINITIATOR", "K_SITE", "K_SITES", "K_SKIP", "K_SOURCE", 
			"K_SPLIT", "K_SSL_CONFIG", "K_STABLE", "K_STANDBY", "K_START", "K_STATEMENT", 
			"K_STATISTICS", "K_STDIN", "K_STDOUT", "K_STEMMER", "K_STORAGE", "K_STREAM", 
			"K_STRENGTH", "K_STRICT", "K_SUBNET", "K_SYSID", "K_SYSTEM", "K_TABLES", 
			"K_TABLESAMPLE", "K_TABLESPACE", "K_TEMP", "K_TEMPLATE", "K_TEMPORARY", 
			"K_TEMPSPACECAP", "K_TERMINATOR", "K_THAN", "K_TIES", "K_TLS", "K_TOAST", 
			"K_TOKENIZER", "K_TOLERANCE", "K_TRANSACTION", "K_TRANSFORM", "K_TRICKLE", 
			"K_TRIGGER", "K_TRUNCATE", "K_TRUSTED", "K_TUNING", "K_TYPE", "K_UDPARAMETER", 
			"K_UNCOMMITTED", "K_UNCOMPRESSED", "K_UNI", "K_UNINDEXED", "K_UNKNOWN", 
			"K_UNLIMITED", "K_UNLISTEN", "K_UNLOCK", "K_UNPACKER", "K_UNSEGMENTED", 
			"K_UPDATE", "K_USAGE", "K_VACUUM", "K_VALIDATE", "K_VALIDATOR", "K_VALINDEX", 
			"K_VALUE", "K_VALUES", "K_VARYING", "K_VERBOSE", "K_VERTICA", "K_VIEW", 
			"K_VOLATILE", "K_WAIT", "K_WEBHDFS_ADDRESS", "K_WEBSERVICE_HOSTNAME", 
			"K_WEBSERVICE_PORT", "K_WITHOUT", "K_WORK", "K_WRITE", "K_YEAR", "K_ZONE", 
			"K_UDPARAMETERS", "K_ALLNODES", "K_PUBLIC", "K_DIRECTORY", "K_ROWGROUPSIZEMB", 
			"K_COMPRESSION", "K_FILESIZEMB", "K_FILEMODE", "K_DIRMODE", "K_ZSTD", 
			"K_ROUTE", "K_ROUTING", "K_ESCAPE_STRING_WARNING", "K_STANDARD_CONFORMING_STRINGS", 
			"K_AUTOCOMMIT", "K_LOCALE", "K_MULTIPLEACTIVERESULTSETS", "K_RESOURCE_POOL", 
			"K_INTERVALSTYLE", "K_PLAIN", "K_UNITS", "K_DATESTYLE", "K_ISO", "K_MDY", 
			"K_POSTGRES", "K_SQL", "K_GERMAN", "K_DMY", "K_TLSMODE", "K_PREFER", 
			"K_INT8", "K_FLOAT8", "K_GEOMETRY", "K_GEOGRAPHY", "K_DATE", "K_ADDRESS", 
			"K_BALANCE", "K_GBYTYPE", "K_HASH", "K_PIPE", "K_SYN_JOIN", "K_ENABLE_WITH_CLAUSE_MATERIALIZATION", 
			"K_EARLY_MATERIALIZATION", "K_SYNTACTIC_JOIN", "K_BRANCH", "K_DATATYPE", 
			"K_VERBATIM", "K_IGNORECONST", "K_UTYPE", "K_JTYPE", "K_DISTRIB", "K_PROJS", 
			"K_SKIP_PROJS", "COMMA", "MINUS", "STAR", "PLUS", "DCOLON", "OPEN_PAREN", 
			"CLOSE_PAREN", "DOT", "SEMI", "UNDERSCORE", "AMP", "AMP_AMP", "AMP_LT", 
			"BANG", "BANG_BANG", "BANG_EQUAL", "EQUAL", "EQUAL_GT", "EQUAL2", "GT", 
			"GTE", "LT", "LTE", "LT_GT", "DIV", "IPV4_ADDR", "IPV6_ADDR", "SPACE", 
			"COMMENT", "LINE_COMMENT_LITERAL", "OPEN_HINT", "CLOSE_HINT", "DOUBLE_QUOTE_STRING", 
			"WORD", "SINGLE_QUOTE_STRING", "FLOAT", "REAL", "DECIMAL", "ANY"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "VSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public VSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public List<TerminalNode> SEMI() { return getTokens(VSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(VSqlParser.SEMI, i);
		}
		public TerminalNode EOF() { return getToken(VSqlParser.EOF, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CREATE) | (1L << K_END) | (1L << K_GRANT))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (K_SELECT - 111)) | (1L << (K_ACTIVATE - 111)) | (1L << (K_ALTER - 111)) | (1L << (K_AT - 111)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (K_BEGIN - 180)) | (1L << (K_COMMENT - 180)) | (1L << (K_COMMIT - 180)) | (1L << (K_CONNECT - 180)) | (1L << (K_COPY - 180)) | (1L << (K_DEACTIVATE - 180)) | (1L << (K_DELETE - 180)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (K_DISCONNECT - 254)) | (1L << (K_DROP - 254)) | (1L << (K_EXPLAIN - 254)) | (1L << (K_EXPORT - 254)) | (1L << (K_GET - 254)))) != 0) || _la==K_INSERT || _la==K_MERGE || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RELEASE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_REVOKE - 462)) | (1L << (K_ROLLBACK - 462)) | (1L << (K_SAVE - 462)) | (1L << (K_SAVEPOINT - 462)) | (1L << (K_SET - 462)) | (1L << (K_SHOW - 462)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (K_START - 536)) | (1L << (K_TRUNCATE - 536)) | (1L << (K_UPDATE - 536)))) != 0) || _la==COMMA || _la==SEMI) {
				{
				{
				setState(727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CREATE) | (1L << K_END) | (1L << K_GRANT))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (K_SELECT - 111)) | (1L << (K_ACTIVATE - 111)) | (1L << (K_ALTER - 111)) | (1L << (K_AT - 111)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (K_BEGIN - 180)) | (1L << (K_COMMENT - 180)) | (1L << (K_COMMIT - 180)) | (1L << (K_CONNECT - 180)) | (1L << (K_COPY - 180)) | (1L << (K_DEACTIVATE - 180)) | (1L << (K_DELETE - 180)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (K_DISCONNECT - 254)) | (1L << (K_DROP - 254)) | (1L << (K_EXPLAIN - 254)) | (1L << (K_EXPORT - 254)) | (1L << (K_GET - 254)))) != 0) || _la==K_INSERT || _la==K_MERGE || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RELEASE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_REVOKE - 462)) | (1L << (K_ROLLBACK - 462)) | (1L << (K_SAVE - 462)) | (1L << (K_SAVEPOINT - 462)) | (1L << (K_SET - 462)) | (1L << (K_SHOW - 462)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (K_START - 536)) | (1L << (K_TRUNCATE - 536)) | (1L << (K_UPDATE - 536)))) != 0) || _la==COMMA) {
					{
					setState(726);
					statement();
					}
				}

				setState(729);
				match(SEMI);
				}
				}
				setState(734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(735);
				match(EOF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Alter_access_policy_statementContext alter_access_policy_statement() {
			return getRuleContext(Alter_access_policy_statementContext.class,0);
		}
		public Alter_authentication_statementContext alter_authentication_statement() {
			return getRuleContext(Alter_authentication_statementContext.class,0);
		}
		public Alter_database_drop_statementContext alter_database_drop_statement() {
			return getRuleContext(Alter_database_drop_statementContext.class,0);
		}
		public Alter_fault_group_statementContext alter_fault_group_statement() {
			return getRuleContext(Alter_fault_group_statementContext.class,0);
		}
		public Alter_function_statementContext alter_function_statement() {
			return getRuleContext(Alter_function_statementContext.class,0);
		}
		public Alter_hcatalog_schema_statementContext alter_hcatalog_schema_statement() {
			return getRuleContext(Alter_hcatalog_schema_statementContext.class,0);
		}
		public Alter_library_statementContext alter_library_statement() {
			return getRuleContext(Alter_library_statementContext.class,0);
		}
		public Alter_model_statementContext alter_model_statement() {
			return getRuleContext(Alter_model_statementContext.class,0);
		}
		public Alter_network_interface_statementContext alter_network_interface_statement() {
			return getRuleContext(Alter_network_interface_statementContext.class,0);
		}
		public Alter_node_statementContext alter_node_statement() {
			return getRuleContext(Alter_node_statementContext.class,0);
		}
		public Alter_notfifier_statementContext alter_notfifier_statement() {
			return getRuleContext(Alter_notfifier_statementContext.class,0);
		}
		public Alter_projection_statementContext alter_projection_statement() {
			return getRuleContext(Alter_projection_statementContext.class,0);
		}
		public Alter_profile_statementContext alter_profile_statement() {
			return getRuleContext(Alter_profile_statementContext.class,0);
		}
		public Alter_profile_rename_statementContext alter_profile_rename_statement() {
			return getRuleContext(Alter_profile_rename_statementContext.class,0);
		}
		public Alter_resource_pool_statementContext alter_resource_pool_statement() {
			return getRuleContext(Alter_resource_pool_statementContext.class,0);
		}
		public Alter_role_rename_statementContext alter_role_rename_statement() {
			return getRuleContext(Alter_role_rename_statementContext.class,0);
		}
		public Alter_schema_statementContext alter_schema_statement() {
			return getRuleContext(Alter_schema_statementContext.class,0);
		}
		public Alter_sequence_statementContext alter_sequence_statement() {
			return getRuleContext(Alter_sequence_statementContext.class,0);
		}
		public Alter_session_statementContext alter_session_statement() {
			return getRuleContext(Alter_session_statementContext.class,0);
		}
		public Alter_subnet_statementContext alter_subnet_statement() {
			return getRuleContext(Alter_subnet_statementContext.class,0);
		}
		public Alter_table_rename_statementContext alter_table_rename_statement() {
			return getRuleContext(Alter_table_rename_statementContext.class,0);
		}
		public Alter_table_general_statmentContext alter_table_general_statment() {
			return getRuleContext(Alter_table_general_statmentContext.class,0);
		}
		public Alter_user_statementContext alter_user_statement() {
			return getRuleContext(Alter_user_statementContext.class,0);
		}
		public Alter_view_statementContext alter_view_statement() {
			return getRuleContext(Alter_view_statementContext.class,0);
		}
		public Begin_transaction_statementContext begin_transaction_statement() {
			return getRuleContext(Begin_transaction_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Connect_statementContext connect_statement() {
			return getRuleContext(Connect_statementContext.class,0);
		}
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Copy_local_statementContext copy_local_statement() {
			return getRuleContext(Copy_local_statementContext.class,0);
		}
		public Copy_from_vertica_statementContext copy_from_vertica_statement() {
			return getRuleContext(Copy_from_vertica_statementContext.class,0);
		}
		public Create_access_policy_statementContext create_access_policy_statement() {
			return getRuleContext(Create_access_policy_statementContext.class,0);
		}
		public Create_authentication_statementContext create_authentication_statement() {
			return getRuleContext(Create_authentication_statementContext.class,0);
		}
		public Create_branch_statementContext create_branch_statement() {
			return getRuleContext(Create_branch_statementContext.class,0);
		}
		public Create_external_table_as_copy_statementContext create_external_table_as_copy_statement() {
			return getRuleContext(Create_external_table_as_copy_statementContext.class,0);
		}
		public Create_fault_group_statementContext create_fault_group_statement() {
			return getRuleContext(Create_fault_group_statementContext.class,0);
		}
		public Create_flex_table_statementContext create_flex_table_statement() {
			return getRuleContext(Create_flex_table_statementContext.class,0);
		}
		public Create_flex_external_table_as_copy_statementContext create_flex_external_table_as_copy_statement() {
			return getRuleContext(Create_flex_external_table_as_copy_statementContext.class,0);
		}
		public Create_function_statements_statementContext create_function_statements_statement() {
			return getRuleContext(Create_function_statements_statementContext.class,0);
		}
		public Create_hcatalog_schema_statementContext create_hcatalog_schema_statement() {
			return getRuleContext(Create_hcatalog_schema_statementContext.class,0);
		}
		public Create_library_statementContext create_library_statement() {
			return getRuleContext(Create_library_statementContext.class,0);
		}
		public Create_load_balance_group_statementContext create_load_balance_group_statement() {
			return getRuleContext(Create_load_balance_group_statementContext.class,0);
		}
		public Create_local_temporary_view_statementContext create_local_temporary_view_statement() {
			return getRuleContext(Create_local_temporary_view_statementContext.class,0);
		}
		public Create_location_statementContext create_location_statement() {
			return getRuleContext(Create_location_statementContext.class,0);
		}
		public Create_network_address_statementContext create_network_address_statement() {
			return getRuleContext(Create_network_address_statementContext.class,0);
		}
		public Create_network_interface_statementContext create_network_interface_statement() {
			return getRuleContext(Create_network_interface_statementContext.class,0);
		}
		public Create_notifier_statementContext create_notifier_statement() {
			return getRuleContext(Create_notifier_statementContext.class,0);
		}
		public Create_procedure_statementContext create_procedure_statement() {
			return getRuleContext(Create_procedure_statementContext.class,0);
		}
		public Create_profile_statementContext create_profile_statement() {
			return getRuleContext(Create_profile_statementContext.class,0);
		}
		public Create_projection_statementContext create_projection_statement() {
			return getRuleContext(Create_projection_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_statementContext create_projection_live_aggregate_projections_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_statementContext.class,0);
		}
		public Create_projection_udtfs_statementContext create_projection_udtfs_statement() {
			return getRuleContext(Create_projection_udtfs_statementContext.class,0);
		}
		public Create_resource_pool_statementContext create_resource_pool_statement() {
			return getRuleContext(Create_resource_pool_statementContext.class,0);
		}
		public Create_role_statementContext create_role_statement() {
			return getRuleContext(Create_role_statementContext.class,0);
		}
		public Create_routing_rule_statementContext create_routing_rule_statement() {
			return getRuleContext(Create_routing_rule_statementContext.class,0);
		}
		public Create_schema_statementContext create_schema_statement() {
			return getRuleContext(Create_schema_statementContext.class,0);
		}
		public Create_sequence_statementContext create_sequence_statement() {
			return getRuleContext(Create_sequence_statementContext.class,0);
		}
		public Create_subnet_statementContext create_subnet_statement() {
			return getRuleContext(Create_subnet_statementContext.class,0);
		}
		public Create_table_statementContext create_table_statement() {
			return getRuleContext(Create_table_statementContext.class,0);
		}
		public Create_temporary_table_statementContext create_temporary_table_statement() {
			return getRuleContext(Create_temporary_table_statementContext.class,0);
		}
		public Create_text_index_statementContext create_text_index_statement() {
			return getRuleContext(Create_text_index_statementContext.class,0);
		}
		public Create_user_statementContext create_user_statement() {
			return getRuleContext(Create_user_statementContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Directed_query_statements_statementContext directed_query_statements_statement() {
			return getRuleContext(Directed_query_statements_statementContext.class,0);
		}
		public Disconnect_statementContext disconnect_statement() {
			return getRuleContext(Disconnect_statementContext.class,0);
		}
		public Drop_access_policy_statementContext drop_access_policy_statement() {
			return getRuleContext(Drop_access_policy_statementContext.class,0);
		}
		public Drop_aggregate_function_statementContext drop_aggregate_function_statement() {
			return getRuleContext(Drop_aggregate_function_statementContext.class,0);
		}
		public Drop_authentication_statementContext drop_authentication_statement() {
			return getRuleContext(Drop_authentication_statementContext.class,0);
		}
		public Drop_branch_statementContext drop_branch_statement() {
			return getRuleContext(Drop_branch_statementContext.class,0);
		}
		public Drop_fault_group_statementContext drop_fault_group_statement() {
			return getRuleContext(Drop_fault_group_statementContext.class,0);
		}
		public Drop_function_statementContext drop_function_statement() {
			return getRuleContext(Drop_function_statementContext.class,0);
		}
		public Drop_source_statementContext drop_source_statement() {
			return getRuleContext(Drop_source_statementContext.class,0);
		}
		public Drop_filter_statementContext drop_filter_statement() {
			return getRuleContext(Drop_filter_statementContext.class,0);
		}
		public Drop_parser_statementContext drop_parser_statement() {
			return getRuleContext(Drop_parser_statementContext.class,0);
		}
		public Drop_model_statementContext drop_model_statement() {
			return getRuleContext(Drop_model_statementContext.class,0);
		}
		public Drop_library_statementContext drop_library_statement() {
			return getRuleContext(Drop_library_statementContext.class,0);
		}
		public Drop_load_balance_group_statementContext drop_load_balance_group_statement() {
			return getRuleContext(Drop_load_balance_group_statementContext.class,0);
		}
		public Drop_network_address_statementContext drop_network_address_statement() {
			return getRuleContext(Drop_network_address_statementContext.class,0);
		}
		public Drop_network_interface_statementContext drop_network_interface_statement() {
			return getRuleContext(Drop_network_interface_statementContext.class,0);
		}
		public Drop_notifier_statementContext drop_notifier_statement() {
			return getRuleContext(Drop_notifier_statementContext.class,0);
		}
		public Drop_procedure_statementContext drop_procedure_statement() {
			return getRuleContext(Drop_procedure_statementContext.class,0);
		}
		public Drop_profile_statementContext drop_profile_statement() {
			return getRuleContext(Drop_profile_statementContext.class,0);
		}
		public Drop_projection_statementContext drop_projection_statement() {
			return getRuleContext(Drop_projection_statementContext.class,0);
		}
		public Drop_resource_pool_statementContext drop_resource_pool_statement() {
			return getRuleContext(Drop_resource_pool_statementContext.class,0);
		}
		public Drop_role_statementContext drop_role_statement() {
			return getRuleContext(Drop_role_statementContext.class,0);
		}
		public Drop_routing_rule_statementContext drop_routing_rule_statement() {
			return getRuleContext(Drop_routing_rule_statementContext.class,0);
		}
		public Drop_schema_statementContext drop_schema_statement() {
			return getRuleContext(Drop_schema_statementContext.class,0);
		}
		public Drop_sequence_statementContext drop_sequence_statement() {
			return getRuleContext(Drop_sequence_statementContext.class,0);
		}
		public Drop_subnet_statementContext drop_subnet_statement() {
			return getRuleContext(Drop_subnet_statementContext.class,0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Drop_text_index_statementContext drop_text_index_statement() {
			return getRuleContext(Drop_text_index_statementContext.class,0);
		}
		public Drop_transform_function_statementContext drop_transform_function_statement() {
			return getRuleContext(Drop_transform_function_statementContext.class,0);
		}
		public Drop_user_statementContext drop_user_statement() {
			return getRuleContext(Drop_user_statementContext.class,0);
		}
		public Drop_view_statementContext drop_view_statement() {
			return getRuleContext(Drop_view_statementContext.class,0);
		}
		public End_statementContext end_statement() {
			return getRuleContext(End_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Export_to_parquet_statementContext export_to_parquet_statement() {
			return getRuleContext(Export_to_parquet_statementContext.class,0);
		}
		public Export_to_vertica_statementContext export_to_vertica_statement() {
			return getRuleContext(Export_to_vertica_statementContext.class,0);
		}
		public Grant_statements_statementContext grant_statements_statement() {
			return getRuleContext(Grant_statements_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Profile_statementContext profile_statement() {
			return getRuleContext(Profile_statementContext.class,0);
		}
		public Release_savepoint_statementContext release_savepoint_statement() {
			return getRuleContext(Release_savepoint_statementContext.class,0);
		}
		public Revoke_statements_statementContext revoke_statements_statement() {
			return getRuleContext(Revoke_statements_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Rollback_to_savepoint_statementContext rollback_to_savepoint_statement() {
			return getRuleContext(Rollback_to_savepoint_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Set_datestyle_statementContext set_datestyle_statement() {
			return getRuleContext(Set_datestyle_statementContext.class,0);
		}
		public Set_escape_string_warning_statementContext set_escape_string_warning_statement() {
			return getRuleContext(Set_escape_string_warning_statementContext.class,0);
		}
		public Set_intervalstyle_statementContext set_intervalstyle_statement() {
			return getRuleContext(Set_intervalstyle_statementContext.class,0);
		}
		public Set_locale_statementContext set_locale_statement() {
			return getRuleContext(Set_locale_statementContext.class,0);
		}
		public Set_role_statementContext set_role_statement() {
			return getRuleContext(Set_role_statementContext.class,0);
		}
		public Set_search_path_statementContext set_search_path_statement() {
			return getRuleContext(Set_search_path_statementContext.class,0);
		}
		public Set_session_autocommit_statementContext set_session_autocommit_statement() {
			return getRuleContext(Set_session_autocommit_statementContext.class,0);
		}
		public Set_session_characteristics_as_transaction_statementContext set_session_characteristics_as_transaction_statement() {
			return getRuleContext(Set_session_characteristics_as_transaction_statementContext.class,0);
		}
		public Set_session_graceperiod_statementContext set_session_graceperiod_statement() {
			return getRuleContext(Set_session_graceperiod_statementContext.class,0);
		}
		public Set_session_idlesessiontimeout_statementContext set_session_idlesessiontimeout_statement() {
			return getRuleContext(Set_session_idlesessiontimeout_statementContext.class,0);
		}
		public Set_session_memorycap_statementContext set_session_memorycap_statement() {
			return getRuleContext(Set_session_memorycap_statementContext.class,0);
		}
		public Set_session_multipleactiveresultsets_statementContext set_session_multipleactiveresultsets_statement() {
			return getRuleContext(Set_session_multipleactiveresultsets_statementContext.class,0);
		}
		public Set_session_resource_pool_statementContext set_session_resource_pool_statement() {
			return getRuleContext(Set_session_resource_pool_statementContext.class,0);
		}
		public Set_session_runtimecap_statementContext set_session_runtimecap_statement() {
			return getRuleContext(Set_session_runtimecap_statementContext.class,0);
		}
		public Set_session_tempspacecap_statementContext set_session_tempspacecap_statement() {
			return getRuleContext(Set_session_tempspacecap_statementContext.class,0);
		}
		public Set_standard_conforming_strings_statementContext set_standard_conforming_strings_statement() {
			return getRuleContext(Set_standard_conforming_strings_statementContext.class,0);
		}
		public Set_time_zone_statementContext set_time_zone_statement() {
			return getRuleContext(Set_time_zone_statementContext.class,0);
		}
		public Show_statementContext show_statement() {
			return getRuleContext(Show_statementContext.class,0);
		}
		public Show_current_statementContext show_current_statement() {
			return getRuleContext(Show_current_statementContext.class,0);
		}
		public Show_database_statementContext show_database_statement() {
			return getRuleContext(Show_database_statementContext.class,0);
		}
		public Show_node_statementContext show_node_statement() {
			return getRuleContext(Show_node_statementContext.class,0);
		}
		public Show_session_statementContext show_session_statement() {
			return getRuleContext(Show_session_statementContext.class,0);
		}
		public Start_transaction_statementContext start_transaction_statement() {
			return getRuleContext(Start_transaction_statementContext.class,0);
		}
		public Truncate_table_statementContext truncate_table_statement() {
			return getRuleContext(Truncate_table_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(738);
				alter_access_policy_statement();
				}
				break;
			case 2:
				{
				setState(739);
				alter_authentication_statement();
				}
				break;
			case 3:
				{
				setState(740);
				alter_database_drop_statement();
				}
				break;
			case 4:
				{
				setState(741);
				alter_fault_group_statement();
				}
				break;
			case 5:
				{
				setState(742);
				alter_function_statement();
				}
				break;
			case 6:
				{
				setState(743);
				alter_hcatalog_schema_statement();
				}
				break;
			case 7:
				{
				setState(744);
				alter_library_statement();
				}
				break;
			case 8:
				{
				setState(745);
				alter_model_statement();
				}
				break;
			case 9:
				{
				setState(746);
				alter_network_interface_statement();
				}
				break;
			case 10:
				{
				setState(747);
				alter_node_statement();
				}
				break;
			case 11:
				{
				setState(748);
				alter_notfifier_statement();
				}
				break;
			case 12:
				{
				setState(749);
				alter_projection_statement();
				}
				break;
			case 13:
				{
				setState(750);
				alter_profile_statement();
				}
				break;
			case 14:
				{
				setState(751);
				alter_profile_rename_statement();
				}
				break;
			case 15:
				{
				setState(752);
				alter_resource_pool_statement();
				}
				break;
			case 16:
				{
				setState(753);
				alter_role_rename_statement();
				}
				break;
			case 17:
				{
				setState(754);
				alter_schema_statement();
				}
				break;
			case 18:
				{
				setState(755);
				alter_sequence_statement();
				}
				break;
			case 19:
				{
				setState(756);
				alter_session_statement();
				}
				break;
			case 20:
				{
				setState(757);
				alter_subnet_statement();
				}
				break;
			case 21:
				{
				setState(758);
				alter_table_rename_statement();
				}
				break;
			case 22:
				{
				setState(759);
				alter_table_general_statment();
				}
				break;
			case 23:
				{
				setState(760);
				alter_user_statement();
				}
				break;
			case 24:
				{
				setState(761);
				alter_view_statement();
				}
				break;
			case 25:
				{
				setState(762);
				begin_transaction_statement();
				}
				break;
			case 26:
				{
				setState(763);
				comment_on_statement();
				}
				break;
			case 27:
				{
				setState(764);
				commit_statement();
				}
				break;
			case 28:
				{
				setState(765);
				connect_statement();
				}
				break;
			case 29:
				{
				setState(766);
				copy_statement();
				}
				break;
			case 30:
				{
				setState(767);
				copy_local_statement();
				}
				break;
			case 31:
				{
				setState(768);
				copy_from_vertica_statement();
				}
				break;
			case 32:
				{
				setState(769);
				create_access_policy_statement();
				}
				break;
			case 33:
				{
				setState(770);
				create_authentication_statement();
				}
				break;
			case 34:
				{
				setState(771);
				create_branch_statement();
				}
				break;
			case 35:
				{
				setState(772);
				create_external_table_as_copy_statement();
				}
				break;
			case 36:
				{
				setState(773);
				create_fault_group_statement();
				}
				break;
			case 37:
				{
				setState(774);
				create_flex_table_statement();
				}
				break;
			case 38:
				{
				setState(775);
				create_flex_external_table_as_copy_statement();
				}
				break;
			case 39:
				{
				setState(776);
				create_function_statements_statement();
				}
				break;
			case 40:
				{
				setState(777);
				create_hcatalog_schema_statement();
				}
				break;
			case 41:
				{
				setState(778);
				create_library_statement();
				}
				break;
			case 42:
				{
				setState(779);
				create_load_balance_group_statement();
				}
				break;
			case 43:
				{
				setState(780);
				create_local_temporary_view_statement();
				}
				break;
			case 44:
				{
				setState(781);
				create_location_statement();
				}
				break;
			case 45:
				{
				setState(782);
				create_network_address_statement();
				}
				break;
			case 46:
				{
				setState(783);
				create_network_interface_statement();
				}
				break;
			case 47:
				{
				setState(784);
				create_notifier_statement();
				}
				break;
			case 48:
				{
				setState(785);
				create_procedure_statement();
				}
				break;
			case 49:
				{
				setState(786);
				create_profile_statement();
				}
				break;
			case 50:
				{
				setState(787);
				create_projection_statement();
				}
				break;
			case 51:
				{
				setState(788);
				create_projection_live_aggregate_projections_statement();
				}
				break;
			case 52:
				{
				setState(789);
				create_projection_udtfs_statement();
				}
				break;
			case 53:
				{
				setState(790);
				create_resource_pool_statement();
				}
				break;
			case 54:
				{
				setState(791);
				create_role_statement();
				}
				break;
			case 55:
				{
				setState(792);
				create_routing_rule_statement();
				}
				break;
			case 56:
				{
				setState(793);
				create_schema_statement();
				}
				break;
			case 57:
				{
				setState(794);
				create_sequence_statement();
				}
				break;
			case 58:
				{
				setState(795);
				create_subnet_statement();
				}
				break;
			case 59:
				{
				setState(796);
				create_table_statement();
				}
				break;
			case 60:
				{
				setState(797);
				create_temporary_table_statement();
				}
				break;
			case 61:
				{
				setState(798);
				create_text_index_statement();
				}
				break;
			case 62:
				{
				setState(799);
				create_user_statement();
				}
				break;
			case 63:
				{
				setState(800);
				create_view_statement();
				}
				break;
			case 64:
				{
				setState(801);
				delete_statement();
				}
				break;
			case 65:
				{
				setState(802);
				directed_query_statements_statement();
				}
				break;
			case 66:
				{
				setState(803);
				disconnect_statement();
				}
				break;
			case 67:
				{
				setState(804);
				drop_access_policy_statement();
				}
				break;
			case 68:
				{
				setState(805);
				drop_aggregate_function_statement();
				}
				break;
			case 69:
				{
				setState(806);
				drop_authentication_statement();
				}
				break;
			case 70:
				{
				setState(807);
				drop_branch_statement();
				}
				break;
			case 71:
				{
				setState(808);
				drop_fault_group_statement();
				}
				break;
			case 72:
				{
				setState(809);
				drop_function_statement();
				}
				break;
			case 73:
				{
				setState(810);
				drop_source_statement();
				}
				break;
			case 74:
				{
				setState(811);
				drop_filter_statement();
				}
				break;
			case 75:
				{
				setState(812);
				drop_parser_statement();
				}
				break;
			case 76:
				{
				setState(813);
				drop_model_statement();
				}
				break;
			case 77:
				{
				setState(814);
				drop_library_statement();
				}
				break;
			case 78:
				{
				setState(815);
				drop_load_balance_group_statement();
				}
				break;
			case 79:
				{
				setState(816);
				drop_network_address_statement();
				}
				break;
			case 80:
				{
				setState(817);
				drop_network_interface_statement();
				}
				break;
			case 81:
				{
				setState(818);
				drop_notifier_statement();
				}
				break;
			case 82:
				{
				setState(819);
				drop_procedure_statement();
				}
				break;
			case 83:
				{
				setState(820);
				drop_profile_statement();
				}
				break;
			case 84:
				{
				setState(821);
				drop_projection_statement();
				}
				break;
			case 85:
				{
				setState(822);
				drop_resource_pool_statement();
				}
				break;
			case 86:
				{
				setState(823);
				drop_role_statement();
				}
				break;
			case 87:
				{
				setState(824);
				drop_routing_rule_statement();
				}
				break;
			case 88:
				{
				setState(825);
				drop_schema_statement();
				}
				break;
			case 89:
				{
				setState(826);
				drop_sequence_statement();
				}
				break;
			case 90:
				{
				setState(827);
				drop_subnet_statement();
				}
				break;
			case 91:
				{
				setState(828);
				drop_table_statement();
				}
				break;
			case 92:
				{
				setState(829);
				drop_text_index_statement();
				}
				break;
			case 93:
				{
				setState(830);
				drop_transform_function_statement();
				}
				break;
			case 94:
				{
				setState(831);
				drop_user_statement();
				}
				break;
			case 95:
				{
				setState(832);
				drop_view_statement();
				}
				break;
			case 96:
				{
				setState(833);
				end_statement();
				}
				break;
			case 97:
				{
				setState(834);
				explain_statement();
				}
				break;
			case 98:
				{
				setState(835);
				export_to_parquet_statement();
				}
				break;
			case 99:
				{
				setState(836);
				export_to_vertica_statement();
				}
				break;
			case 100:
				{
				setState(837);
				grant_statements_statement();
				}
				break;
			case 101:
				{
				setState(838);
				insert_statement();
				}
				break;
			case 102:
				{
				setState(839);
				merge_statement();
				}
				break;
			case 103:
				{
				setState(840);
				profile_statement();
				}
				break;
			case 104:
				{
				setState(841);
				release_savepoint_statement();
				}
				break;
			case 105:
				{
				setState(842);
				revoke_statements_statement();
				}
				break;
			case 106:
				{
				setState(843);
				rollback_statement();
				}
				break;
			case 107:
				{
				setState(844);
				rollback_to_savepoint_statement();
				}
				break;
			case 108:
				{
				setState(845);
				savepoint_statement();
				}
				break;
			case 109:
				{
				setState(846);
				select_statement();
				}
				break;
			case 110:
				{
				setState(847);
				set_datestyle_statement();
				}
				break;
			case 111:
				{
				setState(848);
				set_escape_string_warning_statement();
				}
				break;
			case 112:
				{
				setState(849);
				set_intervalstyle_statement();
				}
				break;
			case 113:
				{
				setState(850);
				set_locale_statement();
				}
				break;
			case 114:
				{
				setState(851);
				set_role_statement();
				}
				break;
			case 115:
				{
				setState(852);
				set_search_path_statement();
				}
				break;
			case 116:
				{
				setState(853);
				set_session_autocommit_statement();
				}
				break;
			case 117:
				{
				setState(854);
				set_session_characteristics_as_transaction_statement();
				}
				break;
			case 118:
				{
				setState(855);
				set_session_graceperiod_statement();
				}
				break;
			case 119:
				{
				setState(856);
				set_session_idlesessiontimeout_statement();
				}
				break;
			case 120:
				{
				setState(857);
				set_session_memorycap_statement();
				}
				break;
			case 121:
				{
				setState(858);
				set_session_multipleactiveresultsets_statement();
				}
				break;
			case 122:
				{
				setState(859);
				set_session_resource_pool_statement();
				}
				break;
			case 123:
				{
				setState(860);
				set_session_runtimecap_statement();
				}
				break;
			case 124:
				{
				setState(861);
				set_session_tempspacecap_statement();
				}
				break;
			case 125:
				{
				setState(862);
				set_standard_conforming_strings_statement();
				}
				break;
			case 126:
				{
				setState(863);
				set_time_zone_statement();
				}
				break;
			case 127:
				{
				setState(864);
				show_statement();
				}
				break;
			case 128:
				{
				setState(865);
				show_current_statement();
				}
				break;
			case 129:
				{
				setState(866);
				show_database_statement();
				}
				break;
			case 130:
				{
				setState(867);
				show_node_statement();
				}
				break;
			case 131:
				{
				setState(868);
				show_session_statement();
				}
				break;
			case 132:
				{
				setState(869);
				start_transaction_statement();
				}
				break;
			case 133:
				{
				setState(870);
				truncate_table_statement();
				}
				break;
			case 134:
				{
				setState(871);
				update_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Alter_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_access_policy_statementContext alter_access_policy_statement() throws RecognitionException {
		Alter_access_policy_statementContext _localctx = new Alter_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_alter_access_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(874);
			match(K_ALTER);
			setState(875);
			match(K_ACCESS);
			setState(876);
			match(K_POLICY);
			setState(877);
			match(K_ON);
			setState(878);
			tableReference();
			setState(890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				{
				setState(879);
				match(K_FOR);
				setState(880);
				match(K_COLUMN);
				setState(881);
				columnReference();
				setState(883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					setState(882);
					predicates();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(885);
				match(K_FOR);
				setState(886);
				match(K_ROWS);
				setState(888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WHERE) {
					{
					setState(887);
					where_clause();
					}
				}

				}
				}
				break;
			}
			setState(897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DISABLE:
			case K_ENABLE:
				{
				setState(892);
				enableOrDisable();
				}
				break;
			case K_COPY:
				{
				{
				setState(893);
				match(K_COPY);
				setState(894);
				match(K_TO);
				setState(895);
				match(K_TABLE);
				setState(896);
				tableReference();
				}
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public MethodContext method() {
			return getRuleContext(MethodContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public Alter_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authentication_statementContext alter_authentication_statement() throws RecognitionException {
		Alter_authentication_statementContext _localctx = new Alter_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(899);
			match(K_ALTER);
			setState(900);
			match(K_AUTHENTICATION);
			setState(901);
			auth_method_name();
			setState(921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DISABLE:
			case K_ENABLE:
				{
				setState(902);
				enableOrDisable();
				}
				break;
			case K_HOST:
			case K_LOCAL:
				{
				setState(912);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_LOCAL:
					{
					setState(903);
					match(K_LOCAL);
					}
					break;
				case K_HOST:
					{
					{
					setState(904);
					match(K_HOST);
					setState(909);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NO || _la==K_TLS) {
						{
						setState(906);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==K_NO) {
							{
							setState(905);
							match(K_NO);
							}
						}

						setState(908);
						match(K_TLS);
						}
					}

					setState(911);
					address();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_RENAME:
				{
				setState(914);
				rename_clause();
				}
				break;
			case K_METHOD:
				{
				{
				setState(915);
				match(K_METHOD);
				setState(916);
				method();
				}
				}
				break;
			case K_SET:
				{
				{
				setState(917);
				match(K_SET);
				setState(918);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case K_PRIORITY:
				{
				{
				setState(919);
				match(K_PRIORITY);
				setState(920);
				integerNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_database_drop_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_STANDBY() { return getToken(VSqlParser.K_STANDBY, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public Alter_database_drop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_drop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_database_drop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_database_drop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_database_drop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_drop_statementContext alter_database_drop_statement() throws RecognitionException {
		Alter_database_drop_statementContext _localctx = new Alter_database_drop_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_database_drop_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(923);
			match(K_ALTER);
			setState(924);
			match(K_DATABASE);
			setState(925);
			dbname();
			setState(945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DROP:
				{
				{
				setState(926);
				match(K_DROP);
				setState(927);
				match(K_ALL);
				setState(928);
				match(K_FAULT);
				setState(929);
				match(K_GROUP);
				}
				}
				break;
			case K_EXPORT:
				{
				{
				setState(930);
				match(K_EXPORT);
				setState(931);
				match(K_ON);
				setState(932);
				subnet();
				}
				}
				break;
			case K_RESET:
				{
				{
				setState(933);
				match(K_RESET);
				setState(934);
				match(K_STANDBY);
				}
				}
				break;
			case K_SET:
				{
				{
				setState(935);
				match(K_SET);
				setState(937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(936);
					match(K_PARAMETER);
					}
					break;
				}
				setState(939);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case K_CLEAR:
				{
				{
				setState(940);
				match(K_CLEAR);
				setState(942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(941);
					match(K_PARAMETER);
					}
					break;
				}
				setState(944);
				params();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public List<TerminalNode> K_FAULT() { return getTokens(VSqlParser.K_FAULT); }
		public TerminalNode K_FAULT(int i) {
			return getToken(VSqlParser.K_FAULT, i);
		}
		public List<TerminalNode> K_GROUP() { return getTokens(VSqlParser.K_GROUP); }
		public TerminalNode K_GROUP(int i) {
			return getToken(VSqlParser.K_GROUP, i);
		}
		public FaultGroupContext faultGroup() {
			return getRuleContext(FaultGroupContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Alter_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fault_group_statementContext alter_fault_group_statement() throws RecognitionException {
		Alter_fault_group_statementContext _localctx = new Alter_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(947);
			match(K_ALTER);
			setState(948);
			match(K_FAULT);
			setState(949);
			match(K_GROUP);
			setState(950);
			faultGroup();
			setState(966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				{
				setState(951);
				match(K_ADD);
				setState(952);
				match(K_NODE);
				setState(953);
				node();
				}
				}
				break;
			case 2:
				{
				{
				setState(954);
				match(K_DROP);
				setState(955);
				match(K_NODE);
				setState(956);
				node();
				}
				}
				break;
			case 3:
				{
				{
				setState(957);
				match(K_ADD);
				setState(958);
				match(K_FAULT);
				setState(959);
				match(K_GROUP);
				setState(960);
				value();
				}
				}
				break;
			case 4:
				{
				{
				setState(961);
				match(K_DROP);
				setState(962);
				match(K_FAULT);
				setState(963);
				match(K_GROUP);
				setState(964);
				value();
				}
				}
				break;
			case 5:
				{
				setState(965);
				rename_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_function_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public Bool_expressionContext bool_expression() {
			return getRuleContext(Bool_expressionContext.class,0);
		}
		public Alter_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_function_statementContext alter_function_statement() throws RecognitionException {
		Alter_function_statementContext _localctx = new Alter_function_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(968);
			match(K_ALTER);
			setState(969);
			match(K_FUNCTION);
			setState(970);
			functionReference();
			setState(972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(971);
				argument_list();
				}
			}

			setState(980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(974);
				owner_clause();
				}
				break;
			case 2:
				{
				setState(975);
				rename_clause();
				}
				break;
			case 3:
				{
				setState(976);
				set_schema_clause();
				}
				break;
			case 4:
				{
				{
				setState(977);
				match(K_SET);
				setState(978);
				match(K_FENCED);
				setState(979);
				bool_expression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_hcatalog_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public List<Hcatalog_schema_paramContext> hcatalog_schema_param() {
			return getRuleContexts(Hcatalog_schema_paramContext.class);
		}
		public Hcatalog_schema_paramContext hcatalog_schema_param(int i) {
			return getRuleContext(Hcatalog_schema_paramContext.class,i);
		}
		public Alter_hcatalog_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_hcatalog_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_hcatalog_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_hcatalog_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_hcatalog_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_hcatalog_schema_statementContext alter_hcatalog_schema_statement() throws RecognitionException {
		Alter_hcatalog_schema_statementContext _localctx = new Alter_hcatalog_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_hcatalog_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(982);
			match(K_ALTER);
			setState(983);
			match(K_HCATALOG);
			setState(984);
			match(K_SCHEMA);
			setState(985);
			schema();
			setState(986);
			match(K_SET);
			setState(988); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(987);
				hcatalog_schema_param();
				}
				}
				setState(990); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_CUSTOM_PARTITIONS || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (K_HCATALOG_CONNECTION_TIMEOUT - 313)) | (1L << (K_HCATALOG_SCHEMA - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 313)) | (1L << (K_HCATALOG_USER - 313)) | (1L << (K_HIVESERVER2_HOSTNAME - 313)) | (1L << (K_HOSTNAME - 313)))) != 0) || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_library_statementContext extends ParserRuleContext {
		public ValueContext depends;
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Alter_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_library_statementContext alter_library_statement() throws RecognitionException {
		Alter_library_statementContext _localctx = new Alter_library_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_library_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(992);
			match(K_ALTER);
			setState(993);
			match(K_LIBRARY);
			setState(994);
			libraryReference();
			setState(1001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(995);
				match(K_DEPENDS);
				setState(996);
				((Alter_library_statementContext)_localctx).depends = value();
				setState(999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					setState(997);
					match(K_LANGUAGE);
					setState(998);
					lang();
					}
					break;
				}
				}
				break;
			}
			setState(1003);
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_model_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public ModelReferenceContext modelReference() {
			return getRuleContext(ModelReferenceContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Alter_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_model_statementContext alter_model_statement() throws RecognitionException {
		Alter_model_statementContext _localctx = new Alter_model_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_model_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1005);
			match(K_ALTER);
			setState(1006);
			match(K_MODEL);
			setState(1007);
			modelReference();
			setState(1011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_OWNER:
				{
				setState(1008);
				owner_clause();
				}
				break;
			case K_RENAME:
				{
				setState(1009);
				rename_clause();
				}
				break;
			case K_SET:
				{
				setState(1010);
				set_schema_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_network_interface_statementContext alter_network_interface_statement() throws RecognitionException {
		Alter_network_interface_statementContext _localctx = new Alter_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_network_interface_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1013);
			match(K_ALTER);
			setState(1014);
			match(K_NETWORK);
			setState(1015);
			match(K_INTERFACE);
			setState(1016);
			network_interface();
			setState(1017);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_node_statementContext extends ParserRuleContext {
		public NodeContext exportOn;
		public ValueContext nodeType;
		public ValueContext standByNode;
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public Alter_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_node_statementContext alter_node_statement() throws RecognitionException {
		Alter_node_statementContext _localctx = new Alter_node_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_node_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1019);
			match(K_ALTER);
			setState(1020);
			match(K_NODE);
			setState(1021);
			node();
			setState(1045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				{
				setState(1022);
				match(K_EXPORT);
				setState(1023);
				match(K_ON);
				setState(1024);
				((Alter_node_statementContext)_localctx).exportOn = node();
				}
				}
				break;
			case 2:
				{
				{
				setState(1026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					setState(1025);
					match(K_IS);
					}
					break;
				}
				setState(1028);
				((Alter_node_statementContext)_localctx).nodeType = value();
				}
				}
				break;
			case 3:
				{
				{
				setState(1029);
				match(K_REPLACE);
				setState(1032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(1030);
					match(K_WITH);
					setState(1031);
					((Alter_node_statementContext)_localctx).standByNode = value();
					}
				}

				}
				}
				break;
			case 4:
				{
				setState(1034);
				match(K_RESET);
				}
				break;
			case 5:
				{
				{
				setState(1035);
				match(K_SET);
				setState(1037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					setState(1036);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1039);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 6:
				{
				{
				setState(1040);
				match(K_CLEAR);
				setState(1042);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(1041);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1044);
				params();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_notfifier_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public List<Notifier_paramsContext> notifier_params() {
			return getRuleContexts(Notifier_paramsContext.class);
		}
		public Notifier_paramsContext notifier_params(int i) {
			return getRuleContext(Notifier_paramsContext.class,i);
		}
		public Alter_notfifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_notfifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_notfifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_notfifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_notfifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_notfifier_statementContext alter_notfifier_statement() throws RecognitionException {
		Alter_notfifier_statementContext _localctx = new Alter_notfifier_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_notfifier_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1047);
			match(K_ALTER);
			setState(1048);
			match(K_NOTIFIER);
			setState(1049);
			notifier();
			setState(1053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_CHECK || _la==K_DISABLE || _la==K_ENABLE || ((((_la - 327)) & ~0x3f) == 0 && ((1L << (_la - 327)) & ((1L << (K_IDENTIFIED - 327)) | (1L << (K_MAXMEMORYSIZE - 327)) | (1L << (K_MAXPAYLOAD - 327)))) != 0) || _la==K_NO || _la==K_PARAMETERS) {
				{
				{
				setState(1050);
				notifier_params();
				}
				}
				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notifier_paramsContext extends ParserRuleContext {
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXPAYLOAD() { return getToken(VSqlParser.K_MAXPAYLOAD, 0); }
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public Notifier_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifier_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNotifier_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNotifier_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNotifier_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notifier_paramsContext notifier_params() throws RecognitionException {
		Notifier_paramsContext _localctx = new Notifier_paramsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_notifier_params);
		int _la;
		try {
			setState(1071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CHECK:
			case K_NO:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NO) {
					{
					setState(1056);
					match(K_NO);
					}
				}

				setState(1059);
				match(K_CHECK);
				setState(1060);
				match(K_COMMITTED);
				}
				}
				break;
			case K_DISABLE:
			case K_ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1061);
				enableOrDisable();
				}
				break;
			case K_IDENTIFIED:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1062);
				match(K_IDENTIFIED);
				setState(1063);
				match(K_BY);
				setState(1064);
				value();
				}
				}
				break;
			case K_MAXMEMORYSIZE:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1065);
				match(K_MAXMEMORYSIZE);
				setState(1066);
				value();
				}
				}
				break;
			case K_MAXPAYLOAD:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1067);
				match(K_MAXPAYLOAD);
				setState(1068);
				value();
				}
				}
				break;
			case K_PARAMETERS:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1069);
				match(K_PARAMETERS);
				setState(1070);
				value();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_projection_statementContext alter_projection_statement() throws RecognitionException {
		Alter_projection_statementContext _localctx = new Alter_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alter_projection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1073);
			match(K_ALTER);
			setState(1074);
			match(K_PROJECTION);
			setState(1075);
			projectionReference();
			setState(1076);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public List<Password_parameterContext> password_parameter() {
			return getRuleContexts(Password_parameterContext.class);
		}
		public Password_parameterContext password_parameter(int i) {
			return getRuleContext(Password_parameterContext.class,i);
		}
		public Alter_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_profile_statementContext alter_profile_statement() throws RecognitionException {
		Alter_profile_statementContext _localctx = new Alter_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1078);
			match(K_ALTER);
			setState(1079);
			match(K_PROFILE);
			setState(1080);
			profile();
			setState(1081);
			match(K_LIMIT);
			setState(1083); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1082);
				password_parameter();
				}
				}
				setState(1085); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_FAILED_LOGIN_ATTEMPTS || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (K_PASSWORD_GRACE_TIME - 432)) | (1L << (K_PASSWORD_LIFE_TIME - 432)) | (1L << (K_PASSWORD_LOCK_TIME - 432)) | (1L << (K_PASSWORD_MAX_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_DIGITS - 432)) | (1L << (K_PASSWORD_MIN_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 432)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_REUSE_MAX - 432)) | (1L << (K_PASSWORD_REUSE_TIME - 432)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_profile_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_profile_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_profile_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_profile_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_profile_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_profile_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_profile_rename_statementContext alter_profile_rename_statement() throws RecognitionException {
		Alter_profile_rename_statementContext _localctx = new Alter_profile_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_profile_rename_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1087);
			match(K_ALTER);
			setState(1088);
			match(K_PROFILE);
			setState(1089);
			profile();
			setState(1090);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public List<Resource_pool_paramContext> resource_pool_param() {
			return getRuleContexts(Resource_pool_paramContext.class);
		}
		public Resource_pool_paramContext resource_pool_param(int i) {
			return getRuleContext(Resource_pool_paramContext.class,i);
		}
		public Alter_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_pool_statementContext alter_resource_pool_statement() throws RecognitionException {
		Alter_resource_pool_statementContext _localctx = new Alter_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			match(K_ALTER);
			setState(1093);
			match(K_RESOURCE);
			setState(1094);
			match(K_POOL);
			setState(1095);
			resourcePool();
			setState(1097); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1096);
				resource_pool_param();
				}
				}
				setState(1099); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (K_CASCADE - 193)) | (1L << (K_CPUAFFINITYMODE - 193)) | (1L << (K_CPUAFFINITYSET - 193)))) != 0) || _la==K_EXECUTIONPARALLELISM || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & ((1L << (K_MAXCONCURRENCY - 371)) | (1L << (K_MAXMEMORYSIZE - 371)) | (1L << (K_MAXQUERYMEMORYSIZE - 371)) | (1L << (K_MEMORYSIZE - 371)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)))) != 0) || _la==K_SINGLEINITIATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resource_pool_paramContext extends ParserRuleContext {
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_CPUAFFINITYMODE() { return getToken(VSqlParser.K_CPUAFFINITYMODE, 0); }
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_EXCLUSIVE() { return getToken(VSqlParser.K_EXCLUSIVE, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public TerminalNode K_CPUAFFINITYSET() { return getToken(VSqlParser.K_CPUAFFINITYSET, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public TerminalNode MINUS() { return getToken(VSqlParser.MINUS, 0); }
		public TerminalNode K_EXECUTIONPARALLELISM() { return getToken(VSqlParser.K_EXECUTIONPARALLELISM, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_MAXCONCURRENCY() { return getToken(VSqlParser.K_MAXCONCURRENCY, 0); }
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXQUERYMEMORYSIZE() { return getToken(VSqlParser.K_MAXQUERYMEMORYSIZE, 0); }
		public TerminalNode K_MEMORYSIZE() { return getToken(VSqlParser.K_MEMORYSIZE, 0); }
		public TerminalNode K_PLANNEDCONCURRENCY() { return getToken(VSqlParser.K_PLANNEDCONCURRENCY, 0); }
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_HOLD() { return getToken(VSqlParser.K_HOLD, 0); }
		public TerminalNode K_QUEUETIMEOUT() { return getToken(VSqlParser.K_QUEUETIMEOUT, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_RUNTIMEPRIORITY() { return getToken(VSqlParser.K_RUNTIMEPRIORITY, 0); }
		public TerminalNode K_HIGH() { return getToken(VSqlParser.K_HIGH, 0); }
		public TerminalNode K_MEDIUM() { return getToken(VSqlParser.K_MEDIUM, 0); }
		public TerminalNode K_LOW() { return getToken(VSqlParser.K_LOW, 0); }
		public TerminalNode K_RUNTIMEPRIORITYTHRESHOLD() { return getToken(VSqlParser.K_RUNTIMEPRIORITYTHRESHOLD, 0); }
		public TerminalNode K_SINGLEINITIATOR() { return getToken(VSqlParser.K_SINGLEINITIATOR, 0); }
		public Resource_pool_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_pool_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterResource_pool_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitResource_pool_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitResource_pool_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Resource_pool_paramContext resource_pool_param() throws RecognitionException {
		Resource_pool_paramContext _localctx = new Resource_pool_paramContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_resource_pool_param);
		int _la;
		try {
			setState(1166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1101);
				match(K_CASCADE);
				setState(1102);
				match(K_TO);
				setState(1103);
				value();
				}
				}
				break;
			case K_CPUAFFINITYMODE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1104);
				match(K_CPUAFFINITYMODE);
				setState(1105);
				_la = _input.LA(1);
				if ( !(_la==K_ANY || _la==K_EXCLUSIVE || _la==K_SHARED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_CPUAFFINITYSET:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1106);
				match(K_CPUAFFINITYSET);
				setState(1117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					setState(1107);
					match(K_NONE);
					}
					break;
				case 2:
					{
					{
					setState(1108);
					value();
					setState(1109);
					match(COMMA);
					setState(1110);
					value();
					}
					}
					break;
				case 3:
					{
					{
					setState(1112);
					value();
					setState(1113);
					match(MINUS);
					setState(1114);
					value();
					}
					}
					break;
				case 4:
					{
					setState(1116);
					number();
					}
					break;
				}
				}
				}
				break;
			case K_EXECUTIONPARALLELISM:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1119);
				match(K_EXECUTIONPARALLELISM);
				setState(1122);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1120);
					number();
					}
					break;
				case K_AUTO:
					{
					setState(1121);
					match(K_AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXCONCURRENCY:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1124);
				match(K_MAXCONCURRENCY);
				setState(1127);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1125);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1126);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXMEMORYSIZE:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1129);
				match(K_MAXMEMORYSIZE);
				setState(1132);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1130);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1131);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXQUERYMEMORYSIZE:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1134);
				match(K_MAXQUERYMEMORYSIZE);
				setState(1137);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1135);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1136);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MEMORYSIZE:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1139);
				match(K_MEMORYSIZE);
				setState(1140);
				number();
				}
				}
				break;
			case K_PLANNEDCONCURRENCY:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1141);
				match(K_PLANNEDCONCURRENCY);
				setState(1144);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1142);
					number();
					}
					break;
				case K_AUTO:
					{
					setState(1143);
					match(K_AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_PRIORITY:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1146);
				match(K_PRIORITY);
				setState(1149);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(1147);
					integerNumber();
					}
					break;
				case K_HOLD:
					{
					setState(1148);
					match(K_HOLD);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_QUEUETIMEOUT:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1151);
				match(K_QUEUETIMEOUT);
				setState(1154);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1152);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1153);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_RUNTIMECAP:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1156);
				match(K_RUNTIMECAP);
				setState(1159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(1157);
					value();
					}
					break;
				case 2:
					{
					setState(1158);
					match(K_NONE);
					}
					break;
				}
				}
				}
				break;
			case K_RUNTIMEPRIORITY:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1161);
				match(K_RUNTIMEPRIORITY);
				setState(1162);
				_la = _input.LA(1);
				if ( !(((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (K_HIGH - 319)) | (1L << (K_LOW - 319)) | (1L << (K_MEDIUM - 319)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_RUNTIMEPRIORITYTHRESHOLD:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1163);
				match(K_RUNTIMEPRIORITYTHRESHOLD);
				setState(1164);
				number();
				}
				}
				break;
			case K_SINGLEINITIATOR:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1165);
				match(K_SINGLEINITIATOR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_role_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_role_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_role_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_role_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_role_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_role_rename_statementContext alter_role_rename_statement() throws RecognitionException {
		Alter_role_rename_statementContext _localctx = new Alter_role_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_role_rename_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1168);
			match(K_ALTER);
			setState(1169);
			match(K_ROLE);
			setState(1170);
			role();
			setState(1171);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Alter_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_statementContext alter_schema_statement() throws RecognitionException {
		Alter_schema_statementContext _localctx = new Alter_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1173);
			match(K_ALTER);
			setState(1174);
			match(K_SCHEMA);
			setState(1196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				{
				setState(1175);
				schemaReference();
				setState(1184);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(1176);
					match(K_DEFAULT);
					setState(1177);
					schema_privileges_clause();
					}
					}
					break;
				case K_OWNER:
					{
					{
					setState(1178);
					match(K_OWNER);
					setState(1179);
					match(K_TO);
					setState(1180);
					owner();
					setState(1182);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_CASCADE) {
						{
						setState(1181);
						match(K_CASCADE);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1186);
				schemaReference();
				setState(1191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1187);
					match(COMMA);
					setState(1188);
					schemaReference();
					}
					}
					setState(1193);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1194);
				rename_clause();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public Sequence_paramsContext sequence_params() {
			return getRuleContext(Sequence_paramsContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Alter_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequence_statementContext alter_sequence_statement() throws RecognitionException {
		Alter_sequence_statementContext _localctx = new Alter_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_sequence_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1198);
			match(K_ALTER);
			setState(1199);
			match(K_SEQUENCE);
			setState(1200);
			sequenceReference();
			{
			setState(1207);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case K_CACHE:
			case K_INCREMENT:
			case K_MAXVALUE:
			case K_MINVALUE:
			case K_NO:
			case K_RESTART:
			case SEMI:
				{
				setState(1201);
				sequence_params();
				}
				break;
			case K_OWNER:
			case K_RENAME:
			case K_SET:
				{
				setState(1205);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_RENAME:
					{
					setState(1202);
					rename_clause();
					}
					break;
				case K_SET:
					{
					setState(1203);
					set_schema_clause();
					}
					break;
				case K_OWNER:
					{
					setState(1204);
					owner_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_paramsContext extends ParserRuleContext {
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(VSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(VSqlParser.DECIMAL, i);
		}
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public Sequence_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequence_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequence_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequence_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_paramsContext sequence_params() throws RecognitionException {
		Sequence_paramsContext _localctx = new Sequence_paramsContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_sequence_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INCREMENT) {
				{
				setState(1209);
				match(K_INCREMENT);
				setState(1210);
				match(K_BY);
				setState(1211);
				match(DECIMAL);
				}
			}

			setState(1218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				{
				setState(1214);
				match(K_MINVALUE);
				setState(1215);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1216);
				match(K_NO);
				setState(1217);
				match(K_MINVALUE);
				}
				}
				break;
			}
			setState(1224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				{
				setState(1220);
				match(K_MAXVALUE);
				setState(1221);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1222);
				match(K_NO);
				setState(1223);
				match(K_MAXVALUE);
				}
				}
				break;
			}
			setState(1229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RESTART) {
				{
				setState(1226);
				match(K_RESTART);
				setState(1227);
				match(K_WITH);
				setState(1228);
				match(DECIMAL);
				}
			}

			setState(1241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CACHE:
				{
				{
				setState(1231);
				match(K_CACHE);
				setState(1232);
				match(DECIMAL);
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1233);
				match(K_NO);
				setState(1234);
				match(K_CACHE);
				}
				setState(1239);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CYCLE:
					{
					setState(1236);
					match(K_CYCLE);
					}
					break;
				case K_NO:
					{
					setState(1237);
					match(K_NO);
					setState(1238);
					match(K_CYCLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_session_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_UDPARAMETER() { return getToken(VSqlParser.K_UDPARAMETER, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public Alter_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_session_statementContext alter_session_statement() throws RecognitionException {
		Alter_session_statementContext _localctx = new Alter_session_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_session_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1243);
			match(K_ALTER);
			setState(1244);
			match(K_SESSION);
			setState(1269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				{
				setState(1245);
				match(K_SET);
				setState(1247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1246);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1249);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 2:
				{
				{
				setState(1250);
				match(K_CLEAR);
				setState(1252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1251);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1254);
				params();
				}
				}
				break;
			case 3:
				{
				{
				setState(1255);
				match(K_SET);
				setState(1256);
				match(K_UDPARAMETER);
				setState(1259);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					setState(1257);
					match(K_FOR);
					setState(1258);
					library();
					}
					break;
				}
				setState(1261);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 4:
				{
				{
				setState(1262);
				match(K_CLEAR);
				setState(1263);
				match(K_UDPARAMETER);
				setState(1266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1264);
					match(K_FOR);
					setState(1265);
					library();
					}
					break;
				}
				setState(1268);
				params();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_subnet_statementContext alter_subnet_statement() throws RecognitionException {
		Alter_subnet_statementContext _localctx = new Alter_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_subnet_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271);
			match(K_ALTER);
			setState(1272);
			match(K_SUBNET);
			setState(1273);
			subnet();
			setState(1274);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Alter_table_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_rename_statementContext alter_table_rename_statement() throws RecognitionException {
		Alter_table_rename_statementContext _localctx = new Alter_table_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_table_rename_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1276);
			match(K_ALTER);
			setState(1277);
			match(K_TABLE);
			setState(1278);
			tableReference();
			setState(1283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1279);
				match(COMMA);
				setState(1280);
				tableReference();
				}
				}
				setState(1285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1286);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_general_statmentContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<Alter_table_itemContext> alter_table_item() {
			return getRuleContexts(Alter_table_itemContext.class);
		}
		public Alter_table_itemContext alter_table_item(int i) {
			return getRuleContext(Alter_table_itemContext.class,i);
		}
		public Alter_table_general_statmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_general_statment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_general_statment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_general_statment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_general_statment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_general_statmentContext alter_table_general_statment() throws RecognitionException {
		Alter_table_general_statmentContext _localctx = new Alter_table_general_statmentContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_table_general_statment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1288);
			match(K_ALTER);
			setState(1289);
			match(K_TABLE);
			setState(1290);
			tableReference();
			setState(1291);
			alter_table_item();
			setState(1295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_ALL || _la==K_ADD || _la==K_ALTER || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (K_DROP - 259)) | (1L << (K_EXCLUDE - 259)) | (1L << (K_FORCE - 259)))) != 0) || _la==K_INCLUDE || _la==K_MATERIALIZE || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (K_OWNER - 423)) | (1L << (K_PARTITION - 423)) | (1L << (K_REMOVE - 423)) | (1L << (K_RENAME - 423)) | (1L << (K_REORGANIZE - 423)))) != 0) || _la==K_SET) {
				{
				{
				setState(1292);
				alter_table_item();
				}
				}
				setState(1297);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_itemContext extends ParserRuleContext {
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_DATATYPE() { return getToken(VSqlParser.K_DATATYPE, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public TerminalNode K_FORCE() { return getToken(VSqlParser.K_FORCE, 0); }
		public TerminalNode K_OUTER() { return getToken(VSqlParser.K_OUTER, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public TerminalNode K_REORGANIZE() { return getToken(VSqlParser.K_REORGANIZE, 0); }
		public TerminalNode K_REMOVE() { return getToken(VSqlParser.K_REMOVE, 0); }
		public TerminalNode K_PARTITIONING() { return getToken(VSqlParser.K_PARTITIONING, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public List<ColumnContext> column() {
			return getRuleContexts(ColumnContext.class);
		}
		public ColumnContext column(int i) {
			return getRuleContext(ColumnContext.class,i);
		}
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Alter_table_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_itemContext alter_table_item() throws RecognitionException {
		Alter_table_itemContext _localctx = new Alter_table_itemContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_table_item);
		int _la;
		try {
			setState(1418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1298);
				match(K_ADD);
				setState(1299);
				match(K_COLUMN);
				setState(1301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1300);
					ifNotExistsClause();
					}
					break;
				}
				setState(1303);
				columnReference();
				setState(1304);
				dataTypes();
				{
				setState(1314);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CONSTRAINT:
					{
					{
					setState(1305);
					match(K_CONSTRAINT);
					setState(1307);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						setState(1306);
						id();
						}
						break;
					}
					setState(1310);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NOT || _la==K_NULL) {
						{
						setState(1309);
						nullOrNotNull();
						}
					}

					}
					}
					break;
				case K_DEFAULT:
					{
					{
					setState(1312);
					match(K_DEFAULT);
					setState(1313);
					expression();
					}
					}
					break;
				case EOF:
				case K_ALL:
				case K_ADD:
				case K_ALTER:
				case K_DROP:
				case K_ENCODING:
				case K_EXCLUDE:
				case K_FORCE:
				case K_INCLUDE:
				case K_MATERIALIZE:
				case K_OWNER:
				case K_PARTITION:
				case K_PROJECTIONS:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_SET:
				case SEMI:
					break;
				default:
					break;
				}
				setState(1317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENCODING) {
					{
					setState(1316);
					encoding_clause();
					}
				}

				setState(1331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PROJECTIONS) {
					{
					setState(1319);
					match(K_PROJECTIONS);
					setState(1320);
					match(OPEN_PAREN);
					setState(1321);
					projectionReference();
					setState(1326);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1322);
						match(COMMA);
						setState(1323);
						projectionReference();
						}
						}
						setState(1328);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1329);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1333);
				match(K_ADD);
				setState(1334);
				table_constraint();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1335);
				match(K_ALTER);
				setState(1336);
				match(K_COLUMN);
				setState(1337);
				columnReference();
				setState(1362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					{
					setState(1338);
					match(K_SET);
					setState(1339);
					match(K_DEFAULT);
					setState(1340);
					expression();
					}
					}
					break;
				case 2:
					{
					{
					setState(1341);
					match(K_DROP);
					setState(1342);
					match(K_DEFAULT);
					}
					}
					break;
				case 3:
					{
					{
					setState(1343);
					match(K_SET);
					setState(1344);
					match(K_USING);
					setState(1345);
					expression();
					}
					}
					break;
				case 4:
					{
					{
					setState(1346);
					match(K_DROP);
					setState(1347);
					match(K_SET);
					setState(1348);
					match(K_USING);
					}
					}
					break;
				case 5:
					{
					{
					setState(1349);
					match(K_SET);
					setState(1350);
					match(K_DEFAULT);
					setState(1351);
					match(K_USING);
					setState(1352);
					expression();
					}
					}
					break;
				case 6:
					{
					{
					setState(1353);
					match(K_DROP);
					setState(1354);
					match(K_DEFAULT);
					setState(1355);
					match(K_USING);
					setState(1356);
					expression();
					}
					}
					break;
				case 7:
					{
					{
					setState(1357);
					match(K_SET);
					setState(1358);
					nullOrNotNull();
					}
					}
					break;
				case 8:
					{
					{
					setState(1359);
					match(K_SET);
					setState(1360);
					match(K_DATATYPE);
					setState(1361);
					dataTypes();
					}
					}
					break;
				}
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1364);
				match(K_ALTER);
				setState(1365);
				match(K_CONSTRAINT);
				setState(1366);
				constraint();
				setState(1367);
				enableOrDisable();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1369);
				match(K_DROP);
				setState(1370);
				match(K_CONSTRAINT);
				setState(1371);
				constraint();
				setState(1373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CASCADE || _la==K_RESTRICT) {
					{
					setState(1372);
					_la = _input.LA(1);
					if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1375);
				match(K_DROP);
				setState(1377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(1376);
					match(K_COLUMN);
					}
					break;
				}
				setState(1381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(1379);
					match(K_IF);
					setState(1380);
					match(K_EXISTS);
					}
					break;
				}
				setState(1383);
				columnReference();
				setState(1385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CASCADE || _la==K_RESTRICT) {
					{
					setState(1384);
					_la = _input.LA(1);
					if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1387);
				match(K_FORCE);
				setState(1388);
				match(K_OUTER);
				setState(1389);
				number();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1390);
				schema_privileges_clause();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1391);
				match(K_OWNER);
				setState(1392);
				match(K_TO);
				setState(1393);
				owner();
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1394);
				partition_clause();
				setState(1396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(1395);
					match(K_REORGANIZE);
					}
					break;
				}
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1398);
				match(K_REMOVE);
				setState(1399);
				match(K_PARTITIONING);
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1400);
				match(K_RENAME);
				setState(1402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1401);
					match(K_COLUMN);
					}
					break;
				}
				setState(1404);
				column();
				setState(1405);
				match(K_TO);
				setState(1406);
				column();
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1408);
				match(K_REORGANIZE);
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1409);
				match(K_SET);
				setState(1410);
				match(K_ACTIVEPARTITIONCOUNT);
				setState(1411);
				expression();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1412);
				match(K_SET);
				setState(1413);
				match(K_SCHEMA);
				setState(1414);
				schema();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				{
				setState(1415);
				match(K_SET);
				setState(1416);
				match(K_STORAGE);
				setState(1417);
				load_method();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public List<User_paramsContext> user_params() {
			return getRuleContexts(User_paramsContext.class);
		}
		public User_paramsContext user_params(int i) {
			return getRuleContext(User_paramsContext.class,i);
		}
		public Alter_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_statementContext alter_user_statement() throws RecognitionException {
		Alter_user_statementContext _localctx = new Alter_user_statementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1420);
			match(K_ALTER);
			setState(1421);
			match(K_USER);
			setState(1422);
			user();
			setState(1424); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1423);
				user_params();
				}
				}
				setState(1426); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_DEFAULT || _la==K_ACCOUNT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (K_GRACEPERIOD - 306)) | (1L << (K_IDENTIFIED - 306)) | (1L << (K_IDLESESSIONTIMEOUT - 306)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (K_MAXCONNECTIONS - 373)) | (1L << (K_MEMORYCAP - 373)) | (1L << (K_PASSWORD - 373)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_RESOURCE - 462)) | (1L << (K_RUNTIMECAP - 462)) | (1L << (K_SEARCH_PATH - 462)) | (1L << (K_SECURITY_ALGORITHM - 462)))) != 0) || _la==K_TEMPSPACECAP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_paramsContext extends ParserRuleContext {
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ACCOUNT() { return getToken(VSqlParser.K_ACCOUNT, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public TerminalNode K_MAXCONNECTIONS() { return getToken(VSqlParser.K_MAXCONNECTIONS, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public TerminalNode K_EXPIRE() { return getToken(VSqlParser.K_EXPIRE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_SECURITY_ALGORITHM() { return getToken(VSqlParser.K_SECURITY_ALGORITHM, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public TerminalNode K_LOCK() { return getToken(VSqlParser.K_LOCK, 0); }
		public TerminalNode K_UNLOCK() { return getToken(VSqlParser.K_UNLOCK, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<SchemaContext> schema() {
			return getRuleContexts(SchemaContext.class);
		}
		public SchemaContext schema(int i) {
			return getRuleContext(SchemaContext.class,i);
		}
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public User_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUser_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUser_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUser_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_paramsContext user_params() throws RecognitionException {
		User_paramsContext _localctx = new User_paramsContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_user_params);
		int _la;
		try {
			setState(1525);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1455);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(1428);
					match(K_DEFAULT);
					setState(1429);
					match(K_ROLE);
					setState(1450);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
					case 1:
						{
						setState(1430);
						match(K_NONE);
						}
						break;
					case 2:
						{
						setState(1431);
						role();
						setState(1436);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1432);
							match(COMMA);
							setState(1433);
							role();
							}
							}
							setState(1438);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case 3:
						{
						setState(1439);
						match(K_ALL);
						}
						break;
					case 4:
						{
						{
						setState(1440);
						match(K_ALL);
						setState(1441);
						match(K_EXCEPT);
						setState(1442);
						role();
						setState(1447);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1443);
							match(COMMA);
							setState(1444);
							role();
							}
							}
							setState(1449);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					}
					}
					}
					break;
				case K_RENAME:
					{
					{
					setState(1452);
					match(K_RENAME);
					setState(1453);
					match(K_TO);
					setState(1454);
					value();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_ACCOUNT:
			case K_GRACEPERIOD:
			case K_IDENTIFIED:
			case K_IDLESESSIONTIMEOUT:
			case K_MAXCONNECTIONS:
			case K_MEMORYCAP:
			case K_PASSWORD:
			case K_PROFILE:
			case K_RESOURCE:
			case K_RUNTIMECAP:
			case K_SEARCH_PATH:
			case K_SECURITY_ALGORITHM:
			case K_TEMPSPACECAP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1523);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ACCOUNT:
					{
					{
					setState(1457);
					match(K_ACCOUNT);
					setState(1458);
					_la = _input.LA(1);
					if ( !(_la==K_LOCK || _la==K_UNLOCK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				case K_GRACEPERIOD:
					{
					{
					setState(1459);
					match(K_GRACEPERIOD);
					setState(1462);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
					case 1:
						{
						setState(1460);
						match(K_NONE);
						}
						break;
					case 2:
						{
						setState(1461);
						value();
						}
						break;
					}
					}
					}
					break;
				case K_IDENTIFIED:
					{
					{
					setState(1464);
					match(K_IDENTIFIED);
					setState(1465);
					match(K_BY);
					setState(1466);
					string();
					setState(1469);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_REPLACE) {
						{
						setState(1467);
						match(K_REPLACE);
						setState(1468);
						string();
						}
					}

					}
					}
					break;
				case K_IDLESESSIONTIMEOUT:
					{
					{
					setState(1471);
					match(K_IDLESESSIONTIMEOUT);
					setState(1474);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
					case 1:
						{
						setState(1472);
						match(K_NONE);
						}
						break;
					case 2:
						{
						setState(1473);
						value();
						}
						break;
					}
					}
					}
					break;
				case K_MAXCONNECTIONS:
					{
					{
					setState(1476);
					match(K_MAXCONNECTIONS);
					setState(1482);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1477);
						match(K_NONE);
						}
						break;
					case FLOAT:
					case REAL:
					case DECIMAL:
						{
						{
						setState(1478);
						number();
						setState(1479);
						match(K_ON);
						setState(1480);
						_la = _input.LA(1);
						if ( !(_la==K_DATABASE || _la==K_NODE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_MEMORYCAP:
					{
					{
					setState(1484);
					match(K_MEMORYCAP);
					setState(1487);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1485);
						match(K_NONE);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1486);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_PASSWORD:
					{
					{
					setState(1489);
					match(K_PASSWORD);
					setState(1490);
					match(K_EXPIRE);
					}
					}
					break;
				case K_PROFILE:
					{
					{
					setState(1491);
					match(K_PROFILE);
					setState(1494);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_DEFAULT:
						{
						setState(1492);
						match(K_DEFAULT);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1493);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_RESOURCE:
					{
					{
					setState(1496);
					match(K_RESOURCE);
					setState(1497);
					match(K_POOL);
					setState(1498);
					string();
					}
					}
					break;
				case K_RUNTIMECAP:
					{
					{
					setState(1499);
					match(K_RUNTIMECAP);
					setState(1502);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1500);
						match(K_NONE);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1501);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_SEARCH_PATH:
					{
					{
					setState(1504);
					match(K_SEARCH_PATH);
					setState(1514);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						setState(1505);
						match(K_DEFAULT);
						}
						break;
					case 2:
						{
						{
						setState(1506);
						schema();
						setState(1511);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1507);
							match(COMMA);
							setState(1508);
							schema();
							}
							}
							setState(1513);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					}
					}
					}
					break;
				case K_SECURITY_ALGORITHM:
					{
					{
					setState(1516);
					match(K_SECURITY_ALGORITHM);
					setState(1517);
					string();
					}
					}
					break;
				case K_TEMPSPACECAP:
					{
					{
					setState(1518);
					match(K_TEMPSPACECAP);
					setState(1521);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
					case 1:
						{
						setState(1519);
						match(K_NONE);
						}
						break;
					case 2:
						{
						setState(1520);
						value();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_view_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public List<ViewReferenceContext> viewReference() {
			return getRuleContexts(ViewReferenceContext.class);
		}
		public ViewReferenceContext viewReference(int i) {
			return getRuleContext(ViewReferenceContext.class,i);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Alter_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_view_statementContext alter_view_statement() throws RecognitionException {
		Alter_view_statementContext _localctx = new Alter_view_statementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_view_statement);
		int _la;
		try {
			setState(1549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1527);
				match(K_ALTER);
				setState(1528);
				match(K_VIEW);
				setState(1529);
				viewReference();
				setState(1537);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_OWNER:
					{
					{
					setState(1530);
					match(K_OWNER);
					setState(1531);
					match(K_TO);
					setState(1532);
					owner();
					}
					}
					break;
				case K_SET:
					{
					{
					setState(1533);
					match(K_SET);
					setState(1534);
					match(K_SCHEMA);
					setState(1535);
					schema();
					}
					}
					break;
				case K_ALL:
				case K_EXCLUDE:
				case K_INCLUDE:
				case K_MATERIALIZE:
					{
					setState(1536);
					schema_privileges_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_RENAME:
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1539);
					match(COMMA);
					setState(1540);
					viewReference();
					}
					}
					setState(1545);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1546);
				match(K_RENAME);
				setState(1547);
				match(K_TO);
				setState(1548);
				values();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Todo_statementContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Todo_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTodo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTodo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTodo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_statementContext todo_statement() throws RecognitionException {
		Todo_statementContext _localctx = new Todo_statementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_todo_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1552); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1551);
				id();
				}
				}
				setState(1554); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_ALL) | (1L << K_AND) | (1L << K_ANY) | (1L << K_ARRAY) | (1L << K_AS) | (1L << K_ASC) | (1L << K_AUTHORIZATION) | (1L << K_BETWEEN) | (1L << K_BIGINT) | (1L << K_BINARY) | (1L << K_BIT) | (1L << K_BOOLEAN) | (1L << K_BOTH) | (1L << K_CASE) | (1L << K_CAST) | (1L << K_CHAR) | (1L << K_CHAR_LENGTH) | (1L << K_CHARACTER_LENGTH) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_CONSTRAINT) | (1L << K_CORRELATION) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATABASE) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_SCHEMA) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_CURRENT_USER) | (1L << K_DATEDIFF) | (1L << K_DATETIME) | (1L << K_DECIMAL) | (1L << K_DECODE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DESC) | (1L << K_DISTINCT) | (1L << K_ELSE) | (1L << K_ENCODED) | (1L << K_END) | (1L << K_EXCEPT) | (1L << K_EXISTS) | (1L << K_EXTRACT) | (1L << K_FALSE) | (1L << K_FLOAT) | (1L << K_FOR) | (1L << K_FOREIGN) | (1L << K_FROM) | (1L << K_FULL) | (1L << K_GRANT) | (1L << K_GROUP) | (1L << K_HAVING) | (1L << K_ILIKE) | (1L << K_ILIKEB) | (1L << K_IN) | (1L << K_INITIALLY) | (1L << K_INNER) | (1L << K_INOUT) | (1L << K_INT) | (1L << K_INTEGER) | (1L << K_INTERSECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_INTERVAL - 64)) | (1L << (K_INTERVALYM - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KSAFE - 64)) | (1L << (K_LEADING - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIKEB - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_LOCALTIME - 64)) | (1L << (K_LOCALTIMESTAMP - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_MINUS - 64)) | (1L << (K_MONEY - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NCHAR - 64)) | (1L << (K_NEW - 64)) | (1L << (K_NONE - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_NULLSEQUAL - 64)) | (1L << (K_NUMBER - 64)) | (1L << (K_NUMERIC - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_OLD - 64)) | (1L << (K_ON - 64)) | (1L << (K_ONLY - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUT - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_OVER - 64)) | (1L << (K_OVERLAPS - 64)) | (1L << (K_OVERLAY - 64)) | (1L << (K_PINNED - 64)) | (1L << (K_POSITION - 64)) | (1L << (K_PRECISION - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_REAL - 64)) | (1L << (K_REFERENCES - 64)) | (1L << (K_RIGHT - 64)) | (1L << (K_ROW - 64)) | (1L << (K_SCHEMA - 64)) | (1L << (K_SELECT - 64)) | (1L << (K_SESSION_USER - 64)) | (1L << (K_SIMILAR - 64)) | (1L << (K_SMALLDATETIME - 64)) | (1L << (K_SMALLINT - 64)) | (1L << (K_SOME - 64)) | (1L << (K_SUBSTRING - 64)) | (1L << (K_SYSDATE - 64)) | (1L << (K_TABLE - 64)) | (1L << (K_TEXT - 64)) | (1L << (K_THEN - 64)) | (1L << (K_TIME - 64)) | (1L << (K_TIMESERIES - 64)) | (1L << (K_TIMESTAMP - 64)) | (1L << (K_TIMESTAMPADD - 64)) | (1L << (K_TIMESTAMPDIFF - 64)) | (1L << (K_TIMESTAMPTZ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_TIMETZ - 128)) | (1L << (K_TIMEZONE - 128)) | (1L << (K_TINYINT - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRAILING - 128)) | (1L << (K_TREAT - 128)) | (1L << (K_TRIM - 128)) | (1L << (K_TRUE - 128)) | (1L << (K_UNBOUNDED - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_USER - 128)) | (1L << (K_USING - 128)) | (1L << (K_UUID - 128)) | (1L << (K_VARBINARY - 128)) | (1L << (K_VARCHAR - 128)) | (1L << (K_VARCHAR2 - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (K_WINDOW - 128)) | (1L << (K_WITH - 128)) | (1L << (K_WITHIN - 128)) | (1L << (K_ABORT - 128)) | (1L << (K_ABSOLUTE - 128)) | (1L << (K_ACCESS - 128)) | (1L << (K_ACCESSRANK - 128)) | (1L << (K_ACCOUNT - 128)) | (1L << (K_ACTION - 128)) | (1L << (K_ACTIVATE - 128)) | (1L << (K_ACTIVEPARTITIONCOUNT - 128)) | (1L << (K_ADD - 128)) | (1L << (K_ADMIN - 128)) | (1L << (K_AFTER - 128)) | (1L << (K_AGGREGATE - 128)) | (1L << (K_ALSO - 128)) | (1L << (K_ALTER - 128)) | (1L << (K_ANALYSE - 128)) | (1L << (K_ANALYTIC - 128)) | (1L << (K_ANALYZE - 128)) | (1L << (K_ANNOTATED - 128)) | (1L << (K_ANTI - 128)) | (1L << (K_ASSERTION - 128)) | (1L << (K_ASSIGNMENT - 128)) | (1L << (K_AT - 128)) | (1L << (K_AUTHENTICATION - 128)) | (1L << (K_AUTO - 128)) | (1L << (K_AUTO_INCREMENT - 128)) | (1L << (K_AVAILABLE - 128)) | (1L << (K_BACKWARD - 128)) | (1L << (K_BASENAME - 128)) | (1L << (K_BATCH - 128)) | (1L << (K_BEFORE - 128)) | (1L << (K_BEGIN - 128)) | (1L << (K_BEST - 128)) | (1L << (K_BLOCK - 128)) | (1L << (K_BLOCK_DICT - 128)) | (1L << (K_BLOCKDICT_COMP - 128)) | (1L << (K_BROADCAST - 128)) | (1L << (K_BY - 128)) | (1L << (K_BYTEA - 128)) | (1L << (K_BYTES - 128)) | (1L << (K_BZIP - 128)) | (1L << (K_BZIP_COMP - 128)) | (1L << (K_CACHE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (K_CALLED - 192)) | (1L << (K_CASCADE - 192)) | (1L << (K_CATALOGPATH - 192)) | (1L << (K_CHAIN - 192)) | (1L << (K_CHARACTER - 192)) | (1L << (K_CHARACTERISTICS - 192)) | (1L << (K_CHARACTERS - 192)) | (1L << (K_CHECKPOINT - 192)) | (1L << (K_CLASS - 192)) | (1L << (K_CLEAR - 192)) | (1L << (K_CLOSE - 192)) | (1L << (K_CLUSTER - 192)) | (1L << (K_COLSIZES - 192)) | (1L << (K_COLUMNS_COUNT - 192)) | (1L << (K_COMMENT - 192)) | (1L << (K_COMMIT - 192)) | (1L << (K_COMMITTED - 192)) | (1L << (K_COMMONDELTA_COMP - 192)) | (1L << (K_COMMUNAL - 192)) | (1L << (K_COMPLEX - 192)) | (1L << (K_CONNECT - 192)) | (1L << (K_CONSTRAINTS - 192)) | (1L << (K_CONTROL - 192)) | (1L << (K_COPY - 192)) | (1L << (K_CPUAFFINITYMODE - 192)) | (1L << (K_CPUAFFINITYSET - 192)) | (1L << (K_CREATEDB - 192)) | (1L << (K_CREATEUSER - 192)) | (1L << (K_CSV - 192)) | (1L << (K_CUBE - 192)) | (1L << (K_CURRENT - 192)) | (1L << (K_CURSOR - 192)) | (1L << (K_CUSTOM - 192)) | (1L << (K_CUSTOM_PARTITIONS - 192)) | (1L << (K_CYCLE - 192)) | (1L << (K_DATA - 192)) | (1L << (K_DATABASE - 192)) | (1L << (K_DATAPATH - 192)) | (1L << (K_DAY - 192)) | (1L << (K_DEACTIVATE - 192)) | (1L << (K_DEALLOCATE - 192)) | (1L << (K_DEC - 192)) | (1L << (K_DECLARE - 192)) | (1L << (K_DEFAULTS - 192)) | (1L << (K_DEFERRED - 192)) | (1L << (K_DEFINE - 192)) | (1L << (K_DEFINER - 192)) | (1L << (K_DELETE - 192)) | (1L << (K_DELIMITER - 192)) | (1L << (K_DELIMITERS - 192)) | (1L << (K_DELTARANGE_COMP - 192)) | (1L << (K_DELTARANGE_COMP_SP - 192)) | (1L << (K_DELTAVAL - 192)) | (1L << (K_DEPENDS - 192)) | (1L << (K_DETERMINES - 192)) | (1L << (K_DIRECT - 192)) | (1L << (K_DIRECTCOLS - 192)) | (1L << (K_DIRECTED - 192)) | (1L << (K_DIRECTGROUPED - 192)) | (1L << (K_DIRECTPROJ - 192)) | (1L << (K_DISABLE - 192)) | (1L << (K_DISABLED - 192)) | (1L << (K_DISCONNECT - 192)) | (1L << (K_DISTVALINDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (K_DO - 256)) | (1L << (K_DOMAIN - 256)) | (1L << (K_DOUBLE - 256)) | (1L << (K_DROP - 256)) | (1L << (K_DURABLE - 256)) | (1L << (K_EACH - 256)) | (1L << (K_ENABLE - 256)) | (1L << (K_ENABLED - 256)) | (1L << (K_ENCLOSED - 256)) | (1L << (K_ENCODING - 256)) | (1L << (K_ENCRYPTED - 256)) | (1L << (K_ENFORCELENGTH - 256)) | (1L << (K_EPHEMERAL - 256)) | (1L << (K_EPOCH - 256)) | (1L << (K_ERROR - 256)) | (1L << (K_ESCAPE - 256)) | (1L << (K_EVENT - 256)) | (1L << (K_EVENTS - 256)) | (1L << (K_EXCEPTION - 256)) | (1L << (K_EXCEPTIONS - 256)) | (1L << (K_EXCLUDE - 256)) | (1L << (K_EXCLUDING - 256)) | (1L << (K_EXCLUSIVE - 256)) | (1L << (K_EXECUTE - 256)) | (1L << (K_EXECUTIONPARALLELISM - 256)) | (1L << (K_EXPIRE - 256)) | (1L << (K_EXPLAIN - 256)) | (1L << (K_EXPORT - 256)) | (1L << (K_EXTERNAL - 256)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 256)) | (1L << (K_FAULT - 256)) | (1L << (K_FENCED - 256)) | (1L << (K_FETCH - 256)) | (1L << (K_FILESYSTEM - 256)) | (1L << (K_FILLER - 256)) | (1L << (K_FILTER - 256)) | (1L << (K_FIRST - 256)) | (1L << (K_FIXEDWIDTH - 256)) | (1L << (K_FLEX - 256)) | (1L << (K_FLEXIBLE - 256)) | (1L << (K_FOLLOWING - 256)) | (1L << (K_FORCE - 256)) | (1L << (K_FORMAT - 256)) | (1L << (K_FORWARD - 256)) | (1L << (K_FREEZE - 256)) | (1L << (K_FUNCTION - 256)) | (1L << (K_FUNCTIONS - 256)) | (1L << (K_GCDDELTA - 256)) | (1L << (K_GET - 256)) | (1L << (K_GLOBAL - 256)) | (1L << (K_GRACEPERIOD - 256)) | (1L << (K_GROUPED - 256)) | (1L << (K_GROUPING - 256)) | (1L << (K_GZIP - 256)) | (1L << (K_GZIP_COMP - 256)) | (1L << (K_HANDLER - 256)) | (1L << (K_HCATALOG - 256)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 256)) | (1L << (K_HCATALOG_DB - 256)) | (1L << (K_HCATALOG_SCHEMA - 256)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 256)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 256)) | (1L << (K_HCATALOG_USER - 256)) | (1L << (K_HIGH - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (K_HIVE_PARTITION_COLS - 320)) | (1L << (K_HIVESERVER2_HOSTNAME - 320)) | (1L << (K_HOLD - 320)) | (1L << (K_HOST - 320)) | (1L << (K_HOSTNAME - 320)) | (1L << (K_HOUR - 320)) | (1L << (K_HOURS - 320)) | (1L << (K_IDENTIFIED - 320)) | (1L << (K_IDENTITY - 320)) | (1L << (K_IDLESESSIONTIMEOUT - 320)) | (1L << (K_IF - 320)) | (1L << (K_IGNORE - 320)) | (1L << (K_IMMEDIATE - 320)) | (1L << (K_IMMUTABLE - 320)) | (1L << (K_IMPLICIT - 320)) | (1L << (K_INCLUDE - 320)) | (1L << (K_INCLUDING - 320)) | (1L << (K_INCREMENT - 320)) | (1L << (K_INDEX - 320)) | (1L << (K_INHERITS - 320)) | (1L << (K_INPUT - 320)) | (1L << (K_INSENSITIVE - 320)) | (1L << (K_INSERT - 320)) | (1L << (K_INSTEAD - 320)) | (1L << (K_INTERFACE - 320)) | (1L << (K_INTERPOLATE - 320)) | (1L << (K_INVOKER - 320)) | (1L << (K_ISOLATION - 320)) | (1L << (K_JSON - 320)) | (1L << (K_KEY - 320)) | (1L << (K_LABEL - 320)) | (1L << (K_LANCOMPILER - 320)) | (1L << (K_LANGUAGE - 320)) | (1L << (K_LARGE - 320)) | (1L << (K_LAST - 320)) | (1L << (K_LATEST - 320)) | (1L << (K_LESS - 320)) | (1L << (K_LEVEL - 320)) | (1L << (K_LIBRARY - 320)) | (1L << (K_LISTEN - 320)) | (1L << (K_LOAD - 320)) | (1L << (K_LOCAL - 320)) | (1L << (K_LOCATION - 320)) | (1L << (K_LOCK - 320)) | (1L << (K_LONG - 320)) | (1L << (K_LOW - 320)) | (1L << (K_LZO - 320)) | (1L << (K_MANAGED - 320)) | (1L << (K_MASK - 320)) | (1L << (K_MATCHED - 320)) | (1L << (K_MATERIALIZE - 320)) | (1L << (K_MAXCONCURRENCY - 320)) | (1L << (K_MAXCONCURRENCYGRACE - 320)) | (1L << (K_MAXCONNECTIONS - 320)) | (1L << (K_MAXMEMORYSIZE - 320)) | (1L << (K_MAXPAYLOAD - 320)) | (1L << (K_MAXQUERYMEMORYSIZE - 320)) | (1L << (K_MAXVALUE - 320)) | (1L << (K_MEDIUM - 320)) | (1L << (K_MEMORYCAP - 320)) | (1L << (K_MEMORYSIZE - 320)) | (1L << (K_MERGE - 320)) | (1L << (K_MERGEOUT - 320)) | (1L << (K_METHOD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (K_MICROSECONDS - 384)) | (1L << (K_MILLISECONDS - 384)) | (1L << (K_MINUTE - 384)) | (1L << (K_MINUTES - 384)) | (1L << (K_MINVALUE - 384)) | (1L << (K_MODE - 384)) | (1L << (K_MODEL - 384)) | (1L << (K_MONTH - 384)) | (1L << (K_MOVE - 384)) | (1L << (K_MOVEOUT - 384)) | (1L << (K_NAME - 384)) | (1L << (K_NATIONAL - 384)) | (1L << (K_NATIVE - 384)) | (1L << (K_NETWORK - 384)) | (1L << (K_NEXT - 384)) | (1L << (K_NO - 384)) | (1L << (K_NOCREATEDB - 384)) | (1L << (K_NOCREATEUSER - 384)) | (1L << (K_NODE - 384)) | (1L << (K_NODES - 384)) | (1L << (K_NOTHING - 384)) | (1L << (K_NOTIFIER - 384)) | (1L << (K_NOTIFY - 384)) | (1L << (K_NOWAIT - 384)) | (1L << (K_NULLAWARE - 384)) | (1L << (K_NULLCOLS - 384)) | (1L << (K_NULLS - 384)) | (1L << (K_OBJECT - 384)) | (1L << (K_OCTETS - 384)) | (1L << (K_OF - 384)) | (1L << (K_OFF - 384)) | (1L << (K_OIDS - 384)) | (1L << (K_OPERATOR - 384)) | (1L << (K_OPT - 384)) | (1L << (K_OPTIMIZER - 384)) | (1L << (K_OPTION - 384)) | (1L << (K_OPTVER - 384)) | (1L << (K_ORC - 384)) | (1L << (K_OTHERS - 384)) | (1L << (K_OWNER - 384)) | (1L << (K_PARAMETER - 384)) | (1L << (K_PARAMETERS - 384)) | (1L << (K_PARQUET - 384)) | (1L << (K_PARSER - 384)) | (1L << (K_PARTIAL - 384)) | (1L << (K_PARTITION - 384)) | (1L << (K_PARTITIONING - 384)) | (1L << (K_PASSWORD - 384)) | (1L << (K_PASSWORD_GRACE_TIME - 384)) | (1L << (K_PASSWORD_LIFE_TIME - 384)) | (1L << (K_PASSWORD_LOCK_TIME - 384)) | (1L << (K_PASSWORD_MAX_LENGTH - 384)) | (1L << (K_PASSWORD_MIN_DIGITS - 384)) | (1L << (K_PASSWORD_MIN_LENGTH - 384)) | (1L << (K_PASSWORD_MIN_LETTERS - 384)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 384)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 384)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 384)) | (1L << (K_PASSWORD_REUSE_MAX - 384)) | (1L << (K_PASSWORD_REUSE_TIME - 384)) | (1L << (K_PATTERN - 384)) | (1L << (K_PERCENT - 384)) | (1L << (K_PERMANENT - 384)) | (1L << (K_PLACING - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_POLICY - 448)) | (1L << (K_POOL - 448)) | (1L << (K_PORT - 448)) | (1L << (K_PRECEDING - 448)) | (1L << (K_PREPARE - 448)) | (1L << (K_PREPASS - 448)) | (1L << (K_PRESERVE - 448)) | (1L << (K_PREVIOUS - 448)) | (1L << (K_PRIOR - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_PRIVILEGES - 448)) | (1L << (K_PROCEDURAL - 448)) | (1L << (K_PROCEDURE - 448)) | (1L << (K_PROFILE - 448)) | (1L << (K_PROJECTION - 448)) | (1L << (K_PROJECTIONS - 448)) | (1L << (K_PSDATE - 448)) | (1L << (K_QUERY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_QUOTE - 448)) | (1L << (K_RANGE - 448)) | (1L << (K_RAW - 448)) | (1L << (K_READ - 448)) | (1L << (K_RECHECK - 448)) | (1L << (K_RECORD - 448)) | (1L << (K_RECOVER - 448)) | (1L << (K_RECURSIVE - 448)) | (1L << (K_REFRESH - 448)) | (1L << (K_REINDEX - 448)) | (1L << (K_REJECTED - 448)) | (1L << (K_REJECTMAX - 448)) | (1L << (K_RELATIVE - 448)) | (1L << (K_RELEASE - 448)) | (1L << (K_REMOVE - 448)) | (1L << (K_RENAME - 448)) | (1L << (K_REORGANIZE - 448)) | (1L << (K_REPEATABLE - 448)) | (1L << (K_REPLACE - 448)) | (1L << (K_RESET - 448)) | (1L << (K_RESOURCE - 448)) | (1L << (K_RESTART - 448)) | (1L << (K_RESTRICT - 448)) | (1L << (K_RESULTS - 448)) | (1L << (K_RETURN - 448)) | (1L << (K_RETURNREJECTED - 448)) | (1L << (K_REVOKE - 448)) | (1L << (K_RLE - 448)) | (1L << (K_ROLE - 448)) | (1L << (K_ROLES - 448)) | (1L << (K_ROLLBACK - 448)) | (1L << (K_ROLLUP - 448)) | (1L << (K_ROWS - 448)) | (1L << (K_RULE - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)) | (1L << (K_SAVE - 448)) | (1L << (K_SAVEPOINT - 448)) | (1L << (K_SCROLL - 448)) | (1L << (K_SEARCH_PATH - 448)) | (1L << (K_SECOND - 448)) | (1L << (K_SECONDS - 448)) | (1L << (K_SECURITY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (K_SECURITY_ALGORITHM - 512)) | (1L << (K_SEGMENTED - 512)) | (1L << (K_SEMI - 512)) | (1L << (K_SEMIALL - 512)) | (1L << (K_SEQUENCE - 512)) | (1L << (K_SEQUENCES - 512)) | (1L << (K_SERIALIZABLE - 512)) | (1L << (K_SESSION - 512)) | (1L << (K_SET - 512)) | (1L << (K_SETOF - 512)) | (1L << (K_SETS - 512)) | (1L << (K_SHARE - 512)) | (1L << (K_SHARED - 512)) | (1L << (K_SHOW - 512)) | (1L << (K_SIMPLE - 512)) | (1L << (K_SINGLEINITIATOR - 512)) | (1L << (K_SITE - 512)) | (1L << (K_SITES - 512)) | (1L << (K_SKIP - 512)) | (1L << (K_SOURCE - 512)) | (1L << (K_SPLIT - 512)) | (1L << (K_SSL_CONFIG - 512)) | (1L << (K_STABLE - 512)) | (1L << (K_STANDBY - 512)) | (1L << (K_START - 512)) | (1L << (K_STATEMENT - 512)) | (1L << (K_STATISTICS - 512)) | (1L << (K_STDIN - 512)) | (1L << (K_STDOUT - 512)) | (1L << (K_STEMMER - 512)) | (1L << (K_STORAGE - 512)) | (1L << (K_STREAM - 512)) | (1L << (K_STRENGTH - 512)) | (1L << (K_STRICT - 512)) | (1L << (K_SUBNET - 512)) | (1L << (K_SYSID - 512)) | (1L << (K_SYSTEM - 512)) | (1L << (K_TABLES - 512)) | (1L << (K_TABLESAMPLE - 512)) | (1L << (K_TABLESPACE - 512)) | (1L << (K_TEMP - 512)) | (1L << (K_TEMPLATE - 512)) | (1L << (K_TEMPORARY - 512)) | (1L << (K_TEMPSPACECAP - 512)) | (1L << (K_TERMINATOR - 512)) | (1L << (K_THAN - 512)) | (1L << (K_TIES - 512)) | (1L << (K_TLS - 512)) | (1L << (K_TOAST - 512)) | (1L << (K_TOKENIZER - 512)) | (1L << (K_TOLERANCE - 512)) | (1L << (K_TRANSACTION - 512)) | (1L << (K_TRANSFORM - 512)) | (1L << (K_TRICKLE - 512)) | (1L << (K_TRIGGER - 512)) | (1L << (K_TRUNCATE - 512)) | (1L << (K_TRUSTED - 512)) | (1L << (K_TUNING - 512)) | (1L << (K_TYPE - 512)) | (1L << (K_UDPARAMETER - 512)) | (1L << (K_UNCOMMITTED - 512)) | (1L << (K_UNCOMPRESSED - 512)) | (1L << (K_UNI - 512)) | (1L << (K_UNINDEXED - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (K_UNKNOWN - 576)) | (1L << (K_UNLIMITED - 576)) | (1L << (K_UNLISTEN - 576)) | (1L << (K_UNLOCK - 576)) | (1L << (K_UNPACKER - 576)) | (1L << (K_UNSEGMENTED - 576)) | (1L << (K_UPDATE - 576)) | (1L << (K_USAGE - 576)) | (1L << (K_VACUUM - 576)) | (1L << (K_VALIDATE - 576)) | (1L << (K_VALIDATOR - 576)) | (1L << (K_VALINDEX - 576)) | (1L << (K_VALUE - 576)) | (1L << (K_VALUES - 576)) | (1L << (K_VARYING - 576)) | (1L << (K_VERBOSE - 576)) | (1L << (K_VERTICA - 576)) | (1L << (K_VIEW - 576)) | (1L << (K_VOLATILE - 576)) | (1L << (K_WAIT - 576)) | (1L << (K_WEBHDFS_ADDRESS - 576)) | (1L << (K_WEBSERVICE_HOSTNAME - 576)) | (1L << (K_WEBSERVICE_PORT - 576)) | (1L << (K_WITHOUT - 576)) | (1L << (K_WORK - 576)) | (1L << (K_WRITE - 576)) | (1L << (K_YEAR - 576)) | (1L << (K_ZONE - 576)) | (1L << (K_UDPARAMETERS - 576)) | (1L << (K_ALLNODES - 576)) | (1L << (K_PUBLIC - 576)) | (1L << (K_DIRECTORY - 576)) | (1L << (K_ROWGROUPSIZEMB - 576)) | (1L << (K_COMPRESSION - 576)) | (1L << (K_FILESIZEMB - 576)) | (1L << (K_FILEMODE - 576)) | (1L << (K_DIRMODE - 576)) | (1L << (K_ZSTD - 576)) | (1L << (K_ROUTE - 576)) | (1L << (K_ROUTING - 576)) | (1L << (K_ESCAPE_STRING_WARNING - 576)) | (1L << (K_STANDARD_CONFORMING_STRINGS - 576)) | (1L << (K_AUTOCOMMIT - 576)) | (1L << (K_LOCALE - 576)) | (1L << (K_MULTIPLEACTIVERESULTSETS - 576)) | (1L << (K_RESOURCE_POOL - 576)) | (1L << (K_INTERVALSTYLE - 576)) | (1L << (K_PLAIN - 576)) | (1L << (K_UNITS - 576)) | (1L << (K_DATESTYLE - 576)) | (1L << (K_ISO - 576)) | (1L << (K_MDY - 576)) | (1L << (K_POSTGRES - 576)) | (1L << (K_SQL - 576)) | (1L << (K_GERMAN - 576)) | (1L << (K_DMY - 576)) | (1L << (K_TLSMODE - 576)) | (1L << (K_PREFER - 576)) | (1L << (K_INT8 - 576)) | (1L << (K_FLOAT8 - 576)) | (1L << (K_GEOMETRY - 576)) | (1L << (K_GEOGRAPHY - 576)) | (1L << (K_DATE - 576)) | (1L << (K_ADDRESS - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (K_BALANCE - 640)) | (1L << (K_GBYTYPE - 640)) | (1L << (K_HASH - 640)) | (1L << (K_PIPE - 640)) | (1L << (K_SYN_JOIN - 640)) | (1L << (K_ENABLE_WITH_CLAUSE_MATERIALIZATION - 640)) | (1L << (K_EARLY_MATERIALIZATION - 640)) | (1L << (K_SYNTACTIC_JOIN - 640)) | (1L << (K_BRANCH - 640)) | (1L << (K_DATATYPE - 640)) | (1L << (K_VERBATIM - 640)) | (1L << (K_IGNORECONST - 640)) | (1L << (K_UTYPE - 640)) | (1L << (K_JTYPE - 640)) | (1L << (K_DISTRIB - 640)) | (1L << (K_PROJS - 640)) | (1L << (K_SKIP_PROJS - 640)) | (1L << (COMMA - 640)) | (1L << (MINUS - 640)) | (1L << (STAR - 640)) | (1L << (PLUS - 640)) | (1L << (DCOLON - 640)) | (1L << (OPEN_PAREN - 640)) | (1L << (CLOSE_PAREN - 640)) | (1L << (DOT - 640)) | (1L << (UNDERSCORE - 640)) | (1L << (AMP - 640)) | (1L << (AMP_AMP - 640)) | (1L << (AMP_LT - 640)) | (1L << (BANG - 640)) | (1L << (BANG_BANG - 640)) | (1L << (BANG_EQUAL - 640)) | (1L << (EQUAL - 640)) | (1L << (EQUAL_GT - 640)) | (1L << (EQUAL2 - 640)) | (1L << (GT - 640)) | (1L << (GTE - 640)) | (1L << (LT - 640)) | (1L << (LTE - 640)) | (1L << (LT_GT - 640)) | (1L << (DIV - 640)) | (1L << (IPV4_ADDR - 640)) | (1L << (IPV6_ADDR - 640)) | (1L << (SPACE - 640)) | (1L << (COMMENT - 640)) | (1L << (LINE_COMMENT_LITERAL - 640)) | (1L << (OPEN_HINT - 640)) | (1L << (CLOSE_HINT - 640)) | (1L << (DOUBLE_QUOTE_STRING - 640)) | (1L << (WORD - 640)) | (1L << (SINGLE_QUOTE_STRING - 640)) | (1L << (FLOAT - 640)) | (1L << (REAL - 640)) | (1L << (DECIMAL - 640)) | (1L << (ANY - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionModeContext transactionMode() {
			return getRuleContext(TransactionModeContext.class,0);
		}
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Begin_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBegin_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBegin_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBegin_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_transaction_statementContext begin_transaction_statement() throws RecognitionException {
		Begin_transaction_statementContext _localctx = new Begin_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_begin_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			match(K_BEGIN);
			setState(1557);
			_la = _input.LA(1);
			if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1558);
			match(K_ISOLATION);
			setState(1559);
			match(K_LEVEL);
			setState(1560);
			isolationLevel();
			setState(1561);
			transactionMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_statementContext extends ParserRuleContext {
		public Comment_on_column_statementContext comment_on_column_statement() {
			return getRuleContext(Comment_on_column_statementContext.class,0);
		}
		public Comment_on_constraint_statementContext comment_on_constraint_statement() {
			return getRuleContext(Comment_on_constraint_statementContext.class,0);
		}
		public Comment_on_function_statementContext comment_on_function_statement() {
			return getRuleContext(Comment_on_function_statementContext.class,0);
		}
		public Comment_on_transform_function_statementContext comment_on_transform_function_statement() {
			return getRuleContext(Comment_on_transform_function_statementContext.class,0);
		}
		public Comment_on_library_statementContext comment_on_library_statement() {
			return getRuleContext(Comment_on_library_statementContext.class,0);
		}
		public Comment_on_node_statementContext comment_on_node_statement() {
			return getRuleContext(Comment_on_node_statementContext.class,0);
		}
		public Comment_on_schema_statementContext comment_on_schema_statement() {
			return getRuleContext(Comment_on_schema_statementContext.class,0);
		}
		public Comment_on_sequence_statementContext comment_on_sequence_statement() {
			return getRuleContext(Comment_on_sequence_statementContext.class,0);
		}
		public Comment_on_table_statementContext comment_on_table_statement() {
			return getRuleContext(Comment_on_table_statementContext.class,0);
		}
		public Comment_on_view_statementContext comment_on_view_statement() {
			return getRuleContext(Comment_on_view_statementContext.class,0);
		}
		public Comment_on_projection_statementContext comment_on_projection_statement() {
			return getRuleContext(Comment_on_projection_statementContext.class,0);
		}
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_comment_on_statement);
		try {
			setState(1574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1563);
				comment_on_column_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1564);
				comment_on_constraint_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1565);
				comment_on_function_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1566);
				comment_on_transform_function_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1567);
				comment_on_library_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1568);
				comment_on_node_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1569);
				comment_on_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1570);
				comment_on_sequence_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1571);
				comment_on_table_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1572);
				comment_on_view_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1573);
				comment_on_projection_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_column_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode DOT() { return getToken(VSqlParser.DOT, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_column_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_column_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_column_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_column_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_column_statementContext comment_on_column_statement() throws RecognitionException {
		Comment_on_column_statementContext _localctx = new Comment_on_column_statementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_comment_on_column_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1576);
			match(K_COMMENT);
			setState(1577);
			match(K_ON);
			setState(1578);
			match(K_COLUMN);
			setState(1579);
			projectionReference();
			setState(1580);
			match(DOT);
			setState(1581);
			column();
			setState(1582);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_constraint_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_constraint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_constraint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_constraint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_constraint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_constraint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_constraint_statementContext comment_on_constraint_statement() throws RecognitionException {
		Comment_on_constraint_statementContext _localctx = new Comment_on_constraint_statementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_comment_on_constraint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1584);
			match(K_COMMENT);
			setState(1585);
			match(K_ON);
			setState(1586);
			match(K_CONSTRAINT);
			setState(1587);
			constraint();
			setState(1588);
			match(K_ON);
			setState(1589);
			tableReference();
			setState(1590);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_function_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_function_statementContext comment_on_function_statement() throws RecognitionException {
		Comment_on_function_statementContext _localctx = new Comment_on_function_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_comment_on_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1592);
			match(K_COMMENT);
			setState(1593);
			match(K_ON);
			setState(1594);
			match(K_FUNCTION);
			setState(1595);
			functionReference();
			setState(1596);
			argument_list();
			setState(1597);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_transform_function_statementContext comment_on_transform_function_statement() throws RecognitionException {
		Comment_on_transform_function_statementContext _localctx = new Comment_on_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_comment_on_transform_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1599);
			match(K_COMMENT);
			setState(1600);
			match(K_ON);
			setState(1601);
			match(K_TRANSFORM);
			setState(1602);
			match(K_FUNCTION);
			setState(1603);
			functionReference();
			setState(1604);
			argument_list();
			setState(1605);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_library_statementContext comment_on_library_statement() throws RecognitionException {
		Comment_on_library_statementContext _localctx = new Comment_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_comment_on_library_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			match(K_COMMENT);
			setState(1608);
			match(K_ON);
			setState(1609);
			match(K_FUNCTION);
			setState(1610);
			libraryReference();
			setState(1611);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_node_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_node_statementContext comment_on_node_statement() throws RecognitionException {
		Comment_on_node_statementContext _localctx = new Comment_on_node_statementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_comment_on_node_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1613);
			match(K_COMMENT);
			setState(1614);
			match(K_ON);
			setState(1615);
			match(K_NODE);
			setState(1616);
			node();
			setState(1617);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_schema_statementContext comment_on_schema_statement() throws RecognitionException {
		Comment_on_schema_statementContext _localctx = new Comment_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_comment_on_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1619);
			match(K_COMMENT);
			setState(1620);
			match(K_ON);
			setState(1621);
			match(K_SCHEMA);
			setState(1622);
			schemaReference();
			setState(1623);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_sequence_statementContext comment_on_sequence_statement() throws RecognitionException {
		Comment_on_sequence_statementContext _localctx = new Comment_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_comment_on_sequence_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			match(K_COMMENT);
			setState(1626);
			match(K_ON);
			setState(1627);
			match(K_SEQUENCE);
			setState(1628);
			sequenceReference();
			setState(1629);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_table_statementContext comment_on_table_statement() throws RecognitionException {
		Comment_on_table_statementContext _localctx = new Comment_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_comment_on_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1631);
			match(K_COMMENT);
			setState(1632);
			match(K_ON);
			setState(1633);
			match(K_TABLE);
			setState(1634);
			tableReference();
			setState(1635);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_view_statementContext comment_on_view_statement() throws RecognitionException {
		Comment_on_view_statementContext _localctx = new Comment_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_comment_on_view_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1637);
			match(K_COMMENT);
			setState(1638);
			match(K_ON);
			setState(1639);
			match(K_VIEW);
			setState(1640);
			viewReference();
			setState(1641);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_projection_statementContext comment_on_projection_statement() throws RecognitionException {
		Comment_on_projection_statementContext _localctx = new Comment_on_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_comment_on_projection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1643);
			match(K_COMMENT);
			setState(1644);
			match(K_ON);
			setState(1645);
			match(K_PROJECTION);
			setState(1646);
			projectionReference();
			setState(1647);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_valueContext extends ParserRuleContext {
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public Comment_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_valueContext comment_value() throws RecognitionException {
		Comment_valueContext _localctx = new Comment_valueContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_comment_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			match(K_IS);
			setState(1652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1650);
				value();
				}
				break;
			case 2:
				{
				setState(1651);
				match(K_NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1654);
			match(K_COMMIT);
			setState(1656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(1655);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connect_statementContext extends ParserRuleContext {
		public TerminalNode K_CONNECT() { return getToken(VSqlParser.K_CONNECT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public PortContext port() {
			return getRuleContext(PortContext.class,0);
		}
		public TerminalNode K_TLSMODE() { return getToken(VSqlParser.K_TLSMODE, 0); }
		public TerminalNode K_PREFER() { return getToken(VSqlParser.K_PREFER, 0); }
		public Connect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connect_statementContext connect_statement() throws RecognitionException {
		Connect_statementContext _localctx = new Connect_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_connect_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1658);
			match(K_CONNECT);
			setState(1659);
			match(K_TO);
			setState(1660);
			match(K_VERTICA);
			setState(1661);
			dbname();
			setState(1662);
			match(K_USER);
			setState(1663);
			user();
			setState(1664);
			match(K_PASSWORD);
			setState(1665);
			value();
			setState(1666);
			match(K_ON);
			setState(1667);
			host();
			setState(1668);
			match(COMMA);
			setState(1669);
			port();
			setState(1672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TLSMODE) {
				{
				setState(1670);
				match(K_TLSMODE);
				setState(1671);
				match(K_PREFER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_columnContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Copy_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_columnContext copy_column() throws RecognitionException {
		Copy_columnContext _localctx = new Copy_columnContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_copy_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1674);
			column();
			setState(1677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(1675);
				match(K_AS);
				setState(1676);
				expression();
				}
			}

			}
			setState(1684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1679);
				match(K_DELIMITER);
				setState(1681);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(1680);
					match(K_AS);
					}
					break;
				}
				setState(1683);
				value();
				}
			}

			setState(1691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1686);
				match(K_ENCLOSED);
				setState(1688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(1687);
					match(K_BY);
					}
					break;
				}
				setState(1690);
				value();
				}
			}

			setState(1694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1693);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1703);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(1696);
				match(K_ESCAPE);
				setState(1698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(1697);
					match(K_AS);
					}
					break;
				}
				setState(1700);
				value();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1701);
				match(K_NO);
				setState(1702);
				match(K_ESCAPE);
				}
				}
				break;
			case K_NULL:
			case K_TRIM:
			case K_FILLER:
			case K_FORMAT:
			case COMMA:
			case CLOSE_PAREN:
				break;
			default:
				break;
			}
			setState(1707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FILLER) {
				{
				setState(1705);
				match(K_FILLER);
				setState(1706);
				dataTypes();
				}
			}

			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FORMAT) {
				{
				setState(1709);
				match(K_FORMAT);
				setState(1710);
				value();
				}
			}

			setState(1718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1713);
				match(K_NULL);
				setState(1715);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1714);
					match(K_AS);
					}
					break;
				}
				setState(1717);
				value();
				}
			}

			setState(1722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1720);
				match(K_TRIM);
				setState(1721);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_optionContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_optionContext column_option() throws RecognitionException {
		Column_optionContext _localctx = new Column_optionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_column_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724);
			column();
			setState(1730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1725);
				match(K_DELIMITER);
				setState(1727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
				case 1:
					{
					setState(1726);
					match(K_AS);
					}
					break;
				}
				setState(1729);
				value();
				}
			}

			setState(1737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1732);
				match(K_ENCLOSED);
				setState(1734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					setState(1733);
					match(K_BY);
					}
					break;
				}
				setState(1736);
				value();
				}
			}

			setState(1740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1739);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(1742);
				match(K_ESCAPE);
				setState(1744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1743);
					match(K_AS);
					}
					break;
				}
				setState(1746);
				value();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1747);
				match(K_NO);
				setState(1748);
				match(K_ESCAPE);
				}
				}
				break;
			case K_NULL:
			case K_TRIM:
			case K_FILLER:
			case K_FORMAT:
			case COMMA:
			case CLOSE_PAREN:
				break;
			default:
				break;
			}
			setState(1753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FILLER) {
				{
				setState(1751);
				match(K_FILLER);
				setState(1752);
				dataTypes();
				}
			}

			setState(1757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FORMAT) {
				{
				setState(1755);
				match(K_FORMAT);
				setState(1756);
				value();
				}
			}

			setState(1764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1759);
				match(K_NULL);
				setState(1761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					setState(1760);
					match(K_AS);
					}
					break;
				}
				setState(1763);
				value();
				}
			}

			setState(1768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1766);
				match(K_TRIM);
				setState(1767);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PathContext extends ParserRuleContext {
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public PathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathContext path() throws RecognitionException {
		PathContext _localctx = new PathContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_path);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1770);
			string();
			setState(1775);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1771);
					match(COMMA);
					setState(1772);
					string();
					}
					} 
				}
				setState(1777);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
			}
			setState(1795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(1778);
				match(K_ON);
				setState(1793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1779);
					node();
					}
					break;
				case 2:
					{
					{
					setState(1780);
					match(OPEN_PAREN);
					setState(1781);
					node();
					setState(1786);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1782);
						match(COMMA);
						setState(1783);
						node();
						}
						}
						setState(1788);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1789);
					match(CLOSE_PAREN);
					}
					}
					break;
				case 3:
					{
					{
					setState(1791);
					match(K_ANY);
					setState(1792);
					match(K_NODE);
					}
					}
					break;
				}
				}
				break;
			}
			setState(1798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1797);
				inputFormat();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_pathContext extends ParserRuleContext {
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public Local_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLocal_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLocal_path(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLocal_path(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_pathContext local_path() throws RecognitionException {
		Local_pathContext _localctx = new Local_pathContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_local_path);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1800);
			match(K_LOCAL);
			setState(1803);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_STDIN:
				{
				setState(1801);
				match(K_STDIN);
				}
				break;
			case DOUBLE_QUOTE_STRING:
			case SINGLE_QUOTE_STRING:
				{
				setState(1802);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) {
				{
				setState(1805);
				inputFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InputFormatContext extends ParserRuleContext {
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_ZSTD() { return getToken(VSqlParser.K_ZSTD, 0); }
		public InputFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inputFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInputFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInputFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInputFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InputFormatContext inputFormat() throws RecognitionException {
		InputFormatContext _localctx = new InputFormatContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_inputFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1808);
			_la = _input.LA(1);
			if ( !(_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vertica_sourceContext extends ParserRuleContext {
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Vertica_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vertica_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterVertica_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitVertica_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitVertica_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vertica_sourceContext vertica_source() throws RecognitionException {
		Vertica_sourceContext _localctx = new Vertica_sourceContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_vertica_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1810);
			match(K_VERTICA);
			setState(1811);
			tableReference();
			setState(1812);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udl_clauseContext extends ParserRuleContext {
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public Udl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udl_clauseContext udl_clause() throws RecognitionException {
		Udl_clauseContext _localctx = new Udl_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_udl_clause);
		try {
			setState(1829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1814);
				match(K_SOURCE);
				setState(1815);
				source();
				setState(1817);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1816);
					commaSeparatedKeyValuePairs();
					}
					break;
				}
				}
				}
				break;
			case K_FILTER:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1819);
				match(K_FILTER);
				setState(1820);
				filter();
				setState(1822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					setState(1821);
					commaSeparatedKeyValuePairs();
					}
					break;
				}
				}
				}
				break;
			case K_PARSER:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1824);
				match(K_PARSER);
				setState(1825);
				parserName();
				setState(1827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1826);
					commaSeparatedKeyValuePairs();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_statementContext extends ParserRuleContext {
		public Udl_clauseContext K_UDL;
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public List<NumberContext> number() {
			return getRuleContexts(NumberContext.class);
		}
		public NumberContext number(int i) {
			return getRuleContext(NumberContext.class,i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public List<TerminalNode> K_ERROR() { return getTokens(VSqlParser.K_ERROR); }
		public TerminalNode K_ERROR(int i) {
			return getToken(VSqlParser.K_ERROR, i);
		}
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public Vertica_sourceContext vertica_source() {
			return getRuleContext(Vertica_sourceContext.class,0);
		}
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<TerminalNode> K_WITH() { return getTokens(VSqlParser.K_WITH); }
		public TerminalNode K_WITH(int i) {
			return getToken(VSqlParser.K_WITH, i);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public List<PathContext> path() {
			return getRuleContexts(PathContext.class);
		}
		public PathContext path(int i) {
			return getRuleContext(PathContext.class,i);
		}
		public List<Local_pathContext> local_path() {
			return getRuleContexts(Local_pathContext.class);
		}
		public Local_pathContext local_path(int i) {
			return getRuleContext(Local_pathContext.class,i);
		}
		public List<Udl_clauseContext> udl_clause() {
			return getRuleContexts(Udl_clauseContext.class);
		}
		public Udl_clauseContext udl_clause(int i) {
			return getRuleContext(Udl_clauseContext.class,i);
		}
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_statementContext copy_statement() throws RecognitionException {
		Copy_statementContext _localctx = new Copy_statementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1831);
			match(K_COPY);
			setState(1832);
			tableReference();
			setState(1844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1833);
				match(OPEN_PAREN);
				setState(1834);
				copy_column();
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1835);
					match(COMMA);
					setState(1836);
					copy_column();
					}
					}
					setState(1841);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1842);
				match(CLOSE_PAREN);
				}
			}

			setState(1859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_COLUMN) {
				{
				setState(1846);
				match(K_COLUMN);
				setState(1847);
				match(K_OPTION);
				{
				setState(1848);
				match(OPEN_PAREN);
				setState(1849);
				column_option();
				setState(1854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1850);
					match(COMMA);
					setState(1851);
					column_option();
					}
					}
					setState(1856);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1857);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(1885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(1861);
				match(K_FROM);
				setState(1883);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_STDIN:
					{
					{
					setState(1862);
					match(K_STDIN);
					setState(1864);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
					case 1:
						{
						setState(1863);
						value();
						}
						break;
					}
					}
					}
					break;
				case DOUBLE_QUOTE_STRING:
				case SINGLE_QUOTE_STRING:
					{
					{
					setState(1866);
					path();
					setState(1871);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1867);
						match(COMMA);
						setState(1868);
						path();
						}
						}
						setState(1873);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case K_LOCAL:
					{
					{
					setState(1874);
					local_path();
					setState(1879);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1875);
						match(COMMA);
						setState(1876);
						local_path();
						}
						}
						setState(1881);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case K_VERTICA:
					{
					setState(1882);
					vertica_source();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(1887);
					match(K_WITH);
					}
				}

				setState(1890);
				match(K_PARSER);
				setState(1891);
				value();
				setState(1896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(1892);
					match(OPEN_PAREN);
					setState(1893);
					commaSeparatedKeyValuePairs();
					setState(1894);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			}
			setState(1908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH || _la==K_FILTER || _la==K_PARSER || _la==K_SOURCE) {
				{
				setState(1901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(1900);
					match(K_WITH);
					}
				}

				setState(1904); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1903);
					((Copy_statementContext)_localctx).K_UDL = udl_clause();
					}
					}
					setState(1906); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==K_FILTER || _la==K_PARSER || _la==K_SOURCE );
				}
			}

			setState(1915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1910);
				match(K_DELIMITER);
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1911);
					match(K_AS);
					}
				}

				setState(1914);
				string();
				}
			}

			setState(1919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRAILING) {
				{
				setState(1917);
				match(K_TRAILING);
				setState(1918);
				match(K_NULLCOLS);
				}
			}

			setState(1926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1921);
				match(K_NULL);
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1922);
					match(K_AS);
					}
				}

				setState(1925);
				string();
				}
			}

			setState(1933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				{
				setState(1928);
				match(K_ESCAPE);
				setState(1929);
				match(K_AS);
				setState(1930);
				string();
				}
				}
				break;
			case 2:
				{
				{
				setState(1931);
				match(K_NO);
				setState(1932);
				match(K_ESCAPE);
				}
				}
				break;
			}
			setState(1940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1935);
				match(K_ENCLOSED);
				setState(1937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_BY) {
					{
					setState(1936);
					match(K_BY);
					}
				}

				setState(1939);
				string();
				}
			}

			setState(1945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RECORD) {
				{
				setState(1942);
				match(K_RECORD);
				setState(1943);
				match(K_TERMINATOR);
				setState(1944);
				string();
				}
			}

			setState(1949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(1947);
				match(K_SKIP);
				setState(1948);
				number();
				}
				break;
			}
			setState(1954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SKIP) {
				{
				setState(1951);
				match(K_SKIP);
				setState(1952);
				match(K_BYTES);
				setState(1953);
				number();
				}
			}

			setState(1958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1956);
				match(K_TRIM);
				setState(1957);
				value();
				}
			}

			setState(1962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTMAX) {
				{
				setState(1960);
				match(K_REJECTMAX);
				setState(1961);
				number();
				}
			}

			setState(1979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTED) {
				{
				setState(1964);
				match(K_REJECTED);
				setState(1965);
				match(K_DATA);
				setState(1977);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DOUBLE_QUOTE_STRING:
				case SINGLE_QUOTE_STRING:
					{
					{
					setState(1966);
					string();
					setState(1971);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_ON) {
						{
						{
						setState(1967);
						match(K_ON);
						setState(1968);
						node();
						}
						}
						setState(1973);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case K_AS:
					{
					{
					setState(1974);
					match(K_AS);
					setState(1975);
					match(K_TABLE);
					setState(1976);
					id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_EXCEPTIONS) {
				{
				setState(1981);
				match(K_EXCEPTIONS);
				setState(1982);
				string();
				setState(1987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==K_ON) {
					{
					{
					setState(1983);
					match(K_ON);
					setState(1984);
					node();
					}
					}
					setState(1989);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1992);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ERROR) {
				{
				setState(1995);
				match(K_ERROR);
				setState(1996);
				match(K_TOLERANCE);
				}
			}

			setState(2002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ABORT) {
				{
				setState(1999);
				match(K_ABORT);
				setState(2000);
				match(K_ON);
				setState(2001);
				match(K_ERROR);
				}
			}

			setState(2008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_STORAGE || _la==K_TRICKLE) {
				{
				setState(2005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_STORAGE) {
					{
					setState(2004);
					match(K_STORAGE);
					}
				}

				setState(2007);
				load_method();
				}
			}

			setState(2013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STREAM) {
				{
				setState(2010);
				match(K_STREAM);
				setState(2011);
				match(K_NAME);
				setState(2012);
				value();
				}
			}

			setState(2017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(2015);
				match(K_NO);
				setState(2016);
				match(K_COMMIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_local_statementContext extends ParserRuleContext {
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Copy_local_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_local_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_local_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_local_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_local_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_local_statementContext copy_local_statement() throws RecognitionException {
		Copy_local_statementContext _localctx = new Copy_local_statementContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_copy_local_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2019);
			copy_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_from_vertica_statementContext extends ParserRuleContext {
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public Copy_from_vertica_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from_vertica_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_from_vertica_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_from_vertica_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_from_vertica_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_from_vertica_statementContext copy_from_vertica_statement() throws RecognitionException {
		Copy_from_vertica_statementContext _localctx = new Copy_from_vertica_statementContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_copy_from_vertica_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2021);
			match(K_COPY);
			setState(2022);
			tableReference();
			setState(2024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(2023);
				columns();
				}
				break;
			}
			setState(2026);
			match(K_FROM);
			setState(2027);
			match(K_VERTICA);
			setState(2028);
			tableReference();
			setState(2030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2029);
				columns();
				}
				break;
			}
			setState(2033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(2032);
				load_method();
				}
			}

			setState(2038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STREAM) {
				{
				setState(2035);
				match(K_STREAM);
				setState(2036);
				match(K_NAME);
				setState(2037);
				id();
				}
			}

			setState(2042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(2040);
				match(K_NO);
				setState(2041);
				match(K_COMMIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_WHERE() { return getToken(VSqlParser.K_WHERE, 0); }
		public Create_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_access_policy_statementContext create_access_policy_statement() throws RecognitionException {
		Create_access_policy_statementContext _localctx = new Create_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_create_access_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2044);
			match(K_CREATE);
			setState(2045);
			match(K_ACCESS);
			setState(2046);
			match(K_POLICY);
			setState(2047);
			match(K_ON);
			setState(2048);
			tableReference();
			setState(2058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				{
				setState(2049);
				match(K_FOR);
				setState(2050);
				match(K_COLUMN);
				setState(2051);
				column();
				setState(2052);
				expressions();
				}
				}
				break;
			case 2:
				{
				{
				setState(2054);
				match(K_FOR);
				setState(2055);
				match(K_ROWS);
				setState(2056);
				match(K_WHERE);
				setState(2057);
				expressions();
				}
				}
				break;
			}
			setState(2060);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLE || _la==K_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public List<Auth_method_nameContext> auth_method_name() {
			return getRuleContexts(Auth_method_nameContext.class);
		}
		public Auth_method_nameContext auth_method_name(int i) {
			return getRuleContext(Auth_method_nameContext.class,i);
		}
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public Create_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_authentication_statementContext create_authentication_statement() throws RecognitionException {
		Create_authentication_statementContext _localctx = new Create_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_create_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2062);
			match(K_CREATE);
			setState(2063);
			match(K_AUTHENTICATION);
			setState(2064);
			auth_method_name();
			setState(2065);
			match(K_METHOD);
			setState(2066);
			auth_method_name();
			setState(2076);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_LOCAL:
				{
				setState(2067);
				match(K_LOCAL);
				}
				break;
			case K_HOST:
				{
				{
				setState(2068);
				match(K_HOST);
				setState(2073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NO || _la==K_TLS) {
					{
					setState(2070);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NO) {
						{
						setState(2069);
						match(K_NO);
						}
					}

					setState(2072);
					match(K_TLS);
					}
				}

				setState(2075);
				address();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_branch_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_IMMUTABLE() { return getToken(VSqlParser.K_IMMUTABLE, 0); }
		public TerminalNode K_BRANCH() { return getToken(VSqlParser.K_BRANCH, 0); }
		public List<Branch_identifierContext> branch_identifier() {
			return getRuleContexts(Branch_identifierContext.class);
		}
		public Branch_identifierContext branch_identifier(int i) {
			return getRuleContext(Branch_identifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_branch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_branch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_branch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_branch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_branch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_branch_statementContext create_branch_statement() throws RecognitionException {
		Create_branch_statementContext _localctx = new Create_branch_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_create_branch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			match(K_CREATE);
			setState(2079);
			match(K_DATA);
			setState(2080);
			match(K_IMMUTABLE);
			setState(2081);
			match(K_BRANCH);
			{
			setState(2082);
			branch_identifier();
			}
			setState(2087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2083);
				match(COMMA);
				setState(2084);
				branch_identifier();
				}
				}
				setState(2089);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LIKE) {
				{
				setState(2090);
				match(K_LIKE);
				setState(2091);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_table_as_copy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<PathContext> path() {
			return getRuleContexts(PathContext.class);
		}
		public PathContext path(int i) {
			return getRuleContext(PathContext.class,i);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<SingleCharContext> singleChar() {
			return getRuleContexts(SingleCharContext.class);
		}
		public SingleCharContext singleChar(int i) {
			return getRuleContext(SingleCharContext.class,i);
		}
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public TerminalNode K_NATIVE() { return getToken(VSqlParser.K_NATIVE, 0); }
		public TerminalNode K_ORC() { return getToken(VSqlParser.K_ORC, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public List<TerminalNode> K_ERROR() { return getTokens(VSqlParser.K_ERROR); }
		public TerminalNode K_ERROR(int i) {
			return getToken(VSqlParser.K_ERROR, i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public List<IntegerNumberContext> integerNumber() {
			return getRuleContexts(IntegerNumberContext.class);
		}
		public IntegerNumberContext integerNumber(int i) {
			return getRuleContext(IntegerNumberContext.class,i);
		}
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public TerminalNode K_FIXEDWIDTH() { return getToken(VSqlParser.K_FIXEDWIDTH, 0); }
		public TerminalNode K_COLSIZES() { return getToken(VSqlParser.K_COLSIZES, 0); }
		public TerminalNode K_VARCHAR() { return getToken(VSqlParser.K_VARCHAR, 0); }
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public List<TerminalNode> K_WITH() { return getTokens(VSqlParser.K_WITH); }
		public TerminalNode K_WITH(int i) {
			return getToken(VSqlParser.K_WITH, i);
		}
		public List<CommaSeparatedKeyValuePairsContext> commaSeparatedKeyValuePairs() {
			return getRuleContexts(CommaSeparatedKeyValuePairsContext.class);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs(int i) {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,i);
		}
		public Create_external_table_as_copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_table_as_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_external_table_as_copy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_external_table_as_copy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_external_table_as_copy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_table_as_copy_statementContext create_external_table_as_copy_statement() throws RecognitionException {
		Create_external_table_as_copy_statementContext _localctx = new Create_external_table_as_copy_statementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_create_external_table_as_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2094);
			match(K_CREATE);
			setState(2095);
			match(K_EXTERNAL);
			setState(2096);
			match(K_TABLE);
			setState(2100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2097);
				match(K_IF);
				setState(2098);
				match(K_NOT);
				setState(2099);
				match(K_EXISTS);
				}
				break;
			}
			setState(2102);
			tableReference();
			setState(2103);
			match(OPEN_PAREN);
			setState(2104);
			column_definition_list();
			setState(2105);
			match(CLOSE_PAREN);
			setState(2107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2106);
				schema_privileges_clause();
				}
			}

			setState(2109);
			match(K_AS);
			setState(2110);
			match(K_COPY);
			setState(2122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2111);
				match(OPEN_PAREN);
				setState(2112);
				copy_column();
				setState(2117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2113);
					match(COMMA);
					setState(2114);
					copy_column();
					}
					}
					setState(2119);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2120);
				match(CLOSE_PAREN);
				}
			}

			setState(2137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_COLUMN) {
				{
				setState(2124);
				match(K_COLUMN);
				setState(2125);
				match(K_OPTION);
				{
				setState(2126);
				match(OPEN_PAREN);
				setState(2127);
				column_option();
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2128);
					match(COMMA);
					setState(2129);
					column_option();
					}
					}
					setState(2134);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2135);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2139);
			match(K_FROM);
			setState(2153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE_STRING:
			case SINGLE_QUOTE_STRING:
				{
				setState(2140);
				path();
				}
				break;
			case K_ABORT:
			case K_BZIP:
			case K_DELIMITER:
			case K_FIXEDWIDTH:
			case K_GZIP:
			case K_LZO:
			case K_NATIVE:
			case K_ORC:
			case K_PARQUET:
			case K_UNCOMPRESSED:
			case K_ZSTD:
				{
				}
				break;
			case K_WITH:
			case K_SOURCE:
				{
				{
				setState(2143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2142);
					match(K_WITH);
					}
				}

				setState(2145);
				match(K_SOURCE);
				setState(2146);
				source();
				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2147);
					match(OPEN_PAREN);
					setState(2148);
					commaSeparatedKeyValuePairs();
					setState(2149);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) {
				{
				setState(2155);
				inputFormat();
				}
			}

			setState(2178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2158);
				match(K_NATIVE);
				}
				break;
			case 2:
				{
				{
				setState(2159);
				match(K_FIXEDWIDTH);
				setState(2160);
				match(K_COLSIZES);
				setState(2161);
				match(OPEN_PAREN);
				setState(2162);
				integerNumber();
				setState(2163);
				match(CLOSE_PAREN);
				setState(2171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2164);
					match(COMMA);
					setState(2165);
					match(OPEN_PAREN);
					setState(2166);
					integerNumber();
					setState(2167);
					match(CLOSE_PAREN);
					}
					}
					setState(2173);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(2174);
				match(K_NATIVE);
				setState(2175);
				match(K_VARCHAR);
				}
				}
				break;
			case 4:
				{
				setState(2176);
				match(K_ORC);
				}
				break;
			case 5:
				{
				setState(2177);
				match(K_PARQUET);
				}
				break;
			}
			setState(2183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ABORT) {
				{
				setState(2180);
				match(K_ABORT);
				setState(2181);
				match(K_ON);
				setState(2182);
				match(K_ERROR);
				}
			}

			{
			setState(2185);
			match(K_DELIMITER);
			setState(2187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(2186);
				match(K_AS);
				}
			}

			setState(2189);
			singleChar();
			}
			setState(2197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(2191);
				match(K_ENCLOSED);
				setState(2192);
				match(K_BY);
				setState(2193);
				singleChar();
				{
				setState(2194);
				match(K_AND);
				setState(2195);
				singleChar();
				}
				}
			}

			setState(2200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(2199);
				match(K_ENFORCELENGTH);
				}
			}

			setState(2204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ERROR) {
				{
				setState(2202);
				match(K_ERROR);
				setState(2203);
				match(K_TOLERANCE);
				}
			}

			setState(2211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(2206);
				match(K_ESCAPE);
				setState(2207);
				match(K_AS);
				setState(2208);
				singleChar();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(2209);
				match(K_NO);
				setState(2210);
				match(K_ESCAPE);
				}
				}
				break;
			case EOF:
			case K_NULL:
			case K_TRAILING:
			case K_TRIM:
			case K_WITH:
			case K_EXCEPTIONS:
			case K_FILTER:
			case K_PARSER:
			case K_RECORD:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_SKIP:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_EXCEPTIONS) {
				{
				setState(2213);
				match(K_EXCEPTIONS);
				setState(2214);
				path();
				setState(2217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ON) {
					{
					setState(2215);
					match(K_ON);
					setState(2216);
					node();
					}
				}

				setState(2224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2219);
					match(COMMA);
					{
					setState(2220);
					match(K_ON);
					setState(2221);
					node();
					}
					}
					}
					setState(2226);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2229);
					match(K_WITH);
					}
				}

				setState(2232);
				match(K_FILTER);
				setState(2233);
				filter();
				{
				setState(2234);
				match(OPEN_PAREN);
				setState(2236);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(2235);
					commaSeparatedKeyValuePairs();
					}
					break;
				}
				setState(2238);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
			setState(2247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(2242);
				match(K_NULL);
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(2243);
					match(K_AS);
					}
				}

				setState(2246);
				string();
				}
			}

			setState(2260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH || _la==K_PARSER) {
				{
				setState(2250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2249);
					match(K_WITH);
					}
				}

				setState(2252);
				match(K_PARSER);
				setState(2253);
				parserName();
				{
				setState(2254);
				match(OPEN_PAREN);
				setState(2256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					setState(2255);
					commaSeparatedKeyValuePairs();
					}
					break;
				}
				setState(2258);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RECORD) {
				{
				setState(2262);
				match(K_RECORD);
				setState(2263);
				match(K_TERMINATOR);
				setState(2264);
				string();
				}
			}

			setState(2282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTED) {
				{
				setState(2267);
				match(K_REJECTED);
				setState(2268);
				match(K_DATA);
				setState(2269);
				path();
				setState(2272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ON) {
					{
					setState(2270);
					match(K_ON);
					setState(2271);
					node();
					}
				}

				setState(2279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2274);
					match(COMMA);
					{
					setState(2275);
					match(K_ON);
					setState(2276);
					node();
					}
					}
					}
					setState(2281);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTMAX) {
				{
				setState(2284);
				match(K_REJECTMAX);
				setState(2285);
				integerNumber();
				}
			}

			setState(2290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2288);
				match(K_SKIP);
				setState(2289);
				integerNumber();
				}
				break;
			}
			setState(2295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SKIP) {
				{
				setState(2292);
				match(K_SKIP);
				setState(2293);
				match(K_BYTES);
				setState(2294);
				integerNumber();
				}
			}

			setState(2299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRAILING) {
				{
				setState(2297);
				match(K_TRAILING);
				setState(2298);
				match(K_NULLCOLS);
				}
			}

			setState(2303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(2301);
				match(K_TRIM);
				setState(2302);
				singleChar();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fault_group_statementContext create_fault_group_statement() throws RecognitionException {
		Create_fault_group_statementContext _localctx = new Create_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			match(K_CREATE);
			setState(2306);
			match(K_FAULT);
			setState(2307);
			match(K_GROUP);
			setState(2308);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_flex_table_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Create_flex_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_flex_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_flex_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_flex_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_flex_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_flex_table_statementContext create_flex_table_statement() throws RecognitionException {
		Create_flex_table_statementContext _localctx = new Create_flex_table_statementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_flex_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2310);
			match(K_CREATE);
			setState(2311);
			_la = _input.LA(1);
			if ( !(_la==K_FLEX || _la==K_FLEXIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2312);
			match(K_TABLE);
			setState(2316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2313);
				match(K_IF);
				setState(2314);
				match(K_NOT);
				setState(2315);
				match(K_EXISTS);
				}
				break;
			}
			setState(2318);
			tableReference();
			setState(2324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				{
				setState(2319);
				match(OPEN_PAREN);
				setState(2320);
				column_definition_list();
				setState(2321);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				{
				setState(2323);
				column_name_list();
				}
				break;
			}
			setState(2327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2326);
				schema_privileges_clause();
				}
			}

			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(2329);
				orderby_clause();
				}
			}

			setState(2333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(2332);
				encodedBy_clause();
				}
			}

			setState(2336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(2335);
				segmentation_clause();
				}
			}

			setState(2339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2338);
				ksafe_clause();
				}
			}

			setState(2342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(2341);
				partition_clause();
				}
			}

			setState(2346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(2344);
				match(K_AS);
				setState(2345);
				select_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_flex_external_table_as_copy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<CompressionTypeContext> compressionType() {
			return getRuleContexts(CompressionTypeContext.class);
		}
		public CompressionTypeContext compressionType(int i) {
			return getRuleContext(CompressionTypeContext.class,i);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public List<CommaSeparatedKeyValuePairsContext> commaSeparatedKeyValuePairs() {
			return getRuleContexts(CommaSeparatedKeyValuePairsContext.class);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs(int i) {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,i);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<SingleCharContext> singleChar() {
			return getRuleContexts(SingleCharContext.class);
		}
		public SingleCharContext singleChar(int i) {
			return getRuleContext(SingleCharContext.class,i);
		}
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public List<IntegerNumberContext> integerNumber() {
			return getRuleContexts(IntegerNumberContext.class);
		}
		public IntegerNumberContext integerNumber(int i) {
			return getRuleContext(IntegerNumberContext.class,i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public List<TerminalNode> K_EXCEPTIONS() { return getTokens(VSqlParser.K_EXCEPTIONS); }
		public TerminalNode K_EXCEPTIONS(int i) {
			return getToken(VSqlParser.K_EXCEPTIONS, i);
		}
		public List<TerminalNode> K_REJECTED() { return getTokens(VSqlParser.K_REJECTED); }
		public TerminalNode K_REJECTED(int i) {
			return getToken(VSqlParser.K_REJECTED, i);
		}
		public List<TerminalNode> K_DATA() { return getTokens(VSqlParser.K_DATA); }
		public TerminalNode K_DATA(int i) {
			return getToken(VSqlParser.K_DATA, i);
		}
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Create_flex_external_table_as_copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_flex_external_table_as_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_flex_external_table_as_copy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_flex_external_table_as_copy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_flex_external_table_as_copy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_flex_external_table_as_copy_statementContext create_flex_external_table_as_copy_statement() throws RecognitionException {
		Create_flex_external_table_as_copy_statementContext _localctx = new Create_flex_external_table_as_copy_statementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_create_flex_external_table_as_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2348);
			match(K_CREATE);
			setState(2349);
			_la = _input.LA(1);
			if ( !(_la==K_FLEX || _la==K_FLEXIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2350);
			match(K_EXTERNAL);
			setState(2351);
			match(K_TABLE);
			setState(2353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2352);
				ifNotExistsClause();
				}
				break;
			}
			setState(2355);
			tableReference();
			setState(2356);
			match(OPEN_PAREN);
			setState(2357);
			column_definition_list();
			setState(2358);
			match(CLOSE_PAREN);
			setState(2360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2359);
				schema_privileges_clause();
				}
			}

			setState(2362);
			match(K_AS);
			setState(2363);
			match(K_COPY);
			setState(2375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2364);
				match(OPEN_PAREN);
				setState(2365);
				copy_column();
				setState(2370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2366);
					match(COMMA);
					setState(2367);
					copy_column();
					}
					}
					setState(2372);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2373);
				match(CLOSE_PAREN);
				}
			}

			setState(2516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(2377);
				match(K_FROM);
				setState(2378);
				path();
				setState(2387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED) {
					{
					setState(2379);
					compressionType();
					setState(2384);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2380);
						match(COMMA);
						setState(2381);
						compressionType();
						}
						}
						setState(2386);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2389);
					match(K_WITH);
					}
				}

				setState(2398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_SOURCE) {
					{
					setState(2392);
					match(K_SOURCE);
					setState(2393);
					source();
					setState(2394);
					match(OPEN_PAREN);
					setState(2395);
					commaSeparatedKeyValuePairs();
					setState(2396);
					match(CLOSE_PAREN);
					}
				}

				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FILTER) {
					{
					setState(2400);
					match(K_FILTER);
					setState(2401);
					filter();
					setState(2402);
					match(OPEN_PAREN);
					setState(2403);
					commaSeparatedKeyValuePairs();
					setState(2404);
					match(CLOSE_PAREN);
					}
				}

				setState(2412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PARSER) {
					{
					setState(2408);
					match(K_PARSER);
					setState(2409);
					parserName();
					setState(2410);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DELIMITER) {
					{
					setState(2414);
					match(K_DELIMITER);
					setState(2416);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2415);
						match(K_AS);
						}
					}

					setState(2418);
					singleChar();
					}
				}

				setState(2423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TRAILING) {
					{
					setState(2421);
					match(K_TRAILING);
					setState(2422);
					match(K_NULLCOLS);
					}
				}

				setState(2430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NULL) {
					{
					setState(2425);
					match(K_NULL);
					setState(2427);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2426);
						match(K_AS);
						}
					}

					setState(2429);
					string();
					}
				}

				setState(2439);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ESCAPE:
					{
					{
					setState(2432);
					match(K_ESCAPE);
					setState(2434);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2433);
						match(K_AS);
						}
					}

					setState(2436);
					singleChar();
					}
					}
					break;
				case K_NO:
					{
					{
					setState(2437);
					match(K_NO);
					setState(2438);
					match(K_ESCAPE);
					}
					}
					break;
				case EOF:
				case K_TRIM:
				case K_ABORT:
				case K_ENCLOSED:
				case K_ENFORCELENGTH:
				case K_EXCEPTIONS:
				case K_RECORD:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_SKIP:
				case SEMI:
					break;
				default:
					break;
				}
				setState(2446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENCLOSED) {
					{
					setState(2441);
					match(K_ENCLOSED);
					setState(2443);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_BY) {
						{
						setState(2442);
						match(K_BY);
						}
					}

					setState(2445);
					singleChar();
					}
				}

				setState(2451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_RECORD) {
					{
					setState(2448);
					match(K_RECORD);
					setState(2449);
					match(K_TERMINATOR);
					setState(2450);
					string();
					}
				}

				setState(2455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(2453);
					match(K_SKIP);
					setState(2454);
					integerNumber();
					}
					break;
				}
				setState(2460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_SKIP) {
					{
					setState(2457);
					match(K_SKIP);
					setState(2458);
					match(K_BYTES);
					setState(2459);
					integerNumber();
					}
				}

				setState(2464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TRIM) {
					{
					setState(2462);
					match(K_TRIM);
					setState(2463);
					singleChar();
					}
				}

				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_REJECTMAX) {
					{
					setState(2466);
					match(K_REJECTMAX);
					setState(2467);
					integerNumber();
					}
				}

				setState(2486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_EXCEPTIONS) {
					{
					setState(2470);
					match(K_EXCEPTIONS);
					setState(2471);
					string();
					{
					setState(2472);
					match(K_ON);
					setState(2473);
					node();
					}
					{
					setState(2475);
					match(COMMA);
					setState(2483);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_EXCEPTIONS) {
						{
						{
						setState(2476);
						match(K_EXCEPTIONS);
						setState(2477);
						string();
						{
						setState(2478);
						match(K_ON);
						setState(2479);
						node();
						}
						}
						}
						setState(2485);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
				}

				setState(2506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_REJECTED) {
					{
					setState(2488);
					match(K_REJECTED);
					setState(2489);
					match(K_DATA);
					setState(2490);
					string();
					{
					setState(2491);
					match(K_ON);
					setState(2492);
					node();
					}
					{
					setState(2494);
					match(COMMA);
					setState(2503);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_REJECTED) {
						{
						{
						setState(2495);
						match(K_REJECTED);
						setState(2496);
						match(K_DATA);
						setState(2497);
						string();
						{
						setState(2498);
						match(K_ON);
						setState(2499);
						node();
						}
						}
						}
						setState(2505);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
				}

				setState(2509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENFORCELENGTH) {
					{
					setState(2508);
					match(K_ENFORCELENGTH);
					}
				}

				setState(2514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ABORT) {
					{
					setState(2511);
					match(K_ABORT);
					setState(2512);
					match(K_ON);
					setState(2513);
					match(K_ERROR);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_statements_statementContext extends ParserRuleContext {
		public Create_or_replace_aggregate_function_statementContext create_or_replace_aggregate_function_statement() {
			return getRuleContext(Create_or_replace_aggregate_function_statementContext.class,0);
		}
		public Create_or_replace_analytic_function_statementContext create_or_replace_analytic_function_statement() {
			return getRuleContext(Create_or_replace_analytic_function_statementContext.class,0);
		}
		public Create_or_replace_filter_statementContext create_or_replace_filter_statement() {
			return getRuleContext(Create_or_replace_filter_statementContext.class,0);
		}
		public Create_or_replace_sql_function_statementContext create_or_replace_sql_function_statement() {
			return getRuleContext(Create_or_replace_sql_function_statementContext.class,0);
		}
		public Create_or_replace_udf_function_statementContext create_or_replace_udf_function_statement() {
			return getRuleContext(Create_or_replace_udf_function_statementContext.class,0);
		}
		public Create_or_replace_parser_function_statementContext create_or_replace_parser_function_statement() {
			return getRuleContext(Create_or_replace_parser_function_statementContext.class,0);
		}
		public Create_or_replace_source_function_statementContext create_or_replace_source_function_statement() {
			return getRuleContext(Create_or_replace_source_function_statementContext.class,0);
		}
		public Create_or_replace_transform_function_statementContext create_or_replace_transform_function_statement() {
			return getRuleContext(Create_or_replace_transform_function_statementContext.class,0);
		}
		public Create_function_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_function_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_function_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_function_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_statements_statementContext create_function_statements_statement() throws RecognitionException {
		Create_function_statements_statementContext _localctx = new Create_function_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_function_statements_statement);
		try {
			setState(2526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2518);
				create_or_replace_aggregate_function_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2519);
				create_or_replace_analytic_function_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2520);
				create_or_replace_filter_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2521);
				create_or_replace_sql_function_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2522);
				create_or_replace_udf_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2523);
				create_or_replace_parser_function_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2524);
				create_or_replace_source_function_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2525);
				create_or_replace_transform_function_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_transform_function_statementContext create_or_replace_transform_function_statement() throws RecognitionException {
		Create_or_replace_transform_function_statementContext _localctx = new Create_or_replace_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_create_or_replace_transform_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2528);
			match(K_CREATE);
			setState(2531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2529);
				match(K_OR);
				setState(2530);
				match(K_REPLACE);
				}
			}

			setState(2533);
			match(K_TRANSFORM);
			setState(2534);
			match(K_FUNCTION);
			setState(2535);
			function();
			setState(2536);
			match(K_AS);
			setState(2539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2537);
				match(K_LANGUAGE);
				setState(2538);
				lang();
				}
			}

			setState(2541);
			match(K_NAME);
			setState(2542);
			id();
			setState(2543);
			match(K_LIBRARY);
			setState(2544);
			library();
			setState(2548);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2545);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2546);
				match(K_NOT);
				setState(2547);
				match(K_FENCED);
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_source_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_source_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_source_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_source_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_source_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_source_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_source_function_statementContext create_or_replace_source_function_statement() throws RecognitionException {
		Create_or_replace_source_function_statementContext _localctx = new Create_or_replace_source_function_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_or_replace_source_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2550);
			match(K_CREATE);
			setState(2553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2551);
				match(K_OR);
				setState(2552);
				match(K_REPLACE);
				}
			}

			setState(2555);
			match(K_SOURCE);
			setState(2556);
			functionReference();
			setState(2557);
			match(K_AS);
			setState(2558);
			match(K_LANGUAGE);
			setState(2559);
			lang();
			setState(2560);
			match(K_NAME);
			setState(2561);
			id();
			setState(2562);
			match(K_LIBRARY);
			setState(2563);
			library();
			setState(2567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2564);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2565);
				match(K_NOT);
				setState(2566);
				match(K_FENCED);
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_parser_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_parser_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_parser_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_parser_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_parser_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_parser_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_parser_function_statementContext create_or_replace_parser_function_statement() throws RecognitionException {
		Create_or_replace_parser_function_statementContext _localctx = new Create_or_replace_parser_function_statementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_create_or_replace_parser_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			match(K_CREATE);
			setState(2572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2570);
				match(K_OR);
				setState(2571);
				match(K_REPLACE);
				}
			}

			setState(2574);
			match(K_PARSER);
			setState(2575);
			functionReference();
			setState(2576);
			match(K_AS);
			setState(2579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2577);
				match(K_LANGUAGE);
				setState(2578);
				lang();
				}
			}

			setState(2581);
			match(K_NAME);
			setState(2582);
			id();
			setState(2583);
			match(K_LIBRARY);
			setState(2584);
			library();
			setState(2588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2585);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2586);
				match(K_NOT);
				setState(2587);
				match(K_FENCED);
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_udf_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_udf_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_udf_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_udf_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_udf_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_udf_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_udf_function_statementContext create_or_replace_udf_function_statement() throws RecognitionException {
		Create_or_replace_udf_function_statementContext _localctx = new Create_or_replace_udf_function_statementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_or_replace_udf_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			match(K_CREATE);
			setState(2593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2591);
				match(K_OR);
				setState(2592);
				match(K_REPLACE);
				}
			}

			setState(2595);
			match(K_FUNCTION);
			setState(2596);
			functionReference();
			setState(2597);
			match(K_AS);
			setState(2600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2598);
				match(K_LANGUAGE);
				setState(2599);
				lang();
				}
			}

			setState(2602);
			match(K_NAME);
			setState(2603);
			id();
			setState(2604);
			match(K_LIBRARY);
			setState(2605);
			library();
			setState(2609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2606);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2607);
				match(K_NOT);
				setState(2608);
				match(K_FENCED);
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_sql_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public List<TerminalNode> K_RETURN() { return getTokens(VSqlParser.K_RETURN); }
		public TerminalNode K_RETURN(int i) {
			return getToken(VSqlParser.K_RETURN, i);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public Create_or_replace_sql_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_sql_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_sql_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_sql_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_sql_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_sql_function_statementContext create_or_replace_sql_function_statement() throws RecognitionException {
		Create_or_replace_sql_function_statementContext _localctx = new Create_or_replace_sql_function_statementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_or_replace_sql_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(K_CREATE);
			setState(2614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2612);
				match(K_OR);
				setState(2613);
				match(K_REPLACE);
				}
			}

			setState(2616);
			match(K_FUNCTION);
			setState(2617);
			functionReference();
			setState(2618);
			argument_list();
			setState(2619);
			match(K_RETURN);
			setState(2620);
			dataTypes();
			setState(2621);
			match(K_AS);
			setState(2622);
			match(K_BEGIN);
			setState(2623);
			match(K_RETURN);
			setState(2624);
			expression();
			setState(2625);
			match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_filter_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_filter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_filter_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_filter_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_filter_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_filter_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_filter_statementContext create_or_replace_filter_statement() throws RecognitionException {
		Create_or_replace_filter_statementContext _localctx = new Create_or_replace_filter_statementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_or_replace_filter_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2627);
			match(K_CREATE);
			setState(2630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2628);
				match(K_OR);
				setState(2629);
				match(K_REPLACE);
				}
			}

			setState(2632);
			match(K_FILTER);
			setState(2633);
			functionReference();
			setState(2634);
			match(K_AS);
			setState(2637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2635);
				match(K_LANGUAGE);
				setState(2636);
				lang();
				}
			}

			setState(2639);
			match(K_NAME);
			setState(2640);
			id();
			setState(2641);
			match(K_LIBRARY);
			setState(2642);
			library();
			setState(2647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT || _la==K_FENCED) {
				{
				setState(2644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NOT) {
					{
					setState(2643);
					match(K_NOT);
					}
				}

				setState(2646);
				match(K_FENCED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_analytic_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_analytic_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_analytic_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_analytic_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_analytic_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_analytic_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_analytic_function_statementContext create_or_replace_analytic_function_statement() throws RecognitionException {
		Create_or_replace_analytic_function_statementContext _localctx = new Create_or_replace_analytic_function_statementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_create_or_replace_analytic_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			match(K_CREATE);
			setState(2652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2650);
				match(K_OR);
				setState(2651);
				match(K_REPLACE);
				}
			}

			setState(2654);
			match(K_ANALYTIC);
			setState(2655);
			match(K_FUNCTION);
			setState(2656);
			function();
			setState(2657);
			match(K_AS);
			setState(2660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2658);
				match(K_LANGUAGE);
				setState(2659);
				lang();
				}
			}

			setState(2662);
			match(K_NAME);
			setState(2663);
			id();
			setState(2664);
			match(K_LIBRARY);
			setState(2665);
			library();
			setState(2669);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2666);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2667);
				match(K_NOT);
				setState(2668);
				match(K_FENCED);
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_aggregate_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Create_or_replace_aggregate_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_aggregate_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_aggregate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_aggregate_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_aggregate_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_aggregate_function_statementContext create_or_replace_aggregate_function_statement() throws RecognitionException {
		Create_or_replace_aggregate_function_statementContext _localctx = new Create_or_replace_aggregate_function_statementContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_create_or_replace_aggregate_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			match(K_CREATE);
			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2672);
				match(K_OR);
				setState(2673);
				match(K_REPLACE);
				}
			}

			setState(2676);
			match(K_AGGREGATE);
			setState(2677);
			match(K_FUNCTION);
			setState(2678);
			functionReference();
			setState(2679);
			match(K_AS);
			setState(2682);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2680);
				match(K_LANGUAGE);
				setState(2681);
				lang();
				}
			}

			setState(2684);
			match(K_NAME);
			setState(2685);
			id();
			setState(2686);
			match(K_LIBRARY);
			setState(2687);
			library();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_hcatalog_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_AUTHORIZATION() { return getToken(VSqlParser.K_AUTHORIZATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<Hcatalog_schema_paramContext> hcatalog_schema_param() {
			return getRuleContexts(Hcatalog_schema_paramContext.class);
		}
		public Hcatalog_schema_paramContext hcatalog_schema_param(int i) {
			return getRuleContext(Hcatalog_schema_paramContext.class,i);
		}
		public Create_hcatalog_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_hcatalog_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_hcatalog_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_hcatalog_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_hcatalog_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_hcatalog_schema_statementContext create_hcatalog_schema_statement() throws RecognitionException {
		Create_hcatalog_schema_statementContext _localctx = new Create_hcatalog_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_create_hcatalog_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2689);
			match(K_CREATE);
			setState(2690);
			match(K_HCATALOG);
			setState(2691);
			match(K_SCHEMA);
			setState(2693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(2692);
				ifNotExistsClause();
				}
				break;
			}
			setState(2695);
			schema();
			setState(2698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTHORIZATION) {
				{
				setState(2696);
				match(K_AUTHORIZATION);
				setState(2697);
				id();
				}
			}

			setState(2706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(2700);
				match(K_WITH);
				setState(2702); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2701);
					hcatalog_schema_param();
					}
					}
					setState(2704); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==K_CUSTOM_PARTITIONS || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (K_HCATALOG_CONNECTION_TIMEOUT - 313)) | (1L << (K_HCATALOG_SCHEMA - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 313)) | (1L << (K_HCATALOG_USER - 313)) | (1L << (K_HIVESERVER2_HOSTNAME - 313)) | (1L << (K_HOSTNAME - 313)))) != 0) || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hcatalog_schema_paramContext extends ParserRuleContext {
		public Token key;
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_HOSTNAME() { return getToken(VSqlParser.K_HOSTNAME, 0); }
		public TerminalNode K_PORT() { return getToken(VSqlParser.K_PORT, 0); }
		public TerminalNode K_HIVESERVER2_HOSTNAME() { return getToken(VSqlParser.K_HIVESERVER2_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_HOSTNAME() { return getToken(VSqlParser.K_WEBSERVICE_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_PORT() { return getToken(VSqlParser.K_WEBSERVICE_PORT, 0); }
		public TerminalNode K_WEBHDFS_ADDRESS() { return getToken(VSqlParser.K_WEBHDFS_ADDRESS, 0); }
		public TerminalNode K_HCATALOG_SCHEMA() { return getToken(VSqlParser.K_HCATALOG_SCHEMA, 0); }
		public TerminalNode K_CUSTOM_PARTITIONS() { return getToken(VSqlParser.K_CUSTOM_PARTITIONS, 0); }
		public TerminalNode K_HCATALOG_USER() { return getToken(VSqlParser.K_HCATALOG_USER, 0); }
		public TerminalNode K_HCATALOG_CONNECTION_TIMEOUT() { return getToken(VSqlParser.K_HCATALOG_CONNECTION_TIMEOUT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_LIMIT() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_LIMIT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_TIME() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_TIME, 0); }
		public TerminalNode K_SSL_CONFIG() { return getToken(VSqlParser.K_SSL_CONFIG, 0); }
		public Hcatalog_schema_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hcatalog_schema_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHcatalog_schema_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHcatalog_schema_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHcatalog_schema_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hcatalog_schema_paramContext hcatalog_schema_param() throws RecognitionException {
		Hcatalog_schema_paramContext _localctx = new Hcatalog_schema_paramContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_hcatalog_schema_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			((Hcatalog_schema_paramContext)_localctx).key = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==K_CUSTOM_PARTITIONS || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (K_HCATALOG_CONNECTION_TIMEOUT - 313)) | (1L << (K_HCATALOG_SCHEMA - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 313)) | (1L << (K_HCATALOG_USER - 313)) | (1L << (K_HIVESERVER2_HOSTNAME - 313)) | (1L << (K_HOSTNAME - 313)))) != 0) || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT) ) {
				((Hcatalog_schema_paramContext)_localctx).key = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2709);
			match(EQUAL);
			setState(2710);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_library_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Create_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_library_statementContext create_library_statement() throws RecognitionException {
		Create_library_statementContext _localctx = new Create_library_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			match(K_CREATE);
			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2713);
				match(K_OR);
				setState(2714);
				match(K_REPLACE);
				}
			}

			setState(2717);
			match(K_LIBRARY);
			setState(2718);
			libraryReference();
			setState(2719);
			alias();
			setState(2722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEPENDS) {
				{
				setState(2720);
				match(K_DEPENDS);
				setState(2721);
				id();
				}
			}

			setState(2726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2724);
				match(K_LANGUAGE);
				setState(2725);
				lang();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_load_balance_group_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_BALANCE() { return getToken(VSqlParser.K_BALANCE, 0); }
		public List<TerminalNode> K_GROUP() { return getTokens(VSqlParser.K_GROUP); }
		public TerminalNode K_GROUP(int i) {
			return getToken(VSqlParser.K_GROUP, i);
		}
		public Lb_groupContext lb_group() {
			return getRuleContext(Lb_groupContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public List<Network_addressContext> network_address() {
			return getRuleContexts(Network_addressContext.class);
		}
		public Network_addressContext network_address(int i) {
			return getRuleContext(Network_addressContext.class,i);
		}
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public List<FaultGroupContext> faultGroup() {
			return getRuleContexts(FaultGroupContext.class);
		}
		public FaultGroupContext faultGroup(int i) {
			return getRuleContext(FaultGroupContext.class,i);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_load_balance_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_load_balance_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_load_balance_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_load_balance_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_load_balance_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_load_balance_group_statementContext create_load_balance_group_statement() throws RecognitionException {
		Create_load_balance_group_statementContext _localctx = new Create_load_balance_group_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_load_balance_group_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2728);
			match(K_CREATE);
			setState(2729);
			match(K_LOAD);
			setState(2730);
			match(K_BALANCE);
			setState(2731);
			match(K_GROUP);
			setState(2732);
			lb_group();
			setState(2733);
			match(K_WITH);
			setState(2756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ADDRESS:
				{
				{
				setState(2734);
				match(K_ADDRESS);
				setState(2735);
				network_address();
				setState(2740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2736);
					match(COMMA);
					setState(2737);
					network_address();
					}
					}
					setState(2742);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_FAULT:
				{
				{
				setState(2743);
				match(K_FAULT);
				setState(2744);
				match(K_GROUP);
				setState(2745);
				faultGroup();
				setState(2750);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2746);
					match(COMMA);
					setState(2747);
					faultGroup();
					}
					}
					setState(2752);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2753);
				match(K_FILTER);
				setState(2754);
				address();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_POLICY) {
				{
				setState(2758);
				match(K_POLICY);
				setState(2759);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_local_temporary_view_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Create_local_temporary_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_local_temporary_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_local_temporary_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_local_temporary_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_local_temporary_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_local_temporary_view_statementContext create_local_temporary_view_statement() throws RecognitionException {
		Create_local_temporary_view_statementContext _localctx = new Create_local_temporary_view_statementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_create_local_temporary_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2762);
			match(K_CREATE);
			{
			setState(2763);
			match(K_OR);
			setState(2764);
			match(K_REPLACE);
			}
			setState(2766);
			match(K_LOCAL);
			setState(2767);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2768);
			match(K_VIEW);
			setState(2769);
			viewReference();
			setState(2771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(2770);
				columns();
				}
				break;
			}
			setState(2773);
			match(K_AS);
			setState(2774);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_location_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public Create_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_location_statementContext create_location_statement() throws RecognitionException {
		Create_location_statementContext _localctx = new Create_location_statementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2776);
			match(K_CREATE);
			setState(2777);
			match(K_LOCATION);
			setState(2778);
			string();
			setState(2783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_NODE:
				{
				{
				setState(2779);
				match(K_NODE);
				setState(2780);
				node();
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(2781);
				match(K_ALL);
				setState(2782);
				match(K_NODES);
				}
				}
				break;
			case EOF:
			case K_LIMIT:
			case K_LABEL:
			case K_SHARED:
			case K_USAGE:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SHARED) {
				{
				setState(2785);
				match(K_SHARED);
				}
			}

			setState(2790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_USAGE) {
				{
				setState(2788);
				match(K_USAGE);
				setState(2789);
				string();
				}
			}

			setState(2794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LABEL) {
				{
				setState(2792);
				match(K_LABEL);
				setState(2793);
				string();
				}
			}

			setState(2798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LIMIT) {
				{
				setState(2796);
				match(K_LIMIT);
				setState(2797);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_network_address_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public Network_addressContext network_address() {
			return getRuleContext(Network_addressContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public Create_network_address_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_address_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_network_address_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_network_address_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_network_address_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_address_statementContext create_network_address_statement() throws RecognitionException {
		Create_network_address_statementContext _localctx = new Create_network_address_statementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_network_address_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2800);
			match(K_CREATE);
			setState(2801);
			match(K_NETWORK);
			setState(2802);
			match(K_ADDRESS);
			setState(2803);
			network_address();
			setState(2804);
			match(K_ON);
			setState(2805);
			node();
			setState(2806);
			match(K_WITH);
			setState(2807);
			address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public Create_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_interface_statementContext create_network_interface_statement() throws RecognitionException {
		Create_network_interface_statementContext _localctx = new Create_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_network_interface_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2809);
			match(K_CREATE);
			setState(2810);
			match(K_NETWORK);
			setState(2811);
			match(K_INTERFACE);
			setState(2812);
			network_interface();
			setState(2813);
			match(K_ON);
			setState(2814);
			node();
			setState(2815);
			match(K_WITH);
			setState(2816);
			address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_notifier_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public TerminalNode K_ACTION() { return getToken(VSqlParser.K_ACTION, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public List<Notifier_paramsContext> notifier_params() {
			return getRuleContexts(Notifier_paramsContext.class);
		}
		public Notifier_paramsContext notifier_params(int i) {
			return getRuleContext(Notifier_paramsContext.class,i);
		}
		public Create_notifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_notifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_notifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_notifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_notifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_notifier_statementContext create_notifier_statement() throws RecognitionException {
		Create_notifier_statementContext _localctx = new Create_notifier_statementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_notifier_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2818);
			match(K_CREATE);
			setState(2819);
			match(K_NOTIFIER);
			setState(2820);
			notifier();
			setState(2821);
			match(K_ACTION);
			setState(2822);
			value();
			setState(2826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_CHECK || _la==K_DISABLE || _la==K_ENABLE || ((((_la - 327)) & ~0x3f) == 0 && ((1L << (_la - 327)) & ((1L << (K_IDENTIFIED - 327)) | (1L << (K_MAXMEMORYSIZE - 327)) | (1L << (K_MAXPAYLOAD - 327)))) != 0) || _la==K_NO || _la==K_PARAMETERS) {
				{
				{
				setState(2823);
				notifier_params();
				}
				}
				setState(2828);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_statementContext extends ParserRuleContext {
		public ValueContext executable;
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_statementContext create_procedure_statement() throws RecognitionException {
		Create_procedure_statementContext _localctx = new Create_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_procedure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2829);
			match(K_CREATE);
			setState(2830);
			match(K_PROCEDURE);
			setState(2831);
			procedureReference();
			setState(2832);
			argument_list();
			setState(2833);
			match(K_AS);
			setState(2834);
			((Create_procedure_statementContext)_localctx).executable = value();
			setState(2835);
			match(K_LANGUAGE);
			setState(2836);
			lang();
			setState(2837);
			match(K_USER);
			setState(2838);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Argument_itemContext> argument_item() {
			return getRuleContexts(Argument_itemContext.class);
		}
		public Argument_itemContext argument_item(int i) {
			return getRuleContext(Argument_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArgument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArgument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArgument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_listContext argument_list() throws RecognitionException {
		Argument_listContext _localctx = new Argument_listContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			match(OPEN_PAREN);
			setState(2842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2841);
				argument_item();
				}
				break;
			}
			setState(2848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2844);
				match(COMMA);
				setState(2845);
				argument_item();
				}
				}
				setState(2850);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2851);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_itemContext extends ParserRuleContext {
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Argument_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArgument_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArgument_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArgument_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_itemContext argument_item() throws RecognitionException {
		Argument_itemContext _localctx = new Argument_itemContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_argument_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2853);
				id();
				}
				break;
			}
			setState(2856);
			dataTypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public List<Password_parameterContext> password_parameter() {
			return getRuleContexts(Password_parameterContext.class);
		}
		public Password_parameterContext password_parameter(int i) {
			return getRuleContext(Password_parameterContext.class,i);
		}
		public Create_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_profile_statementContext create_profile_statement() throws RecognitionException {
		Create_profile_statementContext _localctx = new Create_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2858);
			match(K_CREATE);
			setState(2859);
			match(K_PROFILE);
			setState(2860);
			profile();
			setState(2861);
			match(K_LIMIT);
			setState(2863); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2862);
				password_parameter();
				}
				}
				setState(2865); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_FAILED_LOGIN_ATTEMPTS || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (K_PASSWORD_GRACE_TIME - 432)) | (1L << (K_PASSWORD_LIFE_TIME - 432)) | (1L << (K_PASSWORD_LOCK_TIME - 432)) | (1L << (K_PASSWORD_MAX_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_DIGITS - 432)) | (1L << (K_PASSWORD_MIN_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 432)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_REUSE_MAX - 432)) | (1L << (K_PASSWORD_REUSE_TIME - 432)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Projection_clause_itemContext extends ParserRuleContext {
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public Grouped_clauseContext grouped_clause() {
			return getRuleContext(Grouped_clauseContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Projection_clause_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection_clause_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjection_clause_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjection_clause_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjection_clause_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Projection_clause_itemContext projection_clause_item() throws RecognitionException {
		Projection_clause_itemContext _localctx = new Projection_clause_itemContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_projection_clause_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(2867);
				columnReference();
				}
				break;
			case 2:
				{
				setState(2868);
				grouped_clause();
				}
				break;
			}
			setState(2872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(2871);
				encoding_clause();
				}
			}

			setState(2875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(2874);
				access_rank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ksafe_clauseContext extends ParserRuleContext {
		public TerminalNode K_KSAFE() { return getToken(VSqlParser.K_KSAFE, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public Ksafe_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ksafe_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterKsafe_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitKsafe_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitKsafe_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ksafe_clauseContext ksafe_clause() throws RecognitionException {
		Ksafe_clauseContext _localctx = new Ksafe_clauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_ksafe_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			match(K_KSAFE);
			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(2878);
				integerNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsClauseContext extends ParserRuleContext {
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public IfNotExistsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExistsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIfNotExistsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIfNotExistsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIfNotExistsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsClauseContext ifNotExistsClause() throws RecognitionException {
		IfNotExistsClauseContext _localctx = new IfNotExistsClauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_ifNotExistsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2881);
			match(K_IF);
			setState(2883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(2882);
				match(K_NOT);
				}
			}

			setState(2885);
			match(K_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_statementContext create_projection_statement() throws RecognitionException {
		Create_projection_statementContext _localctx = new Create_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_projection_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			match(K_CREATE);
			setState(2888);
			match(K_PROJECTION);
			setState(2890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2889);
				ifNotExistsClause();
				}
				break;
			}
			setState(2892);
			projectionReference();
			setState(2904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2893);
				match(OPEN_PAREN);
				setState(2894);
				projection_clause_item();
				setState(2899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2895);
					match(COMMA);
					setState(2896);
					projection_clause_item();
					}
					}
					setState(2901);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2902);
				match(CLOSE_PAREN);
				}
			}

			setState(2906);
			match(K_AS);
			setState(2907);
			simple_select_query_clause();
			setState(2909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2908);
				alias();
				}
				break;
			}
			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(2911);
				orderby_clause();
				}
			}

			setState(2915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(2914);
				segmentation_clause();
				}
			}

			setState(2918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2917);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_live_aggregate_projections_statementContext extends ParserRuleContext {
		public Create_projection_live_aggregate_projections_gr_statementContext create_projection_live_aggregate_projections_gr_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_gr_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_topk_statementContext create_projection_live_aggregate_projections_topk_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_topk_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_statementContext create_projection_live_aggregate_projections_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_statementContext _localctx = new Create_projection_live_aggregate_projections_statementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_create_projection_live_aggregate_projections_statement);
		try {
			setState(2922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2920);
				create_projection_live_aggregate_projections_gr_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2921);
				create_projection_live_aggregate_projections_topk_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_live_aggregate_projections_gr_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_live_aggregate_projections_gr_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_gr_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_gr_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_gr_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_gr_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_gr_statementContext create_projection_live_aggregate_projections_gr_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_gr_statementContext _localctx = new Create_projection_live_aggregate_projections_gr_statementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_create_projection_live_aggregate_projections_gr_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2924);
			match(K_CREATE);
			setState(2925);
			match(K_PROJECTION);
			setState(2927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2926);
				ifNotExistsClause();
				}
				break;
			}
			setState(2929);
			projectionReference();
			setState(2941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2930);
				match(OPEN_PAREN);
				setState(2931);
				projection_clause_item();
				setState(2936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2932);
					match(COMMA);
					setState(2933);
					projection_clause_item();
					}
					}
					setState(2938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2939);
				match(CLOSE_PAREN);
				}
			}

			setState(2943);
			match(K_AS);
			setState(2944);
			simple_select_query_clause();
			setState(2946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(2945);
				alias();
				}
				break;
			}
			setState(2948);
			groupBy_clause();
			setState(2950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2949);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_live_aggregate_projections_topk_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_live_aggregate_projections_topk_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_topk_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_topk_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_topk_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_topk_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_topk_statementContext create_projection_live_aggregate_projections_topk_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_topk_statementContext _localctx = new Create_projection_live_aggregate_projections_topk_statementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_projection_live_aggregate_projections_topk_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2952);
			match(K_CREATE);
			setState(2953);
			match(K_PROJECTION);
			setState(2955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(2954);
				ifNotExistsClause();
				}
				break;
			}
			setState(2957);
			projectionReference();
			setState(2969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2958);
				match(OPEN_PAREN);
				setState(2959);
				projection_clause_item();
				setState(2964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2960);
					match(COMMA);
					setState(2961);
					projection_clause_item();
					}
					}
					setState(2966);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2967);
				match(CLOSE_PAREN);
				}
			}

			setState(2971);
			match(K_AS);
			setState(2972);
			simple_select_query_clause();
			setState(2974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(2973);
				alias();
				}
				break;
			}
			setState(2976);
			limit_clause();
			setState(2977);
			over_clause();
			setState(2979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2978);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_udtfs_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Prepass_queryContext prepass_query() {
			return getRuleContext(Prepass_queryContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Batch_queryContext batch_query() {
			return getRuleContext(Batch_queryContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Create_projection_udtfs_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_udtfs_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_udtfs_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_udtfs_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_udtfs_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_udtfs_statementContext create_projection_udtfs_statement() throws RecognitionException {
		Create_projection_udtfs_statementContext _localctx = new Create_projection_udtfs_statementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_create_projection_udtfs_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2981);
			match(K_CREATE);
			setState(2982);
			match(K_PROJECTION);
			setState(2984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(2983);
				ifNotExistsClause();
				}
				break;
			}
			setState(2986);
			projectionReference();
			setState(2998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2987);
				match(OPEN_PAREN);
				setState(2988);
				projection_clause_item();
				setState(2993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2989);
					match(COMMA);
					setState(2990);
					projection_clause_item();
					}
					}
					setState(2995);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2996);
				match(CLOSE_PAREN);
				}
			}

			setState(3000);
			match(K_AS);
			setState(3011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				{
				setState(3001);
				batch_query();
				setState(3002);
				match(K_FROM);
				setState(3008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(3003);
					prepass_query();
					}
					break;
				case 2:
					{
					{
					setState(3004);
					tableReference();
					setState(3006);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_ALL) | (1L << K_AND) | (1L << K_ANY) | (1L << K_ARRAY) | (1L << K_AS) | (1L << K_ASC) | (1L << K_AUTHORIZATION) | (1L << K_BETWEEN) | (1L << K_BIGINT) | (1L << K_BINARY) | (1L << K_BIT) | (1L << K_BOOLEAN) | (1L << K_BOTH) | (1L << K_CASE) | (1L << K_CAST) | (1L << K_CHAR) | (1L << K_CHAR_LENGTH) | (1L << K_CHARACTER_LENGTH) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_CONSTRAINT) | (1L << K_CORRELATION) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATABASE) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_SCHEMA) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_CURRENT_USER) | (1L << K_DATEDIFF) | (1L << K_DATETIME) | (1L << K_DECIMAL) | (1L << K_DECODE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DESC) | (1L << K_DISTINCT) | (1L << K_ELSE) | (1L << K_ENCODED) | (1L << K_END) | (1L << K_EXCEPT) | (1L << K_EXISTS) | (1L << K_EXTRACT) | (1L << K_FALSE) | (1L << K_FLOAT) | (1L << K_FOR) | (1L << K_FOREIGN) | (1L << K_FROM) | (1L << K_FULL) | (1L << K_GRANT) | (1L << K_GROUP) | (1L << K_HAVING) | (1L << K_ILIKE) | (1L << K_ILIKEB) | (1L << K_IN) | (1L << K_INITIALLY) | (1L << K_INNER) | (1L << K_INOUT) | (1L << K_INT) | (1L << K_INTEGER) | (1L << K_INTERSECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_INTERVAL - 64)) | (1L << (K_INTERVALYM - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KSAFE - 64)) | (1L << (K_LEADING - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIKEB - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_LOCALTIME - 64)) | (1L << (K_LOCALTIMESTAMP - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_MINUS - 64)) | (1L << (K_MONEY - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NCHAR - 64)) | (1L << (K_NEW - 64)) | (1L << (K_NONE - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_NULLSEQUAL - 64)) | (1L << (K_NUMBER - 64)) | (1L << (K_NUMERIC - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_OLD - 64)) | (1L << (K_ON - 64)) | (1L << (K_ONLY - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUT - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_OVER - 64)) | (1L << (K_OVERLAPS - 64)) | (1L << (K_OVERLAY - 64)) | (1L << (K_PINNED - 64)) | (1L << (K_POSITION - 64)) | (1L << (K_PRECISION - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_REAL - 64)) | (1L << (K_REFERENCES - 64)) | (1L << (K_RIGHT - 64)) | (1L << (K_ROW - 64)) | (1L << (K_SCHEMA - 64)) | (1L << (K_SELECT - 64)) | (1L << (K_SESSION_USER - 64)) | (1L << (K_SIMILAR - 64)) | (1L << (K_SMALLDATETIME - 64)) | (1L << (K_SMALLINT - 64)) | (1L << (K_SOME - 64)) | (1L << (K_SUBSTRING - 64)) | (1L << (K_SYSDATE - 64)) | (1L << (K_TABLE - 64)) | (1L << (K_TEXT - 64)) | (1L << (K_THEN - 64)) | (1L << (K_TIME - 64)) | (1L << (K_TIMESERIES - 64)) | (1L << (K_TIMESTAMP - 64)) | (1L << (K_TIMESTAMPADD - 64)) | (1L << (K_TIMESTAMPDIFF - 64)) | (1L << (K_TIMESTAMPTZ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_TIMETZ - 128)) | (1L << (K_TIMEZONE - 128)) | (1L << (K_TINYINT - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRAILING - 128)) | (1L << (K_TREAT - 128)) | (1L << (K_TRIM - 128)) | (1L << (K_TRUE - 128)) | (1L << (K_UNBOUNDED - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_USER - 128)) | (1L << (K_USING - 128)) | (1L << (K_UUID - 128)) | (1L << (K_VARBINARY - 128)) | (1L << (K_VARCHAR - 128)) | (1L << (K_VARCHAR2 - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (K_WINDOW - 128)) | (1L << (K_WITH - 128)) | (1L << (K_WITHIN - 128)) | (1L << (K_ABORT - 128)) | (1L << (K_ABSOLUTE - 128)) | (1L << (K_ACCESS - 128)) | (1L << (K_ACCESSRANK - 128)) | (1L << (K_ACCOUNT - 128)) | (1L << (K_ACTION - 128)) | (1L << (K_ACTIVATE - 128)) | (1L << (K_ACTIVEPARTITIONCOUNT - 128)) | (1L << (K_ADD - 128)) | (1L << (K_ADMIN - 128)) | (1L << (K_AFTER - 128)) | (1L << (K_AGGREGATE - 128)) | (1L << (K_ALSO - 128)) | (1L << (K_ALTER - 128)) | (1L << (K_ANALYSE - 128)) | (1L << (K_ANALYTIC - 128)) | (1L << (K_ANALYZE - 128)) | (1L << (K_ANNOTATED - 128)) | (1L << (K_ANTI - 128)) | (1L << (K_ASSERTION - 128)) | (1L << (K_ASSIGNMENT - 128)) | (1L << (K_AT - 128)) | (1L << (K_AUTHENTICATION - 128)) | (1L << (K_AUTO - 128)) | (1L << (K_AUTO_INCREMENT - 128)) | (1L << (K_AVAILABLE - 128)) | (1L << (K_BACKWARD - 128)) | (1L << (K_BASENAME - 128)) | (1L << (K_BATCH - 128)) | (1L << (K_BEFORE - 128)) | (1L << (K_BEGIN - 128)) | (1L << (K_BEST - 128)) | (1L << (K_BLOCK - 128)) | (1L << (K_BLOCK_DICT - 128)) | (1L << (K_BLOCKDICT_COMP - 128)) | (1L << (K_BROADCAST - 128)) | (1L << (K_BY - 128)) | (1L << (K_BYTEA - 128)) | (1L << (K_BYTES - 128)) | (1L << (K_BZIP - 128)) | (1L << (K_BZIP_COMP - 128)) | (1L << (K_CACHE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (K_CALLED - 192)) | (1L << (K_CASCADE - 192)) | (1L << (K_CATALOGPATH - 192)) | (1L << (K_CHAIN - 192)) | (1L << (K_CHARACTER - 192)) | (1L << (K_CHARACTERISTICS - 192)) | (1L << (K_CHARACTERS - 192)) | (1L << (K_CHECKPOINT - 192)) | (1L << (K_CLASS - 192)) | (1L << (K_CLEAR - 192)) | (1L << (K_CLOSE - 192)) | (1L << (K_CLUSTER - 192)) | (1L << (K_COLSIZES - 192)) | (1L << (K_COLUMNS_COUNT - 192)) | (1L << (K_COMMENT - 192)) | (1L << (K_COMMIT - 192)) | (1L << (K_COMMITTED - 192)) | (1L << (K_COMMONDELTA_COMP - 192)) | (1L << (K_COMMUNAL - 192)) | (1L << (K_COMPLEX - 192)) | (1L << (K_CONNECT - 192)) | (1L << (K_CONSTRAINTS - 192)) | (1L << (K_CONTROL - 192)) | (1L << (K_COPY - 192)) | (1L << (K_CPUAFFINITYMODE - 192)) | (1L << (K_CPUAFFINITYSET - 192)) | (1L << (K_CREATEDB - 192)) | (1L << (K_CREATEUSER - 192)) | (1L << (K_CSV - 192)) | (1L << (K_CUBE - 192)) | (1L << (K_CURRENT - 192)) | (1L << (K_CURSOR - 192)) | (1L << (K_CUSTOM - 192)) | (1L << (K_CUSTOM_PARTITIONS - 192)) | (1L << (K_CYCLE - 192)) | (1L << (K_DATA - 192)) | (1L << (K_DATABASE - 192)) | (1L << (K_DATAPATH - 192)) | (1L << (K_DAY - 192)) | (1L << (K_DEACTIVATE - 192)) | (1L << (K_DEALLOCATE - 192)) | (1L << (K_DEC - 192)) | (1L << (K_DECLARE - 192)) | (1L << (K_DEFAULTS - 192)) | (1L << (K_DEFERRED - 192)) | (1L << (K_DEFINE - 192)) | (1L << (K_DEFINER - 192)) | (1L << (K_DELETE - 192)) | (1L << (K_DELIMITER - 192)) | (1L << (K_DELIMITERS - 192)) | (1L << (K_DELTARANGE_COMP - 192)) | (1L << (K_DELTARANGE_COMP_SP - 192)) | (1L << (K_DELTAVAL - 192)) | (1L << (K_DEPENDS - 192)) | (1L << (K_DETERMINES - 192)) | (1L << (K_DIRECT - 192)) | (1L << (K_DIRECTCOLS - 192)) | (1L << (K_DIRECTED - 192)) | (1L << (K_DIRECTGROUPED - 192)) | (1L << (K_DIRECTPROJ - 192)) | (1L << (K_DISABLE - 192)) | (1L << (K_DISABLED - 192)) | (1L << (K_DISCONNECT - 192)) | (1L << (K_DISTVALINDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (K_DO - 256)) | (1L << (K_DOMAIN - 256)) | (1L << (K_DOUBLE - 256)) | (1L << (K_DROP - 256)) | (1L << (K_DURABLE - 256)) | (1L << (K_EACH - 256)) | (1L << (K_ENABLE - 256)) | (1L << (K_ENABLED - 256)) | (1L << (K_ENCLOSED - 256)) | (1L << (K_ENCODING - 256)) | (1L << (K_ENCRYPTED - 256)) | (1L << (K_ENFORCELENGTH - 256)) | (1L << (K_EPHEMERAL - 256)) | (1L << (K_EPOCH - 256)) | (1L << (K_ERROR - 256)) | (1L << (K_ESCAPE - 256)) | (1L << (K_EVENT - 256)) | (1L << (K_EVENTS - 256)) | (1L << (K_EXCEPTION - 256)) | (1L << (K_EXCEPTIONS - 256)) | (1L << (K_EXCLUDE - 256)) | (1L << (K_EXCLUDING - 256)) | (1L << (K_EXCLUSIVE - 256)) | (1L << (K_EXECUTE - 256)) | (1L << (K_EXECUTIONPARALLELISM - 256)) | (1L << (K_EXPIRE - 256)) | (1L << (K_EXPLAIN - 256)) | (1L << (K_EXPORT - 256)) | (1L << (K_EXTERNAL - 256)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 256)) | (1L << (K_FAULT - 256)) | (1L << (K_FENCED - 256)) | (1L << (K_FETCH - 256)) | (1L << (K_FILESYSTEM - 256)) | (1L << (K_FILLER - 256)) | (1L << (K_FILTER - 256)) | (1L << (K_FIRST - 256)) | (1L << (K_FIXEDWIDTH - 256)) | (1L << (K_FLEX - 256)) | (1L << (K_FLEXIBLE - 256)) | (1L << (K_FOLLOWING - 256)) | (1L << (K_FORCE - 256)) | (1L << (K_FORMAT - 256)) | (1L << (K_FORWARD - 256)) | (1L << (K_FREEZE - 256)) | (1L << (K_FUNCTION - 256)) | (1L << (K_FUNCTIONS - 256)) | (1L << (K_GCDDELTA - 256)) | (1L << (K_GET - 256)) | (1L << (K_GLOBAL - 256)) | (1L << (K_GRACEPERIOD - 256)) | (1L << (K_GROUPED - 256)) | (1L << (K_GROUPING - 256)) | (1L << (K_GZIP - 256)) | (1L << (K_GZIP_COMP - 256)) | (1L << (K_HANDLER - 256)) | (1L << (K_HCATALOG - 256)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 256)) | (1L << (K_HCATALOG_DB - 256)) | (1L << (K_HCATALOG_SCHEMA - 256)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 256)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 256)) | (1L << (K_HCATALOG_USER - 256)) | (1L << (K_HIGH - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (K_HIVE_PARTITION_COLS - 320)) | (1L << (K_HIVESERVER2_HOSTNAME - 320)) | (1L << (K_HOLD - 320)) | (1L << (K_HOST - 320)) | (1L << (K_HOSTNAME - 320)) | (1L << (K_HOUR - 320)) | (1L << (K_HOURS - 320)) | (1L << (K_IDENTIFIED - 320)) | (1L << (K_IDENTITY - 320)) | (1L << (K_IDLESESSIONTIMEOUT - 320)) | (1L << (K_IF - 320)) | (1L << (K_IGNORE - 320)) | (1L << (K_IMMEDIATE - 320)) | (1L << (K_IMMUTABLE - 320)) | (1L << (K_IMPLICIT - 320)) | (1L << (K_INCLUDE - 320)) | (1L << (K_INCLUDING - 320)) | (1L << (K_INCREMENT - 320)) | (1L << (K_INDEX - 320)) | (1L << (K_INHERITS - 320)) | (1L << (K_INPUT - 320)) | (1L << (K_INSENSITIVE - 320)) | (1L << (K_INSERT - 320)) | (1L << (K_INSTEAD - 320)) | (1L << (K_INTERFACE - 320)) | (1L << (K_INTERPOLATE - 320)) | (1L << (K_INVOKER - 320)) | (1L << (K_ISOLATION - 320)) | (1L << (K_JSON - 320)) | (1L << (K_KEY - 320)) | (1L << (K_LABEL - 320)) | (1L << (K_LANCOMPILER - 320)) | (1L << (K_LANGUAGE - 320)) | (1L << (K_LARGE - 320)) | (1L << (K_LAST - 320)) | (1L << (K_LATEST - 320)) | (1L << (K_LESS - 320)) | (1L << (K_LEVEL - 320)) | (1L << (K_LIBRARY - 320)) | (1L << (K_LISTEN - 320)) | (1L << (K_LOAD - 320)) | (1L << (K_LOCAL - 320)) | (1L << (K_LOCATION - 320)) | (1L << (K_LOCK - 320)) | (1L << (K_LONG - 320)) | (1L << (K_LOW - 320)) | (1L << (K_LZO - 320)) | (1L << (K_MANAGED - 320)) | (1L << (K_MASK - 320)) | (1L << (K_MATCHED - 320)) | (1L << (K_MATERIALIZE - 320)) | (1L << (K_MAXCONCURRENCY - 320)) | (1L << (K_MAXCONCURRENCYGRACE - 320)) | (1L << (K_MAXCONNECTIONS - 320)) | (1L << (K_MAXMEMORYSIZE - 320)) | (1L << (K_MAXPAYLOAD - 320)) | (1L << (K_MAXQUERYMEMORYSIZE - 320)) | (1L << (K_MAXVALUE - 320)) | (1L << (K_MEDIUM - 320)) | (1L << (K_MEMORYCAP - 320)) | (1L << (K_MEMORYSIZE - 320)) | (1L << (K_MERGE - 320)) | (1L << (K_MERGEOUT - 320)) | (1L << (K_METHOD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (K_MICROSECONDS - 384)) | (1L << (K_MILLISECONDS - 384)) | (1L << (K_MINUTE - 384)) | (1L << (K_MINUTES - 384)) | (1L << (K_MINVALUE - 384)) | (1L << (K_MODE - 384)) | (1L << (K_MODEL - 384)) | (1L << (K_MONTH - 384)) | (1L << (K_MOVE - 384)) | (1L << (K_MOVEOUT - 384)) | (1L << (K_NAME - 384)) | (1L << (K_NATIONAL - 384)) | (1L << (K_NATIVE - 384)) | (1L << (K_NETWORK - 384)) | (1L << (K_NEXT - 384)) | (1L << (K_NO - 384)) | (1L << (K_NOCREATEDB - 384)) | (1L << (K_NOCREATEUSER - 384)) | (1L << (K_NODE - 384)) | (1L << (K_NODES - 384)) | (1L << (K_NOTHING - 384)) | (1L << (K_NOTIFIER - 384)) | (1L << (K_NOTIFY - 384)) | (1L << (K_NOWAIT - 384)) | (1L << (K_NULLAWARE - 384)) | (1L << (K_NULLCOLS - 384)) | (1L << (K_NULLS - 384)) | (1L << (K_OBJECT - 384)) | (1L << (K_OCTETS - 384)) | (1L << (K_OF - 384)) | (1L << (K_OFF - 384)) | (1L << (K_OIDS - 384)) | (1L << (K_OPERATOR - 384)) | (1L << (K_OPT - 384)) | (1L << (K_OPTIMIZER - 384)) | (1L << (K_OPTION - 384)) | (1L << (K_OPTVER - 384)) | (1L << (K_ORC - 384)) | (1L << (K_OTHERS - 384)) | (1L << (K_OWNER - 384)) | (1L << (K_PARAMETER - 384)) | (1L << (K_PARAMETERS - 384)) | (1L << (K_PARQUET - 384)) | (1L << (K_PARSER - 384)) | (1L << (K_PARTIAL - 384)) | (1L << (K_PARTITION - 384)) | (1L << (K_PARTITIONING - 384)) | (1L << (K_PASSWORD - 384)) | (1L << (K_PASSWORD_GRACE_TIME - 384)) | (1L << (K_PASSWORD_LIFE_TIME - 384)) | (1L << (K_PASSWORD_LOCK_TIME - 384)) | (1L << (K_PASSWORD_MAX_LENGTH - 384)) | (1L << (K_PASSWORD_MIN_DIGITS - 384)) | (1L << (K_PASSWORD_MIN_LENGTH - 384)) | (1L << (K_PASSWORD_MIN_LETTERS - 384)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 384)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 384)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 384)) | (1L << (K_PASSWORD_REUSE_MAX - 384)) | (1L << (K_PASSWORD_REUSE_TIME - 384)) | (1L << (K_PATTERN - 384)) | (1L << (K_PERCENT - 384)) | (1L << (K_PERMANENT - 384)) | (1L << (K_PLACING - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_POLICY - 448)) | (1L << (K_POOL - 448)) | (1L << (K_PORT - 448)) | (1L << (K_PRECEDING - 448)) | (1L << (K_PREPARE - 448)) | (1L << (K_PREPASS - 448)) | (1L << (K_PRESERVE - 448)) | (1L << (K_PREVIOUS - 448)) | (1L << (K_PRIOR - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_PRIVILEGES - 448)) | (1L << (K_PROCEDURAL - 448)) | (1L << (K_PROCEDURE - 448)) | (1L << (K_PROFILE - 448)) | (1L << (K_PROJECTION - 448)) | (1L << (K_PROJECTIONS - 448)) | (1L << (K_PSDATE - 448)) | (1L << (K_QUERY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_QUOTE - 448)) | (1L << (K_RANGE - 448)) | (1L << (K_RAW - 448)) | (1L << (K_READ - 448)) | (1L << (K_RECHECK - 448)) | (1L << (K_RECORD - 448)) | (1L << (K_RECOVER - 448)) | (1L << (K_RECURSIVE - 448)) | (1L << (K_REFRESH - 448)) | (1L << (K_REINDEX - 448)) | (1L << (K_REJECTED - 448)) | (1L << (K_REJECTMAX - 448)) | (1L << (K_RELATIVE - 448)) | (1L << (K_RELEASE - 448)) | (1L << (K_REMOVE - 448)) | (1L << (K_RENAME - 448)) | (1L << (K_REORGANIZE - 448)) | (1L << (K_REPEATABLE - 448)) | (1L << (K_REPLACE - 448)) | (1L << (K_RESET - 448)) | (1L << (K_RESOURCE - 448)) | (1L << (K_RESTART - 448)) | (1L << (K_RESTRICT - 448)) | (1L << (K_RESULTS - 448)) | (1L << (K_RETURN - 448)) | (1L << (K_RETURNREJECTED - 448)) | (1L << (K_REVOKE - 448)) | (1L << (K_RLE - 448)) | (1L << (K_ROLE - 448)) | (1L << (K_ROLES - 448)) | (1L << (K_ROLLBACK - 448)) | (1L << (K_ROLLUP - 448)) | (1L << (K_ROWS - 448)) | (1L << (K_RULE - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)) | (1L << (K_SAVE - 448)) | (1L << (K_SAVEPOINT - 448)) | (1L << (K_SCROLL - 448)) | (1L << (K_SEARCH_PATH - 448)) | (1L << (K_SECOND - 448)) | (1L << (K_SECONDS - 448)) | (1L << (K_SECURITY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (K_SECURITY_ALGORITHM - 512)) | (1L << (K_SEGMENTED - 512)) | (1L << (K_SEMI - 512)) | (1L << (K_SEMIALL - 512)) | (1L << (K_SEQUENCE - 512)) | (1L << (K_SEQUENCES - 512)) | (1L << (K_SERIALIZABLE - 512)) | (1L << (K_SESSION - 512)) | (1L << (K_SET - 512)) | (1L << (K_SETOF - 512)) | (1L << (K_SETS - 512)) | (1L << (K_SHARE - 512)) | (1L << (K_SHARED - 512)) | (1L << (K_SHOW - 512)) | (1L << (K_SIMPLE - 512)) | (1L << (K_SINGLEINITIATOR - 512)) | (1L << (K_SITE - 512)) | (1L << (K_SITES - 512)) | (1L << (K_SKIP - 512)) | (1L << (K_SOURCE - 512)) | (1L << (K_SPLIT - 512)) | (1L << (K_SSL_CONFIG - 512)) | (1L << (K_STABLE - 512)) | (1L << (K_STANDBY - 512)) | (1L << (K_START - 512)) | (1L << (K_STATEMENT - 512)) | (1L << (K_STATISTICS - 512)) | (1L << (K_STDIN - 512)) | (1L << (K_STDOUT - 512)) | (1L << (K_STEMMER - 512)) | (1L << (K_STORAGE - 512)) | (1L << (K_STREAM - 512)) | (1L << (K_STRENGTH - 512)) | (1L << (K_STRICT - 512)) | (1L << (K_SUBNET - 512)) | (1L << (K_SYSID - 512)) | (1L << (K_SYSTEM - 512)) | (1L << (K_TABLES - 512)) | (1L << (K_TABLESAMPLE - 512)) | (1L << (K_TABLESPACE - 512)) | (1L << (K_TEMP - 512)) | (1L << (K_TEMPLATE - 512)) | (1L << (K_TEMPORARY - 512)) | (1L << (K_TEMPSPACECAP - 512)) | (1L << (K_TERMINATOR - 512)) | (1L << (K_THAN - 512)) | (1L << (K_TIES - 512)) | (1L << (K_TLS - 512)) | (1L << (K_TOAST - 512)) | (1L << (K_TOKENIZER - 512)) | (1L << (K_TOLERANCE - 512)) | (1L << (K_TRANSACTION - 512)) | (1L << (K_TRANSFORM - 512)) | (1L << (K_TRICKLE - 512)) | (1L << (K_TRIGGER - 512)) | (1L << (K_TRUNCATE - 512)) | (1L << (K_TRUSTED - 512)) | (1L << (K_TUNING - 512)) | (1L << (K_TYPE - 512)) | (1L << (K_UDPARAMETER - 512)) | (1L << (K_UNCOMMITTED - 512)) | (1L << (K_UNCOMPRESSED - 512)) | (1L << (K_UNI - 512)) | (1L << (K_UNINDEXED - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (K_UNKNOWN - 576)) | (1L << (K_UNLIMITED - 576)) | (1L << (K_UNLISTEN - 576)) | (1L << (K_UNLOCK - 576)) | (1L << (K_UNPACKER - 576)) | (1L << (K_UNSEGMENTED - 576)) | (1L << (K_UPDATE - 576)) | (1L << (K_USAGE - 576)) | (1L << (K_VACUUM - 576)) | (1L << (K_VALIDATE - 576)) | (1L << (K_VALIDATOR - 576)) | (1L << (K_VALINDEX - 576)) | (1L << (K_VALUE - 576)) | (1L << (K_VALUES - 576)) | (1L << (K_VARYING - 576)) | (1L << (K_VERBOSE - 576)) | (1L << (K_VERTICA - 576)) | (1L << (K_VIEW - 576)) | (1L << (K_VOLATILE - 576)) | (1L << (K_WAIT - 576)) | (1L << (K_WEBHDFS_ADDRESS - 576)) | (1L << (K_WEBSERVICE_HOSTNAME - 576)) | (1L << (K_WEBSERVICE_PORT - 576)) | (1L << (K_WITHOUT - 576)) | (1L << (K_WORK - 576)) | (1L << (K_WRITE - 576)) | (1L << (K_YEAR - 576)) | (1L << (K_ZONE - 576)) | (1L << (K_UDPARAMETERS - 576)) | (1L << (K_ALLNODES - 576)) | (1L << (K_PUBLIC - 576)) | (1L << (K_DIRECTORY - 576)) | (1L << (K_ROWGROUPSIZEMB - 576)) | (1L << (K_COMPRESSION - 576)) | (1L << (K_FILESIZEMB - 576)) | (1L << (K_FILEMODE - 576)) | (1L << (K_DIRMODE - 576)) | (1L << (K_ZSTD - 576)) | (1L << (K_ROUTE - 576)) | (1L << (K_ROUTING - 576)) | (1L << (K_ESCAPE_STRING_WARNING - 576)) | (1L << (K_STANDARD_CONFORMING_STRINGS - 576)) | (1L << (K_AUTOCOMMIT - 576)) | (1L << (K_LOCALE - 576)) | (1L << (K_MULTIPLEACTIVERESULTSETS - 576)) | (1L << (K_RESOURCE_POOL - 576)) | (1L << (K_INTERVALSTYLE - 576)) | (1L << (K_PLAIN - 576)) | (1L << (K_UNITS - 576)) | (1L << (K_DATESTYLE - 576)) | (1L << (K_ISO - 576)) | (1L << (K_MDY - 576)) | (1L << (K_POSTGRES - 576)) | (1L << (K_SQL - 576)) | (1L << (K_GERMAN - 576)) | (1L << (K_DMY - 576)) | (1L << (K_TLSMODE - 576)) | (1L << (K_PREFER - 576)) | (1L << (K_INT8 - 576)) | (1L << (K_FLOAT8 - 576)) | (1L << (K_GEOMETRY - 576)) | (1L << (K_GEOGRAPHY - 576)) | (1L << (K_DATE - 576)) | (1L << (K_ADDRESS - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (K_BALANCE - 640)) | (1L << (K_GBYTYPE - 640)) | (1L << (K_HASH - 640)) | (1L << (K_PIPE - 640)) | (1L << (K_SYN_JOIN - 640)) | (1L << (K_ENABLE_WITH_CLAUSE_MATERIALIZATION - 640)) | (1L << (K_EARLY_MATERIALIZATION - 640)) | (1L << (K_SYNTACTIC_JOIN - 640)) | (1L << (K_BRANCH - 640)) | (1L << (K_DATATYPE - 640)) | (1L << (K_VERBATIM - 640)) | (1L << (K_IGNORECONST - 640)) | (1L << (K_UTYPE - 640)) | (1L << (K_JTYPE - 640)) | (1L << (K_DISTRIB - 640)) | (1L << (K_PROJS - 640)) | (1L << (K_SKIP_PROJS - 640)) | (1L << (COMMA - 640)) | (1L << (MINUS - 640)) | (1L << (STAR - 640)) | (1L << (PLUS - 640)) | (1L << (DCOLON - 640)) | (1L << (OPEN_PAREN - 640)) | (1L << (CLOSE_PAREN - 640)) | (1L << (DOT - 640)) | (1L << (UNDERSCORE - 640)) | (1L << (AMP - 640)) | (1L << (AMP_AMP - 640)) | (1L << (AMP_LT - 640)) | (1L << (BANG - 640)) | (1L << (BANG_BANG - 640)) | (1L << (BANG_EQUAL - 640)) | (1L << (EQUAL - 640)) | (1L << (EQUAL_GT - 640)) | (1L << (EQUAL2 - 640)) | (1L << (GT - 640)) | (1L << (GTE - 640)) | (1L << (LT - 640)) | (1L << (LTE - 640)) | (1L << (LT_GT - 640)) | (1L << (DIV - 640)) | (1L << (IPV4_ADDR - 640)) | (1L << (IPV6_ADDR - 640)) | (1L << (SPACE - 640)) | (1L << (COMMENT - 640)) | (1L << (LINE_COMMENT_LITERAL - 640)) | (1L << (OPEN_HINT - 640)) | (1L << (CLOSE_HINT - 640)) | (1L << (DOUBLE_QUOTE_STRING - 640)) | (1L << (WORD - 640)) | (1L << (SINGLE_QUOTE_STRING - 640)) | (1L << (FLOAT - 640)) | (1L << (REAL - 640)) | (1L << (DECIMAL - 640)) | (1L << (ANY - 640)))) != 0)) {
						{
						setState(3005);
						alias();
						}
					}

					}
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(3010);
				prepass_query();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnsContext columns() throws RecognitionException {
		ColumnsContext _localctx = new ColumnsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_columns);
		int _la;
		try {
			int _alt;
			setState(3033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3013);
				match(OPEN_PAREN);
				setState(3015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3014);
					columnReference();
					}
					break;
				}
				setState(3021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3017);
					match(COMMA);
					setState(3018);
					columnReference();
					}
					}
					setState(3023);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3024);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3025);
				columnReference();
				setState(3030);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3026);
						match(COMMA);
						setState(3027);
						columnReference();
						}
						} 
					}
					setState(3032);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Batch_queryContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public List<ElementsContext> elements() {
			return getRuleContexts(ElementsContext.class);
		}
		public ElementsContext elements(int i) {
			return getRuleContext(ElementsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Batch_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBatch_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBatch_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBatch_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Batch_queryContext batch_query() throws RecognitionException {
		Batch_queryContext _localctx = new Batch_queryContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_batch_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3035);
			match(K_SELECT);
			setState(3036);
			elements();
			setState(3037);
			match(COMMA);
			setState(3038);
			functionCall();
			setState(3039);
			match(K_OVER);
			setState(3040);
			match(OPEN_PAREN);
			setState(3041);
			match(K_PARTITION);
			setState(3042);
			match(K_BATCH);
			setState(3043);
			match(K_BY);
			setState(3044);
			elements();
			setState(3045);
			match(CLOSE_PAREN);
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(3046);
				match(K_AS);
				setState(3047);
				columns();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepass_queryContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public List<ElementsContext> elements() {
			return getRuleContexts(ElementsContext.class);
		}
		public ElementsContext elements(int i) {
			return getRuleContext(ElementsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Prepass_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepass_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPrepass_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPrepass_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPrepass_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepass_queryContext prepass_query() throws RecognitionException {
		Prepass_queryContext _localctx = new Prepass_queryContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_prepass_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3050);
			match(K_SELECT);
			setState(3051);
			elements();
			setState(3052);
			match(COMMA);
			setState(3053);
			functionCall();
			setState(3054);
			match(K_OVER);
			setState(3055);
			match(OPEN_PAREN);
			setState(3056);
			match(K_PARTITION);
			setState(3057);
			match(K_BATCH);
			setState(3058);
			match(K_BY);
			setState(3059);
			elements();
			setState(3060);
			match(CLOSE_PAREN);
			setState(3063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(3061);
				match(K_AS);
				setState(3062);
				columns();
				}
			}

			setState(3065);
			match(K_FROM);
			setState(3066);
			tableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public List<Resource_pool_paramContext> resource_pool_param() {
			return getRuleContexts(Resource_pool_paramContext.class);
		}
		public Resource_pool_paramContext resource_pool_param(int i) {
			return getRuleContext(Resource_pool_paramContext.class,i);
		}
		public Create_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_resource_pool_statementContext create_resource_pool_statement() throws RecognitionException {
		Create_resource_pool_statementContext _localctx = new Create_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_create_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3068);
			match(K_CREATE);
			setState(3069);
			match(K_RESOURCE);
			setState(3070);
			match(K_POOL);
			setState(3071);
			resourcePool();
			setState(3073); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3072);
				resource_pool_param();
				}
				}
				setState(3075); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (K_CASCADE - 193)) | (1L << (K_CPUAFFINITYMODE - 193)) | (1L << (K_CPUAFFINITYSET - 193)))) != 0) || _la==K_EXECUTIONPARALLELISM || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & ((1L << (K_MAXCONCURRENCY - 371)) | (1L << (K_MAXMEMORYSIZE - 371)) | (1L << (K_MAXQUERYMEMORYSIZE - 371)) | (1L << (K_MEMORYSIZE - 371)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)))) != 0) || _la==K_SINGLEINITIATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_role_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public Create_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_role_statementContext create_role_statement() throws RecognitionException {
		Create_role_statementContext _localctx = new Create_role_statementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_create_role_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3077);
			match(K_CREATE);
			setState(3078);
			match(K_ROLE);
			setState(3079);
			role();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routing_rule_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ROUTING() { return getToken(VSqlParser.K_ROUTING, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public RoutingRuleContext routingRule() {
			return getRuleContext(RoutingRuleContext.class,0);
		}
		public TerminalNode K_ROUTE() { return getToken(VSqlParser.K_ROUTE, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_routing_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routing_rule_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_routing_rule_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_routing_rule_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_routing_rule_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routing_rule_statementContext create_routing_rule_statement() throws RecognitionException {
		Create_routing_rule_statementContext _localctx = new Create_routing_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_create_routing_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3081);
			match(K_CREATE);
			setState(3082);
			match(K_ROUTING);
			setState(3083);
			match(K_RULE);
			setState(3084);
			routingRule();
			setState(3085);
			match(K_ROUTE);
			setState(3086);
			address();
			setState(3087);
			match(K_TO);
			setState(3088);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_AUTHORIZATION() { return getToken(VSqlParser.K_AUTHORIZATION, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_statementContext create_schema_statement() throws RecognitionException {
		Create_schema_statementContext _localctx = new Create_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_create_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3090);
			match(K_CREATE);
			setState(3091);
			match(K_SCHEMA);
			setState(3093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3092);
				ifNotExistsClause();
				}
				break;
			}
			setState(3095);
			schemaReference();
			setState(3098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTHORIZATION) {
				{
				setState(3096);
				match(K_AUTHORIZATION);
				setState(3097);
				string();
				}
			}

			setState(3102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT) {
				{
				setState(3100);
				match(K_DEFAULT);
				setState(3101);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(VSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(VSqlParser.DECIMAL, i);
		}
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public Create_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequence_statementContext create_sequence_statement() throws RecognitionException {
		Create_sequence_statementContext _localctx = new Create_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_create_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3104);
			match(K_CREATE);
			setState(3105);
			match(K_SEQUENCE);
			{
			setState(3107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(3106);
				ifNotExistsClause();
				}
				break;
			}
			setState(3109);
			sequenceReference();
			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INCREMENT) {
				{
				setState(3110);
				match(K_INCREMENT);
				setState(3111);
				match(K_BY);
				setState(3112);
				match(DECIMAL);
				}
			}

			setState(3119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				{
				setState(3115);
				match(K_MINVALUE);
				setState(3116);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3117);
				match(K_NO);
				setState(3118);
				match(K_MINVALUE);
				}
				}
				break;
			}
			setState(3125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				{
				setState(3121);
				match(K_MAXVALUE);
				setState(3122);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3123);
				match(K_NO);
				setState(3124);
				match(K_MAXVALUE);
				}
				}
				break;
			}
			setState(3130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RESTART) {
				{
				setState(3127);
				match(K_RESTART);
				setState(3128);
				match(K_WITH);
				setState(3129);
				match(DECIMAL);
				}
			}

			setState(3142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CACHE:
				{
				{
				setState(3132);
				match(K_CACHE);
				setState(3133);
				match(DECIMAL);
				}
				}
				break;
			case K_NO:
				{
				{
				setState(3134);
				match(K_NO);
				setState(3135);
				match(K_CACHE);
				}
				setState(3140);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CYCLE:
					{
					setState(3137);
					match(K_CYCLE);
					}
					break;
				case K_NO:
					{
					setState(3138);
					match(K_NO);
					setState(3139);
					match(K_CYCLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case SEMI:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Create_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_subnet_statementContext create_subnet_statement() throws RecognitionException {
		Create_subnet_statementContext _localctx = new Create_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_create_subnet_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3144);
			match(K_CREATE);
			setState(3145);
			match(K_SUBNET);
			setState(3146);
			subnet();
			setState(3147);
			match(K_WITH);
			setState(3148);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_statementContext extends ParserRuleContext {
		public Create_table_default_statementContext create_table_default_statement() {
			return getRuleContext(Create_table_default_statementContext.class,0);
		}
		public Create_table_as_statementContext create_table_as_statement() {
			return getRuleContext(Create_table_as_statementContext.class,0);
		}
		public Create_table_like_statementContext create_table_like_statement() {
			return getRuleContext(Create_table_like_statementContext.class,0);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_statementContext create_table_statement() throws RecognitionException {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_create_table_statement);
		try {
			setState(3153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				create_table_default_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3151);
				create_table_as_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3152);
				create_table_like_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_privileges_clauseContext extends ParserRuleContext {
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_INCLUDE() { return getToken(VSqlParser.K_INCLUDE, 0); }
		public TerminalNode K_EXCLUDE() { return getToken(VSqlParser.K_EXCLUDE, 0); }
		public TerminalNode K_MATERIALIZE() { return getToken(VSqlParser.K_MATERIALIZE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Schema_privileges_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privileges_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema_privileges_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema_privileges_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema_privileges_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privileges_clauseContext schema_privileges_clause() throws RecognitionException {
		Schema_privileges_clauseContext _localctx = new Schema_privileges_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_schema_privileges_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3155);
			_la = _input.LA(1);
			if ( !(_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SCHEMA) {
				{
				setState(3156);
				match(K_SCHEMA);
				}
			}

			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(3159);
				match(K_NOT);
				}
			}

			setState(3162);
			match(K_PRIVILEGES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_as_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public Create_table_as_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_as_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_as_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_as_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as_statementContext create_table_as_statement() throws RecognitionException {
		Create_table_as_statementContext _localctx = new Create_table_as_statementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_create_table_as_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164);
			match(K_CREATE);
			setState(3165);
			match(K_TABLE);
			setState(3167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(3166);
				ifNotExistsClause();
				}
				break;
			}
			setState(3169);
			tableReference();
			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3170);
				column_name_list();
				}
			}

			setState(3174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3173);
				schema_privileges_clause();
				}
			}

			setState(3176);
			match(K_AS);
			setState(3178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3177);
				hints();
				}
			}

			setState(3181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AT) {
				{
				setState(3180);
				at_epoch_clause();
				}
			}

			setState(3183);
			select_query();
			setState(3185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(3184);
				encodedBy_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Column_name_list_itemContext> column_name_list_item() {
			return getRuleContexts(Column_name_list_itemContext.class);
		}
		public Column_name_list_itemContext column_name_list_item(int i) {
			return getRuleContext(Column_name_list_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3187);
			match(OPEN_PAREN);
			setState(3188);
			column_name_list_item();
			setState(3193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3189);
				match(COMMA);
				setState(3190);
				column_name_list_item();
				}
				}
				setState(3195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3196);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_itemContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Grouped_clauseContext grouped_clause() {
			return getRuleContext(Grouped_clauseContext.class,0);
		}
		public Column_name_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_name_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_name_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_name_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_itemContext column_name_list_item() throws RecognitionException {
		Column_name_list_itemContext _localctx = new Column_name_list_itemContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_column_name_list_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3198);
			column();
			setState(3200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3199);
				encoding_clause();
				}
			}

			setState(3203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3202);
				access_rank();
				}
			}

			setState(3206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GROUPED) {
				{
				setState(3205);
				grouped_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_rankContext extends ParserRuleContext {
		public TerminalNode K_ACCESSRANK() { return getToken(VSqlParser.K_ACCESSRANK, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Access_rankContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_rank; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAccess_rank(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAccess_rank(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAccess_rank(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_rankContext access_rank() throws RecognitionException {
		Access_rankContext _localctx = new Access_rankContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_access_rank);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			match(K_ACCESSRANK);
			setState(3209);
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouped_clauseContext extends ParserRuleContext {
		public TerminalNode K_GROUPED() { return getToken(VSqlParser.K_GROUPED, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Grouped_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouped_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrouped_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrouped_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrouped_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouped_clauseContext grouped_clause() throws RecognitionException {
		Grouped_clauseContext _localctx = new Grouped_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_grouped_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3211);
			match(K_GROUPED);
			setState(3212);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_like_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<Schema_privileges_clauseContext> schema_privileges_clause() {
			return getRuleContexts(Schema_privileges_clauseContext.class);
		}
		public Schema_privileges_clauseContext schema_privileges_clause(int i) {
			return getRuleContext(Schema_privileges_clauseContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Create_table_like_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_like_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_like_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_like_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_like_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_like_statementContext create_table_like_statement() throws RecognitionException {
		Create_table_like_statementContext _localctx = new Create_table_like_statementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_create_table_like_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214);
			match(K_CREATE);
			setState(3215);
			match(K_TABLE);
			setState(3217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3216);
				ifNotExistsClause();
				}
				break;
			}
			setState(3219);
			tableReference();
			setState(3220);
			match(K_LIKE);
			setState(3221);
			tableReference();
			setState(3223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3222);
				schema_privileges_clause();
				}
				break;
			}
			setState(3226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3225);
				load_method();
				}
			}

			setState(3229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1+1:
				{
				setState(3228);
				schema_privileges_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_default_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<Table_constraintContext> table_constraint() {
			return getRuleContexts(Table_constraintContext.class);
		}
		public Table_constraintContext table_constraint(int i) {
			return getRuleContext(Table_constraintContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_table_default_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_default_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_default_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_default_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_default_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_default_statementContext create_table_default_statement() throws RecognitionException {
		Create_table_default_statementContext _localctx = new Create_table_default_statementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_create_table_default_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3231);
			match(K_CREATE);
			setState(3232);
			match(K_TABLE);
			setState(3234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(3233);
				ifNotExistsClause();
				}
				break;
			}
			setState(3236);
			tableReference();
			setState(3237);
			match(OPEN_PAREN);
			setState(3238);
			column_definition_list();
			setState(3248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3239);
				match(COMMA);
				setState(3240);
				table_constraint();
				setState(3245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3241);
					match(COMMA);
					setState(3242);
					table_constraint();
					}
					}
					setState(3247);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3250);
			match(CLOSE_PAREN);
			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3251);
				load_method();
				}
			}

			setState(3255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(3254);
				orderby_clause();
				}
			}

			setState(3258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(3257);
				segmentation_clause();
				}
			}

			setState(3261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3260);
				ksafe_clause();
				}
			}

			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(3263);
				partition_clause();
				}
			}

			setState(3267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3266);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TerminalNode K_PRIMARY() { return getToken(VSqlParser.K_PRIMARY, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public TerminalNode K_UNIQUE() { return getToken(VSqlParser.K_UNIQUE, 0); }
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FOREIGN() { return getToken(VSqlParser.K_FOREIGN, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3269);
			match(K_CONSTRAINT);
			setState(3270);
			constraint();
			setState(3297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_PRIMARY:
				{
				{
				setState(3271);
				match(K_PRIMARY);
				setState(3272);
				match(K_KEY);
				setState(3273);
				columns();
				setState(3275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLE || _la==K_ENABLE) {
					{
					setState(3274);
					enableOrDisable();
					}
				}

				}
				}
				break;
			case K_FOREIGN:
				{
				{
				{
				setState(3277);
				match(K_FOREIGN);
				setState(3278);
				match(K_KEY);
				setState(3279);
				columns();
				setState(3280);
				match(K_REFERENCES);
				setState(3281);
				tableReference();
				setState(3283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3282);
					columns();
					}
					break;
				}
				}
				}
				}
				break;
			case K_UNIQUE:
				{
				{
				setState(3285);
				match(K_UNIQUE);
				setState(3286);
				columns();
				setState(3288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLE || _la==K_ENABLE) {
					{
					setState(3287);
					enableOrDisable();
					}
				}

				}
				}
				break;
			case K_CHECK:
				{
				{
				setState(3290);
				match(K_CHECK);
				setState(3291);
				match(OPEN_PAREN);
				setState(3292);
				expression();
				setState(3293);
				match(CLOSE_PAREN);
				setState(3295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLE || _la==K_ENABLE) {
					{
					setState(3294);
					enableOrDisable();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definition_listContext extends ParserRuleContext {
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definition_listContext column_definition_list() throws RecognitionException {
		Column_definition_listContext _localctx = new Column_definition_listContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_column_definition_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			column_definition();
			setState(3304);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3300);
					match(COMMA);
					setState(3301);
					column_definition();
					}
					} 
				}
				setState(3306);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3307);
			column();
			setState(3308);
			dataTypes();
			setState(3312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (K_NOT - 85)) | (1L << (K_NULL - 85)) | (1L << (K_PRIMARY - 85)) | (1L << (K_REFERENCES - 85)) | (1L << (K_UNIQUE - 85)))) != 0) || _la==K_AUTO_INCREMENT || _la==K_IDENTITY || _la==K_SET) {
				{
				{
				setState(3309);
				column_constraint();
				}
				}
				setState(3314);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3315);
				encoding_clause();
				}
			}

			setState(3319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3318);
				access_rank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public TerminalNode K_AUTO_INCREMENT() { return getToken(VSqlParser.K_AUTO_INCREMENT, 0); }
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode K_PRIMARY() { return getToken(VSqlParser.K_PRIMARY, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_UNIQUE() { return getToken(VSqlParser.K_UNIQUE, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_column_constraint);
		int _la;
		try {
			setState(3373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3321);
				_la = _input.LA(1);
				if ( !(_la==K_AUTO_INCREMENT || _la==K_IDENTITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3322);
					match(OPEN_PAREN);
					setState(3323);
					value();
					setState(3328);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3324);
						match(COMMA);
						setState(3325);
						value();
						}
						}
						setState(3330);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3331);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3335);
				match(K_CONSTRAINT);
				setState(3336);
				id();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3337);
				match(K_CHECK);
				setState(3338);
				match(OPEN_PAREN);
				setState(3339);
				expression();
				setState(3340);
				match(CLOSE_PAREN);
				setState(3342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLE || _la==K_ENABLE) {
					{
					setState(3341);
					enableOrDisable();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					{
					setState(3344);
					match(K_DEFAULT);
					setState(3345);
					match(K_USING);
					setState(3346);
					expression();
					}
					}
					break;
				case 2:
					{
					{
					setState(3347);
					match(K_SET);
					setState(3348);
					match(K_USING);
					setState(3349);
					expression();
					}
					}
					break;
				case 3:
					{
					{
					setState(3350);
					match(K_DEFAULT);
					setState(3351);
					match(K_USING);
					setState(3352);
					expression();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(3355);
				nullOrNotNull();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3365);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_PRIMARY:
					{
					{
					setState(3356);
					match(K_PRIMARY);
					setState(3357);
					match(K_KEY);
					setState(3359);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_DISABLE || _la==K_ENABLE) {
						{
						setState(3358);
						enableOrDisable();
						}
					}

					}
					}
					break;
				case K_REFERENCES:
					{
					{
					setState(3361);
					match(K_REFERENCES);
					setState(3362);
					tableReference();
					setState(3363);
					columns();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(3367);
				match(K_UNIQUE);
				setState(3369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLE || _la==K_ENABLE) {
					{
					setState(3368);
					enableOrDisable();
					}
				}

				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(3371);
				match(K_DEFAULT);
				setState(3372);
				expression();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_methodContext extends ParserRuleContext {
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_TRICKLE() { return getToken(VSqlParser.K_TRICKLE, 0); }
		public Load_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLoad_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLoad_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLoad_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_methodContext load_method() throws RecognitionException {
		Load_methodContext _localctx = new Load_methodContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_load_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3375);
			_la = _input.LA(1);
			if ( !(_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segmentation_clauseContext extends ParserRuleContext {
		public TerminalNode K_UNSEGMENTED() { return getToken(VSqlParser.K_UNSEGMENTED, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public TerminalNode K_SEGMENTED() { return getToken(VSqlParser.K_SEGMENTED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Segmentation_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segmentation_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSegmentation_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSegmentation_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSegmentation_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Segmentation_clauseContext segmentation_clause() throws RecognitionException {
		Segmentation_clauseContext _localctx = new Segmentation_clauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_segmentation_clause);
		int _la;
		try {
			setState(3403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_UNSEGMENTED:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3377);
				match(K_UNSEGMENTED);
				setState(3382);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_NODE:
					{
					{
					setState(3378);
					match(K_NODE);
					setState(3379);
					node();
					}
					}
					break;
				case K_ALL:
					{
					{
					setState(3380);
					match(K_ALL);
					setState(3381);
					match(K_NODES);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_SEGMENTED:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3384);
				match(K_SEGMENTED);
				setState(3385);
				match(K_BY);
				setState(3386);
				expression();
				setState(3401);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ALL:
					{
					{
					setState(3387);
					match(K_ALL);
					setState(3388);
					match(K_NODES);
					setState(3390);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_OFFSET) {
						{
						setState(3389);
						offset_clause();
						}
					}

					}
					}
					break;
				case K_NODES:
					{
					{
					setState(3392);
					match(K_NODES);
					setState(3393);
					node();
					setState(3398);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3394);
						match(COMMA);
						setState(3395);
						node();
						}
						}
						setState(3400);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_temporary_table_statementContext extends ParserRuleContext {
		public Create_temporary_table_with_def_statementContext create_temporary_table_with_def_statement() {
			return getRuleContext(Create_temporary_table_with_def_statementContext.class,0);
		}
		public Create_temporary_table_from_table_statementContext create_temporary_table_from_table_statement() {
			return getRuleContext(Create_temporary_table_from_table_statementContext.class,0);
		}
		public Create_temporary_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_statementContext create_temporary_table_statement() throws RecognitionException {
		Create_temporary_table_statementContext _localctx = new Create_temporary_table_statementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_create_temporary_table_statement);
		try {
			setState(3407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3405);
				create_temporary_table_with_def_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3406);
				create_temporary_table_from_table_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_temporary_table_with_def_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public Create_temporary_table_with_def_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_with_def_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_with_def_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_with_def_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_with_def_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_with_def_statementContext create_temporary_table_with_def_statement() throws RecognitionException {
		Create_temporary_table_with_def_statementContext _localctx = new Create_temporary_table_with_def_statementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_create_temporary_table_with_def_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3409);
			match(K_CREATE);
			setState(3411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GLOBAL || _la==K_LOCAL) {
				{
				setState(3410);
				_la = _input.LA(1);
				if ( !(_la==K_GLOBAL || _la==K_LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3413);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3414);
			match(K_TABLE);
			setState(3416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3415);
				ifNotExistsClause();
				}
				break;
			}
			setState(3418);
			tableReference();
			setState(3419);
			match(OPEN_PAREN);
			setState(3420);
			column_definition_list();
			setState(3421);
			match(CLOSE_PAREN);
			setState(3423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CONSTRAINT) {
				{
				setState(3422);
				table_constraint();
				}
			}

			setState(3429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ON) {
				{
				setState(3425);
				match(K_ON);
				setState(3426);
				match(K_COMMIT);
				setState(3427);
				_la = _input.LA(1);
				if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3428);
				match(K_ROWS);
				}
			}

			setState(3432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3431);
				load_method();
				}
			}

			setState(3436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(3434);
				match(K_NO);
				setState(3435);
				match(K_PROJECTION);
				}
			}

			setState(3439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(3438);
				orderby_clause();
				}
			}

			setState(3442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(3441);
				segmentation_clause();
				}
			}

			setState(3445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3444);
				ksafe_clause();
				}
			}

			setState(3448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3447);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_temporary_table_from_table_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public Create_temporary_table_from_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_from_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_from_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_from_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_from_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_from_table_statementContext create_temporary_table_from_table_statement() throws RecognitionException {
		Create_temporary_table_from_table_statementContext _localctx = new Create_temporary_table_from_table_statementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_create_temporary_table_from_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3450);
			match(K_CREATE);
			setState(3451);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3452);
			match(K_TABLE);
			setState(3454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				setState(3453);
				ifNotExistsClause();
				}
				break;
			}
			setState(3456);
			tableReference();
			setState(3458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3457);
				column_name_list();
				}
			}

			setState(3464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ON) {
				{
				setState(3460);
				match(K_ON);
				setState(3461);
				match(K_COMMIT);
				setState(3462);
				_la = _input.LA(1);
				if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3463);
				match(K_ROWS);
				}
			}

			setState(3467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3466);
				load_method();
				}
			}

			setState(3469);
			match(K_AS);
			setState(3471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3470);
				hints();
				}
			}

			setState(3474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AT) {
				{
				setState(3473);
				at_epoch_clause();
				}
			}

			setState(3476);
			select_query();
			setState(3478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(3477);
				encodedBy_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodedBy_clauseContext extends ParserRuleContext {
		public TerminalNode K_ENCODED() { return getToken(VSqlParser.K_ENCODED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<Column_refContext> column_ref() {
			return getRuleContexts(Column_refContext.class);
		}
		public Column_refContext column_ref(int i) {
			return getRuleContext(Column_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public EncodedBy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encodedBy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEncodedBy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEncodedBy_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEncodedBy_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodedBy_clauseContext encodedBy_clause() throws RecognitionException {
		EncodedBy_clauseContext _localctx = new EncodedBy_clauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_encodedBy_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			match(K_ENCODED);
			setState(3481);
			match(K_BY);
			setState(3482);
			column_ref();
			setState(3487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3483);
				match(COMMA);
				setState(3484);
				column_ref();
				}
				}
				setState(3489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_refContext extends ParserRuleContext {
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Column_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_refContext column_ref() throws RecognitionException {
		Column_refContext _localctx = new Column_refContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_column_ref);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3490);
			columnReference();
			setState(3492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3491);
				access_rank();
				}
			}

			setState(3495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3494);
				encoding_clause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_text_index_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TEXT() { return getToken(VSqlParser.K_TEXT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TxtIndexReferenceContext txtIndexReference() {
			return getRuleContext(TxtIndexReferenceContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<DataTypesContext> dataTypes() {
			return getRuleContexts(DataTypesContext.class);
		}
		public DataTypesContext dataTypes(int i) {
			return getRuleContext(DataTypesContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_STEMMER() { return getToken(VSqlParser.K_STEMMER, 0); }
		public TerminalNode K_TOKENIZER() { return getToken(VSqlParser.K_TOKENIZER, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public Create_text_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_text_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_text_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_text_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_index_statementContext create_text_index_statement() throws RecognitionException {
		Create_text_index_statementContext _localctx = new Create_text_index_statementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_create_text_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3497);
			match(K_CREATE);
			setState(3498);
			match(K_TEXT);
			setState(3499);
			match(K_INDEX);
			setState(3500);
			txtIndexReference();
			setState(3501);
			match(K_ON);
			setState(3502);
			tableReference();
			setState(3503);
			match(OPEN_PAREN);
			setState(3504);
			id();
			setState(3505);
			match(COMMA);
			setState(3506);
			dataTypes();
			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3507);
				match(COMMA);
				setState(3508);
				columns();
				}
			}

			setState(3511);
			match(CLOSE_PAREN);
			setState(3521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STEMMER) {
				{
				setState(3512);
				match(K_STEMMER);
				setState(3519);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3513);
					id();
					{
					setState(3514);
					match(OPEN_PAREN);
					setState(3515);
					dataTypes();
					setState(3516);
					match(CLOSE_PAREN);
					}
					}
					break;
				case 2:
					{
					setState(3518);
					match(K_NONE);
					}
					break;
				}
				}
			}

			setState(3529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TOKENIZER) {
				{
				setState(3523);
				match(K_TOKENIZER);
				setState(3524);
				id();
				{
				setState(3525);
				match(OPEN_PAREN);
				setState(3526);
				dataTypes();
				setState(3527);
				match(CLOSE_PAREN);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public List<User_paramsContext> user_params() {
			return getRuleContexts(User_paramsContext.class);
		}
		public User_paramsContext user_params(int i) {
			return getRuleContext(User_paramsContext.class,i);
		}
		public Create_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_statementContext create_user_statement() throws RecognitionException {
		Create_user_statementContext _localctx = new Create_user_statementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_create_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			match(K_CREATE);
			setState(3532);
			match(K_USER);
			setState(3533);
			user();
			setState(3537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_DEFAULT || _la==K_ACCOUNT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (K_GRACEPERIOD - 306)) | (1L << (K_IDENTIFIED - 306)) | (1L << (K_IDLESESSIONTIMEOUT - 306)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (K_MAXCONNECTIONS - 373)) | (1L << (K_MEMORYCAP - 373)) | (1L << (K_PASSWORD - 373)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_RESOURCE - 462)) | (1L << (K_RUNTIMECAP - 462)) | (1L << (K_SEARCH_PATH - 462)) | (1L << (K_SECURITY_ALGORITHM - 462)))) != 0) || _la==K_TEMPSPACECAP) {
				{
				{
				setState(3534);
				user_params();
				}
				}
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_view_statementContext create_view_statement() throws RecognitionException {
		Create_view_statementContext _localctx = new Create_view_statementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_create_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3540);
			match(K_CREATE);
			setState(3543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(3541);
				match(K_OR);
				setState(3542);
				match(K_REPLACE);
				}
			}

			setState(3545);
			match(K_VIEW);
			setState(3546);
			viewReference();
			setState(3547);
			columns();
			setState(3549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3548);
				schema_privileges_clause();
				}
			}

			setState(3551);
			match(K_AS);
			setState(3552);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3554);
			match(K_DELETE);
			setState(3556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3555);
				hints();
				}
			}

			setState(3558);
			match(K_FROM);
			setState(3559);
			tableReference();
			setState(3561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WHERE) {
				{
				setState(3560);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Directed_query_statements_statementContext extends ParserRuleContext {
		public Activate_directed_query_statementContext activate_directed_query_statement() {
			return getRuleContext(Activate_directed_query_statementContext.class,0);
		}
		public Deactivate_directed_query_statementContext deactivate_directed_query_statement() {
			return getRuleContext(Deactivate_directed_query_statementContext.class,0);
		}
		public Drop_directed_query_statementContext drop_directed_query_statement() {
			return getRuleContext(Drop_directed_query_statementContext.class,0);
		}
		public Get_directed_query_statementContext get_directed_query_statement() {
			return getRuleContext(Get_directed_query_statementContext.class,0);
		}
		public Save_queryContext save_query() {
			return getRuleContext(Save_queryContext.class,0);
		}
		public Directed_query_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directed_query_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDirected_query_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDirected_query_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDirected_query_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Directed_query_statements_statementContext directed_query_statements_statement() throws RecognitionException {
		Directed_query_statements_statementContext _localctx = new Directed_query_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_directed_query_statements_statement);
		try {
			setState(3569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3563);
				activate_directed_query_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3564);
				activate_directed_query_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3565);
				deactivate_directed_query_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3566);
				drop_directed_query_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3567);
				get_directed_query_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3568);
				save_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Activate_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_ACTIVATE() { return getToken(VSqlParser.K_ACTIVATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Activate_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_activate_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterActivate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitActivate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitActivate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Activate_directed_query_statementContext activate_directed_query_statement() throws RecognitionException {
		Activate_directed_query_statementContext _localctx = new Activate_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_activate_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3571);
			match(K_ACTIVATE);
			setState(3572);
			match(K_DIRECTED);
			setState(3573);
			match(K_QUERY);
			setState(3574);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode K_OPT() { return getToken(VSqlParser.K_OPT, 0); }
		public TerminalNode K_OPTIMIZER() { return getToken(VSqlParser.K_OPTIMIZER, 0); }
		public TerminalNode K_CUSTOM() { return getToken(VSqlParser.K_CUSTOM, 0); }
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Create_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_directed_query_statementContext create_directed_query_statement() throws RecognitionException {
		Create_directed_query_statementContext _localctx = new Create_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_create_directed_query_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3576);
			match(K_CREATE);
			setState(3577);
			match(K_DIRECTED);
			setState(3578);
			match(K_QUERY);
			setState(3579);
			_la = _input.LA(1);
			if ( !(_la==K_CUSTOM || _la==K_OPT || _la==K_OPTIMIZER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3580);
			id();
			setState(3583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3581);
				match(K_COMMENT);
				setState(3582);
				string();
				}
				break;
			}
			setState(3585);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deactivate_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_DEACTIVATE() { return getToken(VSqlParser.K_DEACTIVATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public Deactivate_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deactivate_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDeactivate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDeactivate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDeactivate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deactivate_directed_query_statementContext deactivate_directed_query_statement() throws RecognitionException {
		Deactivate_directed_query_statementContext _localctx = new Deactivate_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_deactivate_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(K_DEACTIVATE);
			setState(3588);
			match(K_DIRECTED);
			setState(3589);
			match(K_QUERY);
			setState(3592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(3590);
				id();
				}
				break;
			case 2:
				{
				setState(3591);
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_directed_query_statementContext drop_directed_query_statement() throws RecognitionException {
		Drop_directed_query_statementContext _localctx = new Drop_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			match(K_DROP);
			setState(3595);
			match(K_DIRECTED);
			setState(3596);
			match(K_QUERY);
			setState(3597);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_GET() { return getToken(VSqlParser.K_GET, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public Get_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGet_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGet_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGet_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_directed_query_statementContext get_directed_query_statement() throws RecognitionException {
		Get_directed_query_statementContext _localctx = new Get_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_get_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			match(K_GET);
			setState(3600);
			match(K_DIRECTED);
			setState(3601);
			match(K_QUERY);
			setState(3602);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Save_queryContext extends ParserRuleContext {
		public TerminalNode K_SAVE() { return getToken(VSqlParser.K_SAVE, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public Save_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_save_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSave_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSave_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSave_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Save_queryContext save_query() throws RecognitionException {
		Save_queryContext _localctx = new Save_queryContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_save_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3604);
			match(K_SAVE);
			setState(3605);
			match(K_QUERY);
			setState(3606);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_statementContext extends ParserRuleContext {
		public TerminalNode K_DISCONNECT() { return getToken(VSqlParser.K_DISCONNECT, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public Disconnect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDisconnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDisconnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDisconnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_statementContext disconnect_statement() throws RecognitionException {
		Disconnect_statementContext _localctx = new Disconnect_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_disconnect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			match(K_DISCONNECT);
			setState(3609);
			dbname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Drop_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_access_policy_statementContext drop_access_policy_statement() throws RecognitionException {
		Drop_access_policy_statementContext _localctx = new Drop_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_drop_access_policy_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			match(K_DROP);
			setState(3612);
			match(K_ACCESS);
			setState(3613);
			match(K_POLICY);
			setState(3614);
			match(K_ON);
			setState(3615);
			tableReference();
			setState(3616);
			match(K_FOR);
			setState(3620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_COLUMN:
				{
				setState(3617);
				match(K_COLUMN);
				setState(3618);
				column();
				}
				break;
			case K_ROWS:
				{
				setState(3619);
				match(K_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregate_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_aggregate_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_aggregate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_aggregate_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_aggregate_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregate_function_statementContext drop_aggregate_function_statement() throws RecognitionException {
		Drop_aggregate_function_statementContext _localctx = new Drop_aggregate_function_statementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_drop_aggregate_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3622);
			match(K_DROP);
			setState(3623);
			match(K_AGGREGATE);
			setState(3624);
			match(K_FUNCTION);
			setState(3626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3625);
				ifNotExistsClause();
				}
				break;
			}
			setState(3628);
			functionReference();
			setState(3629);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_authentication_statementContext drop_authentication_statement() throws RecognitionException {
		Drop_authentication_statementContext _localctx = new Drop_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_drop_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			match(K_DROP);
			setState(3632);
			match(K_AUTHENTICATION);
			setState(3634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3633);
				ifNotExistsClause();
				}
				break;
			}
			setState(3636);
			auth_method_name();
			setState(3638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3637);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_branch_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_BRANCH() { return getToken(VSqlParser.K_BRANCH, 0); }
		public List<Branch_identifierContext> branch_identifier() {
			return getRuleContexts(Branch_identifierContext.class);
		}
		public Branch_identifierContext branch_identifier(int i) {
			return getRuleContext(Branch_identifierContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_branch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_branch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_branch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_branch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_branch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_branch_statementContext drop_branch_statement() throws RecognitionException {
		Drop_branch_statementContext _localctx = new Drop_branch_statementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_branch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			match(K_DROP);
			setState(3641);
			match(K_BRANCH);
			setState(3643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3642);
				ifNotExistsClause();
				}
				break;
			}
			{
			setState(3645);
			branch_identifier();
			}
			setState(3650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3646);
				match(COMMA);
				setState(3647);
				branch_identifier();
				}
				}
				setState(3652);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3653);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public FaultGroupContext faultGroup() {
			return getRuleContext(FaultGroupContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fault_group_statementContext drop_fault_group_statement() throws RecognitionException {
		Drop_fault_group_statementContext _localctx = new Drop_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_drop_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3656);
			match(K_DROP);
			setState(3657);
			match(K_FAULT);
			setState(3658);
			match(K_GROUP);
			setState(3660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3659);
				ifNotExistsClause();
				}
				break;
			}
			setState(3662);
			faultGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_function_statementContext drop_function_statement() throws RecognitionException {
		Drop_function_statementContext _localctx = new Drop_function_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3664);
			match(K_DROP);
			setState(3665);
			match(K_FUNCTION);
			setState(3667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3666);
				ifNotExistsClause();
				}
				break;
			}
			setState(3669);
			functionReference();
			setState(3670);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_source_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceReferenceContext sourceReference() {
			return getRuleContext(SourceReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_source_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_source_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_source_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_source_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_source_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_source_statementContext drop_source_statement() throws RecognitionException {
		Drop_source_statementContext _localctx = new Drop_source_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_source_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			match(K_DROP);
			setState(3673);
			match(K_SOURCE);
			setState(3674);
			sourceReference();
			setState(3675);
			match(OPEN_PAREN);
			setState(3676);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_filter_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_filter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_filter_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_filter_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_filter_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_filter_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_filter_statementContext drop_filter_statement() throws RecognitionException {
		Drop_filter_statementContext _localctx = new Drop_filter_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_filter_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3678);
			match(K_DROP);
			setState(3679);
			match(K_FILTER);
			setState(3680);
			filterReference();
			setState(3681);
			match(OPEN_PAREN);
			setState(3682);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_parser_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_parser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_parser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_parser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_parser_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_parser_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_parser_statementContext drop_parser_statement() throws RecognitionException {
		Drop_parser_statementContext _localctx = new Drop_parser_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_drop_parser_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3684);
			match(K_DROP);
			setState(3685);
			match(K_PARSER);
			setState(3686);
			parserReference();
			setState(3687);
			match(OPEN_PAREN);
			setState(3688);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_model_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Drop_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_model_statementContext drop_model_statement() throws RecognitionException {
		Drop_model_statementContext _localctx = new Drop_model_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_drop_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			match(K_DROP);
			setState(3691);
			match(K_MODEL);
			setState(3693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(3692);
				ifNotExistsClause();
				}
				break;
			}
			setState(3695);
			modelReference();
			setState(3700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3696);
				match(COMMA);
				setState(3697);
				modelReference();
				}
				}
				setState(3702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_library_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_library_statementContext drop_library_statement() throws RecognitionException {
		Drop_library_statementContext _localctx = new Drop_library_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_drop_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3703);
			match(K_DROP);
			setState(3704);
			match(K_LIBRARY);
			setState(3706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3705);
				ifNotExistsClause();
				}
				break;
			}
			setState(3708);
			libraryReference();
			setState(3710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3709);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_load_balance_group_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_BALANCE() { return getToken(VSqlParser.K_BALANCE, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public Lb_groupContext lb_group() {
			return getRuleContext(Lb_groupContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_load_balance_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_load_balance_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_load_balance_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_load_balance_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_load_balance_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_load_balance_group_statementContext drop_load_balance_group_statement() throws RecognitionException {
		Drop_load_balance_group_statementContext _localctx = new Drop_load_balance_group_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_drop_load_balance_group_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3712);
			match(K_DROP);
			setState(3713);
			match(K_LOAD);
			setState(3714);
			match(K_BALANCE);
			setState(3715);
			match(K_GROUP);
			setState(3716);
			lb_group();
			setState(3718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3717);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_network_address_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public Network_addressContext network_address() {
			return getRuleContext(Network_addressContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_network_address_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_address_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_network_address_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_network_address_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_network_address_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_address_statementContext drop_network_address_statement() throws RecognitionException {
		Drop_network_address_statementContext _localctx = new Drop_network_address_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_drop_network_address_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			match(K_DROP);
			setState(3721);
			match(K_LOAD);
			setState(3722);
			match(K_NETWORK);
			setState(3723);
			match(K_ADDRESS);
			setState(3724);
			network_address();
			setState(3726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3725);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_interface_statementContext drop_network_interface_statement() throws RecognitionException {
		Drop_network_interface_statementContext _localctx = new Drop_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_drop_network_interface_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3728);
			match(K_DROP);
			setState(3729);
			match(K_NETWORK);
			setState(3730);
			match(K_INTERFACE);
			setState(3732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3731);
				ifNotExistsClause();
				}
				break;
			}
			setState(3734);
			network_interface();
			setState(3736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3735);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_notifier_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_notifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_notifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_notifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_notifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_notifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_notifier_statementContext drop_notifier_statement() throws RecognitionException {
		Drop_notifier_statementContext _localctx = new Drop_notifier_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_drop_notifier_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3738);
			match(K_DROP);
			setState(3739);
			match(K_NOTIFIER);
			setState(3741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3740);
				ifNotExistsClause();
				}
				break;
			}
			setState(3743);
			notifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedure_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedure_statementContext drop_procedure_statement() throws RecognitionException {
		Drop_procedure_statementContext _localctx = new Drop_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_drop_procedure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3745);
			match(K_DROP);
			setState(3746);
			match(K_PROCEDURE);
			setState(3748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3747);
				ifNotExistsClause();
				}
				break;
			}
			setState(3750);
			procedureReference();
			setState(3751);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public List<ProfileContext> profile() {
			return getRuleContexts(ProfileContext.class);
		}
		public ProfileContext profile(int i) {
			return getRuleContext(ProfileContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_profile_statementContext drop_profile_statement() throws RecognitionException {
		Drop_profile_statementContext _localctx = new Drop_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_drop_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			match(K_DROP);
			setState(3754);
			match(K_PROFILE);
			setState(3756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3755);
				ifNotExistsClause();
				}
				break;
			}
			setState(3758);
			profile();
			setState(3763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3759);
				match(COMMA);
				setState(3760);
				profile();
				}
				}
				setState(3765);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3766);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public Drop_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_projection_statementContext drop_projection_statement() throws RecognitionException {
		Drop_projection_statementContext _localctx = new Drop_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_drop_projection_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3769);
			match(K_DROP);
			setState(3770);
			match(K_PROJECTION);
			setState(3772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3771);
				ifNotExistsClause();
				}
				break;
			}
			setState(3774);
			projectionReference();
			setState(3779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3775);
				match(COMMA);
				setState(3776);
				projectionReference();
				}
				}
				setState(3781);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE || _la==K_RESTRICT) {
				{
				setState(3782);
				_la = _input.LA(1);
				if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public Drop_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_resource_pool_statementContext drop_resource_pool_statement() throws RecognitionException {
		Drop_resource_pool_statementContext _localctx = new Drop_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_drop_resource_pool_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			match(K_DROP);
			setState(3786);
			match(K_RESOURCE);
			setState(3787);
			match(K_POOL);
			setState(3788);
			resourcePool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_role_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_role_statementContext drop_role_statement() throws RecognitionException {
		Drop_role_statementContext _localctx = new Drop_role_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_drop_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(K_DROP);
			setState(3791);
			match(K_ROLE);
			setState(3793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(3792);
				ifNotExistsClause();
				}
				break;
			}
			setState(3795);
			role();
			setState(3800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3796);
				match(COMMA);
				setState(3797);
				role();
				}
				}
				setState(3802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3803);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routing_rule_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ROUTING() { return getToken(VSqlParser.K_ROUTING, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public RoutingRuleContext routingRule() {
			return getRuleContext(RoutingRuleContext.class,0);
		}
		public Drop_routing_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_routing_rule_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_routing_rule_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_routing_rule_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_routing_rule_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_routing_rule_statementContext drop_routing_rule_statement() throws RecognitionException {
		Drop_routing_rule_statementContext _localctx = new Drop_routing_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_drop_routing_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3806);
			match(K_DROP);
			setState(3807);
			match(K_ROUTING);
			setState(3808);
			match(K_RULE);
			setState(3809);
			routingRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_statementContext drop_schema_statement() throws RecognitionException {
		Drop_schema_statementContext _localctx = new Drop_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_drop_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3811);
			match(K_DROP);
			setState(3812);
			match(K_SCHEMA);
			setState(3814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3813);
				ifNotExistsClause();
				}
				break;
			}
			setState(3816);
			schemaReference();
			setState(3821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3817);
				match(COMMA);
				setState(3818);
				schemaReference();
				}
				}
				setState(3823);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3824);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public Drop_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequence_statementContext drop_sequence_statement() throws RecognitionException {
		Drop_sequence_statementContext _localctx = new Drop_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_drop_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			match(K_DROP);
			setState(3828);
			match(K_SEQUENCE);
			setState(3830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(3829);
				ifNotExistsClause();
				}
				break;
			}
			setState(3832);
			sequenceReference();
			setState(3837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3833);
				match(COMMA);
				setState(3834);
				sequenceReference();
				}
				}
				setState(3839);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE || _la==K_RESTRICT) {
				{
				setState(3840);
				_la = _input.LA(1);
				if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_subnet_statementContext drop_subnet_statement() throws RecognitionException {
		Drop_subnet_statementContext _localctx = new Drop_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_drop_subnet_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3843);
			match(K_DROP);
			setState(3844);
			match(K_SUBNET);
			setState(3846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3845);
				ifNotExistsClause();
				}
				break;
			}
			setState(3848);
			subnet();
			setState(3850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3849);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_drop_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3852);
			match(K_DROP);
			setState(3853);
			match(K_TABLE);
			setState(3855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(3854);
				ifNotExistsClause();
				}
				break;
			}
			setState(3857);
			tableReference();
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3858);
				match(COMMA);
				setState(3859);
				tableReference();
				}
				}
				setState(3864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3865);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_text_index_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TEXT() { return getToken(VSqlParser.K_TEXT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TxtIndexReferenceContext txtIndexReference() {
			return getRuleContext(TxtIndexReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_text_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_text_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_text_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_text_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_index_statementContext drop_text_index_statement() throws RecognitionException {
		Drop_text_index_statementContext _localctx = new Drop_text_index_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_drop_text_index_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			match(K_DROP);
			setState(3869);
			match(K_TEXT);
			setState(3870);
			match(K_INDEX);
			setState(3872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(3871);
				ifNotExistsClause();
				}
				break;
			}
			setState(3874);
			txtIndexReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_transform_function_statementContext drop_transform_function_statement() throws RecognitionException {
		Drop_transform_function_statementContext _localctx = new Drop_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_drop_transform_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3876);
			match(K_DROP);
			setState(3877);
			match(K_TRANSFORM);
			setState(3878);
			match(K_FUNCTION);
			setState(3880);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(3879);
				ifNotExistsClause();
				}
				break;
			}
			setState(3882);
			functionReference();
			setState(3883);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_user_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_statementContext drop_user_statement() throws RecognitionException {
		Drop_user_statementContext _localctx = new Drop_user_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_drop_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			match(K_DROP);
			setState(3886);
			match(K_USER);
			setState(3888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(3887);
				ifNotExistsClause();
				}
				break;
			}
			setState(3890);
			user();
			setState(3895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3891);
				match(COMMA);
				setState(3892);
				user();
				}
				}
				setState(3897);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3898);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_view_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public List<ViewReferenceContext> viewReference() {
			return getRuleContexts(ViewReferenceContext.class);
		}
		public ViewReferenceContext viewReference(int i) {
			return getRuleContext(ViewReferenceContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_statementContext drop_view_statement() throws RecognitionException {
		Drop_view_statementContext _localctx = new Drop_view_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_drop_view_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901);
			match(K_DROP);
			setState(3902);
			match(K_VIEW);
			setState(3904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(3903);
				ifNotExistsClause();
				}
				break;
			}
			setState(3906);
			viewReference();
			{
			setState(3907);
			match(COMMA);
			setState(3908);
			viewReference();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_statementContext extends ParserRuleContext {
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public End_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnd_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnd_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnd_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_statementContext end_statement() throws RecognitionException {
		End_statementContext _localctx = new End_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_end_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3910);
			match(K_END);
			setState(3912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(3911);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPLAIN() { return getToken(VSqlParser.K_EXPLAIN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_VERBOSE() { return getToken(VSqlParser.K_VERBOSE, 0); }
		public TerminalNode K_JSON() { return getToken(VSqlParser.K_JSON, 0); }
		public TerminalNode K_ANNOTATED() { return getToken(VSqlParser.K_ANNOTATED, 0); }
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3914);
			match(K_EXPLAIN);
			setState(3916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3915);
				hints();
				}
			}

			setState(3919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ANNOTATED || _la==K_JSON || _la==K_LOCAL || _la==K_VERBOSE) {
				{
				setState(3918);
				_la = _input.LA(1);
				if ( !(_la==K_ANNOTATED || _la==K_JSON || _la==K_LOCAL || _la==K_VERBOSE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3921);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Export_to_parquet_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_DIRECTORY() { return getToken(VSqlParser.K_DIRECTORY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(VSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(VSqlParser.EQUAL, i);
		}
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_COMPRESSION() { return getToken(VSqlParser.K_COMPRESSION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_ROWGROUPSIZEMB() { return getToken(VSqlParser.K_ROWGROUPSIZEMB, 0); }
		public TerminalNode K_FILESIZEMB() { return getToken(VSqlParser.K_FILESIZEMB, 0); }
		public TerminalNode K_FILEMODE() { return getToken(VSqlParser.K_FILEMODE, 0); }
		public TerminalNode K_DIRMODE() { return getToken(VSqlParser.K_DIRMODE, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Export_to_parquet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_export_to_parquet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExport_to_parquet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExport_to_parquet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExport_to_parquet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Export_to_parquet_statementContext export_to_parquet_statement() throws RecognitionException {
		Export_to_parquet_statementContext _localctx = new Export_to_parquet_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_export_to_parquet_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3923);
			match(K_EXPORT);
			setState(3924);
			match(K_TO);
			setState(3925);
			match(K_PARQUET);
			setState(3926);
			match(OPEN_PAREN);
			setState(3927);
			match(K_DIRECTORY);
			setState(3928);
			match(EQUAL);
			setState(3929);
			path();
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(3930);
				match(COMMA);
				setState(3931);
				match(K_COMPRESSION);
				setState(3932);
				match(EQUAL);
				setState(3933);
				string();
				}
				break;
			}
			setState(3940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(3936);
				match(COMMA);
				setState(3937);
				match(K_ROWGROUPSIZEMB);
				setState(3938);
				match(EQUAL);
				setState(3939);
				string();
				}
				break;
			}
			setState(3946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(3942);
				match(COMMA);
				setState(3943);
				match(K_FILESIZEMB);
				setState(3944);
				match(EQUAL);
				setState(3945);
				string();
				}
				break;
			}
			setState(3952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(3948);
				match(COMMA);
				setState(3949);
				match(K_FILEMODE);
				setState(3950);
				match(EQUAL);
				setState(3951);
				string();
				}
				break;
			}
			setState(3958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3954);
				match(COMMA);
				setState(3955);
				match(K_DIRMODE);
				setState(3956);
				match(EQUAL);
				setState(3957);
				string();
				}
			}

			setState(3960);
			match(CLOSE_PAREN);
			setState(3962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OVER) {
				{
				setState(3961);
				over_clause();
				}
			}

			setState(3964);
			match(K_AS);
			setState(3965);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Export_to_vertica_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public Export_to_vertica_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_export_to_vertica_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExport_to_vertica_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExport_to_vertica_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExport_to_vertica_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Export_to_vertica_statementContext export_to_vertica_statement() throws RecognitionException {
		Export_to_vertica_statementContext _localctx = new Export_to_vertica_statementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_export_to_vertica_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			match(K_EXPORT);
			setState(3968);
			match(K_TO);
			setState(3969);
			match(K_VERTICA);
			setState(3970);
			tableReference();
			setState(3972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(3971);
				columns();
				}
				break;
			}
			setState(3981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_AS:
				{
				{
				setState(3974);
				match(K_AS);
				setState(3975);
				select_statement();
				}
				}
				break;
			case K_FROM:
				{
				{
				setState(3976);
				match(K_FROM);
				setState(3977);
				tableReference();
				setState(3979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_ALL) | (1L << K_AND) | (1L << K_ANY) | (1L << K_ARRAY) | (1L << K_AS) | (1L << K_ASC) | (1L << K_AUTHORIZATION) | (1L << K_BETWEEN) | (1L << K_BIGINT) | (1L << K_BINARY) | (1L << K_BIT) | (1L << K_BOOLEAN) | (1L << K_BOTH) | (1L << K_CASE) | (1L << K_CAST) | (1L << K_CHAR) | (1L << K_CHAR_LENGTH) | (1L << K_CHARACTER_LENGTH) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_CONSTRAINT) | (1L << K_CORRELATION) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATABASE) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_SCHEMA) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_CURRENT_USER) | (1L << K_DATEDIFF) | (1L << K_DATETIME) | (1L << K_DECIMAL) | (1L << K_DECODE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DESC) | (1L << K_DISTINCT) | (1L << K_ELSE) | (1L << K_ENCODED) | (1L << K_END) | (1L << K_EXCEPT) | (1L << K_EXISTS) | (1L << K_EXTRACT) | (1L << K_FALSE) | (1L << K_FLOAT) | (1L << K_FOR) | (1L << K_FOREIGN) | (1L << K_FROM) | (1L << K_FULL) | (1L << K_GRANT) | (1L << K_GROUP) | (1L << K_HAVING) | (1L << K_ILIKE) | (1L << K_ILIKEB) | (1L << K_IN) | (1L << K_INITIALLY) | (1L << K_INNER) | (1L << K_INOUT) | (1L << K_INT) | (1L << K_INTEGER) | (1L << K_INTERSECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_INTERVAL - 64)) | (1L << (K_INTERVALYM - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KSAFE - 64)) | (1L << (K_LEADING - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIKEB - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_LOCALTIME - 64)) | (1L << (K_LOCALTIMESTAMP - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_MINUS - 64)) | (1L << (K_MONEY - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NCHAR - 64)) | (1L << (K_NEW - 64)) | (1L << (K_NONE - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_NULLSEQUAL - 64)) | (1L << (K_NUMBER - 64)) | (1L << (K_NUMERIC - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_OLD - 64)) | (1L << (K_ON - 64)) | (1L << (K_ONLY - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUT - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_OVER - 64)) | (1L << (K_OVERLAPS - 64)) | (1L << (K_OVERLAY - 64)) | (1L << (K_PINNED - 64)) | (1L << (K_POSITION - 64)) | (1L << (K_PRECISION - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_REAL - 64)) | (1L << (K_REFERENCES - 64)) | (1L << (K_RIGHT - 64)) | (1L << (K_ROW - 64)) | (1L << (K_SCHEMA - 64)) | (1L << (K_SELECT - 64)) | (1L << (K_SESSION_USER - 64)) | (1L << (K_SIMILAR - 64)) | (1L << (K_SMALLDATETIME - 64)) | (1L << (K_SMALLINT - 64)) | (1L << (K_SOME - 64)) | (1L << (K_SUBSTRING - 64)) | (1L << (K_SYSDATE - 64)) | (1L << (K_TABLE - 64)) | (1L << (K_TEXT - 64)) | (1L << (K_THEN - 64)) | (1L << (K_TIME - 64)) | (1L << (K_TIMESERIES - 64)) | (1L << (K_TIMESTAMP - 64)) | (1L << (K_TIMESTAMPADD - 64)) | (1L << (K_TIMESTAMPDIFF - 64)) | (1L << (K_TIMESTAMPTZ - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_TIMETZ - 128)) | (1L << (K_TIMEZONE - 128)) | (1L << (K_TINYINT - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRAILING - 128)) | (1L << (K_TREAT - 128)) | (1L << (K_TRIM - 128)) | (1L << (K_TRUE - 128)) | (1L << (K_UNBOUNDED - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_USER - 128)) | (1L << (K_USING - 128)) | (1L << (K_UUID - 128)) | (1L << (K_VARBINARY - 128)) | (1L << (K_VARCHAR - 128)) | (1L << (K_VARCHAR2 - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (K_WINDOW - 128)) | (1L << (K_WITH - 128)) | (1L << (K_WITHIN - 128)) | (1L << (K_ABORT - 128)) | (1L << (K_ABSOLUTE - 128)) | (1L << (K_ACCESS - 128)) | (1L << (K_ACCESSRANK - 128)) | (1L << (K_ACCOUNT - 128)) | (1L << (K_ACTION - 128)) | (1L << (K_ACTIVATE - 128)) | (1L << (K_ACTIVEPARTITIONCOUNT - 128)) | (1L << (K_ADD - 128)) | (1L << (K_ADMIN - 128)) | (1L << (K_AFTER - 128)) | (1L << (K_AGGREGATE - 128)) | (1L << (K_ALSO - 128)) | (1L << (K_ALTER - 128)) | (1L << (K_ANALYSE - 128)) | (1L << (K_ANALYTIC - 128)) | (1L << (K_ANALYZE - 128)) | (1L << (K_ANNOTATED - 128)) | (1L << (K_ANTI - 128)) | (1L << (K_ASSERTION - 128)) | (1L << (K_ASSIGNMENT - 128)) | (1L << (K_AT - 128)) | (1L << (K_AUTHENTICATION - 128)) | (1L << (K_AUTO - 128)) | (1L << (K_AUTO_INCREMENT - 128)) | (1L << (K_AVAILABLE - 128)) | (1L << (K_BACKWARD - 128)) | (1L << (K_BASENAME - 128)) | (1L << (K_BATCH - 128)) | (1L << (K_BEFORE - 128)) | (1L << (K_BEGIN - 128)) | (1L << (K_BEST - 128)) | (1L << (K_BLOCK - 128)) | (1L << (K_BLOCK_DICT - 128)) | (1L << (K_BLOCKDICT_COMP - 128)) | (1L << (K_BROADCAST - 128)) | (1L << (K_BY - 128)) | (1L << (K_BYTEA - 128)) | (1L << (K_BYTES - 128)) | (1L << (K_BZIP - 128)) | (1L << (K_BZIP_COMP - 128)) | (1L << (K_CACHE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (K_CALLED - 192)) | (1L << (K_CASCADE - 192)) | (1L << (K_CATALOGPATH - 192)) | (1L << (K_CHAIN - 192)) | (1L << (K_CHARACTER - 192)) | (1L << (K_CHARACTERISTICS - 192)) | (1L << (K_CHARACTERS - 192)) | (1L << (K_CHECKPOINT - 192)) | (1L << (K_CLASS - 192)) | (1L << (K_CLEAR - 192)) | (1L << (K_CLOSE - 192)) | (1L << (K_CLUSTER - 192)) | (1L << (K_COLSIZES - 192)) | (1L << (K_COLUMNS_COUNT - 192)) | (1L << (K_COMMENT - 192)) | (1L << (K_COMMIT - 192)) | (1L << (K_COMMITTED - 192)) | (1L << (K_COMMONDELTA_COMP - 192)) | (1L << (K_COMMUNAL - 192)) | (1L << (K_COMPLEX - 192)) | (1L << (K_CONNECT - 192)) | (1L << (K_CONSTRAINTS - 192)) | (1L << (K_CONTROL - 192)) | (1L << (K_COPY - 192)) | (1L << (K_CPUAFFINITYMODE - 192)) | (1L << (K_CPUAFFINITYSET - 192)) | (1L << (K_CREATEDB - 192)) | (1L << (K_CREATEUSER - 192)) | (1L << (K_CSV - 192)) | (1L << (K_CUBE - 192)) | (1L << (K_CURRENT - 192)) | (1L << (K_CURSOR - 192)) | (1L << (K_CUSTOM - 192)) | (1L << (K_CUSTOM_PARTITIONS - 192)) | (1L << (K_CYCLE - 192)) | (1L << (K_DATA - 192)) | (1L << (K_DATABASE - 192)) | (1L << (K_DATAPATH - 192)) | (1L << (K_DAY - 192)) | (1L << (K_DEACTIVATE - 192)) | (1L << (K_DEALLOCATE - 192)) | (1L << (K_DEC - 192)) | (1L << (K_DECLARE - 192)) | (1L << (K_DEFAULTS - 192)) | (1L << (K_DEFERRED - 192)) | (1L << (K_DEFINE - 192)) | (1L << (K_DEFINER - 192)) | (1L << (K_DELETE - 192)) | (1L << (K_DELIMITER - 192)) | (1L << (K_DELIMITERS - 192)) | (1L << (K_DELTARANGE_COMP - 192)) | (1L << (K_DELTARANGE_COMP_SP - 192)) | (1L << (K_DELTAVAL - 192)) | (1L << (K_DEPENDS - 192)) | (1L << (K_DETERMINES - 192)) | (1L << (K_DIRECT - 192)) | (1L << (K_DIRECTCOLS - 192)) | (1L << (K_DIRECTED - 192)) | (1L << (K_DIRECTGROUPED - 192)) | (1L << (K_DIRECTPROJ - 192)) | (1L << (K_DISABLE - 192)) | (1L << (K_DISABLED - 192)) | (1L << (K_DISCONNECT - 192)) | (1L << (K_DISTVALINDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (K_DO - 256)) | (1L << (K_DOMAIN - 256)) | (1L << (K_DOUBLE - 256)) | (1L << (K_DROP - 256)) | (1L << (K_DURABLE - 256)) | (1L << (K_EACH - 256)) | (1L << (K_ENABLE - 256)) | (1L << (K_ENABLED - 256)) | (1L << (K_ENCLOSED - 256)) | (1L << (K_ENCODING - 256)) | (1L << (K_ENCRYPTED - 256)) | (1L << (K_ENFORCELENGTH - 256)) | (1L << (K_EPHEMERAL - 256)) | (1L << (K_EPOCH - 256)) | (1L << (K_ERROR - 256)) | (1L << (K_ESCAPE - 256)) | (1L << (K_EVENT - 256)) | (1L << (K_EVENTS - 256)) | (1L << (K_EXCEPTION - 256)) | (1L << (K_EXCEPTIONS - 256)) | (1L << (K_EXCLUDE - 256)) | (1L << (K_EXCLUDING - 256)) | (1L << (K_EXCLUSIVE - 256)) | (1L << (K_EXECUTE - 256)) | (1L << (K_EXECUTIONPARALLELISM - 256)) | (1L << (K_EXPIRE - 256)) | (1L << (K_EXPLAIN - 256)) | (1L << (K_EXPORT - 256)) | (1L << (K_EXTERNAL - 256)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 256)) | (1L << (K_FAULT - 256)) | (1L << (K_FENCED - 256)) | (1L << (K_FETCH - 256)) | (1L << (K_FILESYSTEM - 256)) | (1L << (K_FILLER - 256)) | (1L << (K_FILTER - 256)) | (1L << (K_FIRST - 256)) | (1L << (K_FIXEDWIDTH - 256)) | (1L << (K_FLEX - 256)) | (1L << (K_FLEXIBLE - 256)) | (1L << (K_FOLLOWING - 256)) | (1L << (K_FORCE - 256)) | (1L << (K_FORMAT - 256)) | (1L << (K_FORWARD - 256)) | (1L << (K_FREEZE - 256)) | (1L << (K_FUNCTION - 256)) | (1L << (K_FUNCTIONS - 256)) | (1L << (K_GCDDELTA - 256)) | (1L << (K_GET - 256)) | (1L << (K_GLOBAL - 256)) | (1L << (K_GRACEPERIOD - 256)) | (1L << (K_GROUPED - 256)) | (1L << (K_GROUPING - 256)) | (1L << (K_GZIP - 256)) | (1L << (K_GZIP_COMP - 256)) | (1L << (K_HANDLER - 256)) | (1L << (K_HCATALOG - 256)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 256)) | (1L << (K_HCATALOG_DB - 256)) | (1L << (K_HCATALOG_SCHEMA - 256)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 256)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 256)) | (1L << (K_HCATALOG_USER - 256)) | (1L << (K_HIGH - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (K_HIVE_PARTITION_COLS - 320)) | (1L << (K_HIVESERVER2_HOSTNAME - 320)) | (1L << (K_HOLD - 320)) | (1L << (K_HOST - 320)) | (1L << (K_HOSTNAME - 320)) | (1L << (K_HOUR - 320)) | (1L << (K_HOURS - 320)) | (1L << (K_IDENTIFIED - 320)) | (1L << (K_IDENTITY - 320)) | (1L << (K_IDLESESSIONTIMEOUT - 320)) | (1L << (K_IF - 320)) | (1L << (K_IGNORE - 320)) | (1L << (K_IMMEDIATE - 320)) | (1L << (K_IMMUTABLE - 320)) | (1L << (K_IMPLICIT - 320)) | (1L << (K_INCLUDE - 320)) | (1L << (K_INCLUDING - 320)) | (1L << (K_INCREMENT - 320)) | (1L << (K_INDEX - 320)) | (1L << (K_INHERITS - 320)) | (1L << (K_INPUT - 320)) | (1L << (K_INSENSITIVE - 320)) | (1L << (K_INSERT - 320)) | (1L << (K_INSTEAD - 320)) | (1L << (K_INTERFACE - 320)) | (1L << (K_INTERPOLATE - 320)) | (1L << (K_INVOKER - 320)) | (1L << (K_ISOLATION - 320)) | (1L << (K_JSON - 320)) | (1L << (K_KEY - 320)) | (1L << (K_LABEL - 320)) | (1L << (K_LANCOMPILER - 320)) | (1L << (K_LANGUAGE - 320)) | (1L << (K_LARGE - 320)) | (1L << (K_LAST - 320)) | (1L << (K_LATEST - 320)) | (1L << (K_LESS - 320)) | (1L << (K_LEVEL - 320)) | (1L << (K_LIBRARY - 320)) | (1L << (K_LISTEN - 320)) | (1L << (K_LOAD - 320)) | (1L << (K_LOCAL - 320)) | (1L << (K_LOCATION - 320)) | (1L << (K_LOCK - 320)) | (1L << (K_LONG - 320)) | (1L << (K_LOW - 320)) | (1L << (K_LZO - 320)) | (1L << (K_MANAGED - 320)) | (1L << (K_MASK - 320)) | (1L << (K_MATCHED - 320)) | (1L << (K_MATERIALIZE - 320)) | (1L << (K_MAXCONCURRENCY - 320)) | (1L << (K_MAXCONCURRENCYGRACE - 320)) | (1L << (K_MAXCONNECTIONS - 320)) | (1L << (K_MAXMEMORYSIZE - 320)) | (1L << (K_MAXPAYLOAD - 320)) | (1L << (K_MAXQUERYMEMORYSIZE - 320)) | (1L << (K_MAXVALUE - 320)) | (1L << (K_MEDIUM - 320)) | (1L << (K_MEMORYCAP - 320)) | (1L << (K_MEMORYSIZE - 320)) | (1L << (K_MERGE - 320)) | (1L << (K_MERGEOUT - 320)) | (1L << (K_METHOD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (K_MICROSECONDS - 384)) | (1L << (K_MILLISECONDS - 384)) | (1L << (K_MINUTE - 384)) | (1L << (K_MINUTES - 384)) | (1L << (K_MINVALUE - 384)) | (1L << (K_MODE - 384)) | (1L << (K_MODEL - 384)) | (1L << (K_MONTH - 384)) | (1L << (K_MOVE - 384)) | (1L << (K_MOVEOUT - 384)) | (1L << (K_NAME - 384)) | (1L << (K_NATIONAL - 384)) | (1L << (K_NATIVE - 384)) | (1L << (K_NETWORK - 384)) | (1L << (K_NEXT - 384)) | (1L << (K_NO - 384)) | (1L << (K_NOCREATEDB - 384)) | (1L << (K_NOCREATEUSER - 384)) | (1L << (K_NODE - 384)) | (1L << (K_NODES - 384)) | (1L << (K_NOTHING - 384)) | (1L << (K_NOTIFIER - 384)) | (1L << (K_NOTIFY - 384)) | (1L << (K_NOWAIT - 384)) | (1L << (K_NULLAWARE - 384)) | (1L << (K_NULLCOLS - 384)) | (1L << (K_NULLS - 384)) | (1L << (K_OBJECT - 384)) | (1L << (K_OCTETS - 384)) | (1L << (K_OF - 384)) | (1L << (K_OFF - 384)) | (1L << (K_OIDS - 384)) | (1L << (K_OPERATOR - 384)) | (1L << (K_OPT - 384)) | (1L << (K_OPTIMIZER - 384)) | (1L << (K_OPTION - 384)) | (1L << (K_OPTVER - 384)) | (1L << (K_ORC - 384)) | (1L << (K_OTHERS - 384)) | (1L << (K_OWNER - 384)) | (1L << (K_PARAMETER - 384)) | (1L << (K_PARAMETERS - 384)) | (1L << (K_PARQUET - 384)) | (1L << (K_PARSER - 384)) | (1L << (K_PARTIAL - 384)) | (1L << (K_PARTITION - 384)) | (1L << (K_PARTITIONING - 384)) | (1L << (K_PASSWORD - 384)) | (1L << (K_PASSWORD_GRACE_TIME - 384)) | (1L << (K_PASSWORD_LIFE_TIME - 384)) | (1L << (K_PASSWORD_LOCK_TIME - 384)) | (1L << (K_PASSWORD_MAX_LENGTH - 384)) | (1L << (K_PASSWORD_MIN_DIGITS - 384)) | (1L << (K_PASSWORD_MIN_LENGTH - 384)) | (1L << (K_PASSWORD_MIN_LETTERS - 384)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 384)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 384)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 384)) | (1L << (K_PASSWORD_REUSE_MAX - 384)) | (1L << (K_PASSWORD_REUSE_TIME - 384)) | (1L << (K_PATTERN - 384)) | (1L << (K_PERCENT - 384)) | (1L << (K_PERMANENT - 384)) | (1L << (K_PLACING - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_POLICY - 448)) | (1L << (K_POOL - 448)) | (1L << (K_PORT - 448)) | (1L << (K_PRECEDING - 448)) | (1L << (K_PREPARE - 448)) | (1L << (K_PREPASS - 448)) | (1L << (K_PRESERVE - 448)) | (1L << (K_PREVIOUS - 448)) | (1L << (K_PRIOR - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_PRIVILEGES - 448)) | (1L << (K_PROCEDURAL - 448)) | (1L << (K_PROCEDURE - 448)) | (1L << (K_PROFILE - 448)) | (1L << (K_PROJECTION - 448)) | (1L << (K_PROJECTIONS - 448)) | (1L << (K_PSDATE - 448)) | (1L << (K_QUERY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_QUOTE - 448)) | (1L << (K_RANGE - 448)) | (1L << (K_RAW - 448)) | (1L << (K_READ - 448)) | (1L << (K_RECHECK - 448)) | (1L << (K_RECORD - 448)) | (1L << (K_RECOVER - 448)) | (1L << (K_RECURSIVE - 448)) | (1L << (K_REFRESH - 448)) | (1L << (K_REINDEX - 448)) | (1L << (K_REJECTED - 448)) | (1L << (K_REJECTMAX - 448)) | (1L << (K_RELATIVE - 448)) | (1L << (K_RELEASE - 448)) | (1L << (K_REMOVE - 448)) | (1L << (K_RENAME - 448)) | (1L << (K_REORGANIZE - 448)) | (1L << (K_REPEATABLE - 448)) | (1L << (K_REPLACE - 448)) | (1L << (K_RESET - 448)) | (1L << (K_RESOURCE - 448)) | (1L << (K_RESTART - 448)) | (1L << (K_RESTRICT - 448)) | (1L << (K_RESULTS - 448)) | (1L << (K_RETURN - 448)) | (1L << (K_RETURNREJECTED - 448)) | (1L << (K_REVOKE - 448)) | (1L << (K_RLE - 448)) | (1L << (K_ROLE - 448)) | (1L << (K_ROLES - 448)) | (1L << (K_ROLLBACK - 448)) | (1L << (K_ROLLUP - 448)) | (1L << (K_ROWS - 448)) | (1L << (K_RULE - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)) | (1L << (K_SAVE - 448)) | (1L << (K_SAVEPOINT - 448)) | (1L << (K_SCROLL - 448)) | (1L << (K_SEARCH_PATH - 448)) | (1L << (K_SECOND - 448)) | (1L << (K_SECONDS - 448)) | (1L << (K_SECURITY - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (K_SECURITY_ALGORITHM - 512)) | (1L << (K_SEGMENTED - 512)) | (1L << (K_SEMI - 512)) | (1L << (K_SEMIALL - 512)) | (1L << (K_SEQUENCE - 512)) | (1L << (K_SEQUENCES - 512)) | (1L << (K_SERIALIZABLE - 512)) | (1L << (K_SESSION - 512)) | (1L << (K_SET - 512)) | (1L << (K_SETOF - 512)) | (1L << (K_SETS - 512)) | (1L << (K_SHARE - 512)) | (1L << (K_SHARED - 512)) | (1L << (K_SHOW - 512)) | (1L << (K_SIMPLE - 512)) | (1L << (K_SINGLEINITIATOR - 512)) | (1L << (K_SITE - 512)) | (1L << (K_SITES - 512)) | (1L << (K_SKIP - 512)) | (1L << (K_SOURCE - 512)) | (1L << (K_SPLIT - 512)) | (1L << (K_SSL_CONFIG - 512)) | (1L << (K_STABLE - 512)) | (1L << (K_STANDBY - 512)) | (1L << (K_START - 512)) | (1L << (K_STATEMENT - 512)) | (1L << (K_STATISTICS - 512)) | (1L << (K_STDIN - 512)) | (1L << (K_STDOUT - 512)) | (1L << (K_STEMMER - 512)) | (1L << (K_STORAGE - 512)) | (1L << (K_STREAM - 512)) | (1L << (K_STRENGTH - 512)) | (1L << (K_STRICT - 512)) | (1L << (K_SUBNET - 512)) | (1L << (K_SYSID - 512)) | (1L << (K_SYSTEM - 512)) | (1L << (K_TABLES - 512)) | (1L << (K_TABLESAMPLE - 512)) | (1L << (K_TABLESPACE - 512)) | (1L << (K_TEMP - 512)) | (1L << (K_TEMPLATE - 512)) | (1L << (K_TEMPORARY - 512)) | (1L << (K_TEMPSPACECAP - 512)) | (1L << (K_TERMINATOR - 512)) | (1L << (K_THAN - 512)) | (1L << (K_TIES - 512)) | (1L << (K_TLS - 512)) | (1L << (K_TOAST - 512)) | (1L << (K_TOKENIZER - 512)) | (1L << (K_TOLERANCE - 512)) | (1L << (K_TRANSACTION - 512)) | (1L << (K_TRANSFORM - 512)) | (1L << (K_TRICKLE - 512)) | (1L << (K_TRIGGER - 512)) | (1L << (K_TRUNCATE - 512)) | (1L << (K_TRUSTED - 512)) | (1L << (K_TUNING - 512)) | (1L << (K_TYPE - 512)) | (1L << (K_UDPARAMETER - 512)) | (1L << (K_UNCOMMITTED - 512)) | (1L << (K_UNCOMPRESSED - 512)) | (1L << (K_UNI - 512)) | (1L << (K_UNINDEXED - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (K_UNKNOWN - 576)) | (1L << (K_UNLIMITED - 576)) | (1L << (K_UNLISTEN - 576)) | (1L << (K_UNLOCK - 576)) | (1L << (K_UNPACKER - 576)) | (1L << (K_UNSEGMENTED - 576)) | (1L << (K_UPDATE - 576)) | (1L << (K_USAGE - 576)) | (1L << (K_VACUUM - 576)) | (1L << (K_VALIDATE - 576)) | (1L << (K_VALIDATOR - 576)) | (1L << (K_VALINDEX - 576)) | (1L << (K_VALUE - 576)) | (1L << (K_VALUES - 576)) | (1L << (K_VARYING - 576)) | (1L << (K_VERBOSE - 576)) | (1L << (K_VERTICA - 576)) | (1L << (K_VIEW - 576)) | (1L << (K_VOLATILE - 576)) | (1L << (K_WAIT - 576)) | (1L << (K_WEBHDFS_ADDRESS - 576)) | (1L << (K_WEBSERVICE_HOSTNAME - 576)) | (1L << (K_WEBSERVICE_PORT - 576)) | (1L << (K_WITHOUT - 576)) | (1L << (K_WORK - 576)) | (1L << (K_WRITE - 576)) | (1L << (K_YEAR - 576)) | (1L << (K_ZONE - 576)) | (1L << (K_UDPARAMETERS - 576)) | (1L << (K_ALLNODES - 576)) | (1L << (K_PUBLIC - 576)) | (1L << (K_DIRECTORY - 576)) | (1L << (K_ROWGROUPSIZEMB - 576)) | (1L << (K_COMPRESSION - 576)) | (1L << (K_FILESIZEMB - 576)) | (1L << (K_FILEMODE - 576)) | (1L << (K_DIRMODE - 576)) | (1L << (K_ZSTD - 576)) | (1L << (K_ROUTE - 576)) | (1L << (K_ROUTING - 576)) | (1L << (K_ESCAPE_STRING_WARNING - 576)) | (1L << (K_STANDARD_CONFORMING_STRINGS - 576)) | (1L << (K_AUTOCOMMIT - 576)) | (1L << (K_LOCALE - 576)) | (1L << (K_MULTIPLEACTIVERESULTSETS - 576)) | (1L << (K_RESOURCE_POOL - 576)) | (1L << (K_INTERVALSTYLE - 576)) | (1L << (K_PLAIN - 576)) | (1L << (K_UNITS - 576)) | (1L << (K_DATESTYLE - 576)) | (1L << (K_ISO - 576)) | (1L << (K_MDY - 576)) | (1L << (K_POSTGRES - 576)) | (1L << (K_SQL - 576)) | (1L << (K_GERMAN - 576)) | (1L << (K_DMY - 576)) | (1L << (K_TLSMODE - 576)) | (1L << (K_PREFER - 576)) | (1L << (K_INT8 - 576)) | (1L << (K_FLOAT8 - 576)) | (1L << (K_GEOMETRY - 576)) | (1L << (K_GEOGRAPHY - 576)) | (1L << (K_DATE - 576)) | (1L << (K_ADDRESS - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (K_BALANCE - 640)) | (1L << (K_GBYTYPE - 640)) | (1L << (K_HASH - 640)) | (1L << (K_PIPE - 640)) | (1L << (K_SYN_JOIN - 640)) | (1L << (K_ENABLE_WITH_CLAUSE_MATERIALIZATION - 640)) | (1L << (K_EARLY_MATERIALIZATION - 640)) | (1L << (K_SYNTACTIC_JOIN - 640)) | (1L << (K_BRANCH - 640)) | (1L << (K_DATATYPE - 640)) | (1L << (K_VERBATIM - 640)) | (1L << (K_IGNORECONST - 640)) | (1L << (K_UTYPE - 640)) | (1L << (K_JTYPE - 640)) | (1L << (K_DISTRIB - 640)) | (1L << (K_PROJS - 640)) | (1L << (K_SKIP_PROJS - 640)) | (1L << (COMMA - 640)) | (1L << (MINUS - 640)) | (1L << (STAR - 640)) | (1L << (PLUS - 640)) | (1L << (DCOLON - 640)) | (1L << (OPEN_PAREN - 640)) | (1L << (CLOSE_PAREN - 640)) | (1L << (DOT - 640)) | (1L << (UNDERSCORE - 640)) | (1L << (AMP - 640)) | (1L << (AMP_AMP - 640)) | (1L << (AMP_LT - 640)) | (1L << (BANG - 640)) | (1L << (BANG_BANG - 640)) | (1L << (BANG_EQUAL - 640)) | (1L << (EQUAL - 640)) | (1L << (EQUAL_GT - 640)) | (1L << (EQUAL2 - 640)) | (1L << (GT - 640)) | (1L << (GTE - 640)) | (1L << (LT - 640)) | (1L << (LTE - 640)) | (1L << (LT_GT - 640)) | (1L << (DIV - 640)) | (1L << (IPV4_ADDR - 640)) | (1L << (IPV6_ADDR - 640)) | (1L << (SPACE - 640)) | (1L << (COMMENT - 640)) | (1L << (LINE_COMMENT_LITERAL - 640)) | (1L << (OPEN_HINT - 640)) | (1L << (CLOSE_HINT - 640)) | (1L << (DOUBLE_QUOTE_STRING - 640)) | (1L << (WORD - 640)) | (1L << (SINGLE_QUOTE_STRING - 640)) | (1L << (FLOAT - 640)) | (1L << (REAL - 640)) | (1L << (DECIMAL - 640)) | (1L << (ANY - 640)))) != 0)) {
					{
					setState(3978);
					columns();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statements_statementContext extends ParserRuleContext {
		public Grant_authentication_to_statementContext grant_authentication_to_statement() {
			return getRuleContext(Grant_authentication_to_statementContext.class,0);
		}
		public Grant_privileges_on_database_statementContext grant_privileges_on_database_statement() {
			return getRuleContext(Grant_privileges_on_database_statementContext.class,0);
		}
		public Grant_on_library_statementContext grant_on_library_statement() {
			return getRuleContext(Grant_on_library_statementContext.class,0);
		}
		public Grant_on_model_statementContext grant_on_model_statement() {
			return getRuleContext(Grant_on_model_statementContext.class,0);
		}
		public Grant_on_procedure_statementContext grant_on_procedure_statement() {
			return getRuleContext(Grant_on_procedure_statementContext.class,0);
		}
		public Grant_on_resourcepool_statementContext grant_on_resourcepool_statement() {
			return getRuleContext(Grant_on_resourcepool_statementContext.class,0);
		}
		public Grant_on_role_statementContext grant_on_role_statement() {
			return getRuleContext(Grant_on_role_statementContext.class,0);
		}
		public Grant_on_schema_statementContext grant_on_schema_statement() {
			return getRuleContext(Grant_on_schema_statementContext.class,0);
		}
		public Grant_on_sequence_statementContext grant_on_sequence_statement() {
			return getRuleContext(Grant_on_sequence_statementContext.class,0);
		}
		public Grant_on_location_statementContext grant_on_location_statement() {
			return getRuleContext(Grant_on_location_statementContext.class,0);
		}
		public Grant_on_table_statementContext grant_on_table_statement() {
			return getRuleContext(Grant_on_table_statementContext.class,0);
		}
		public Grant_on_ude_statementContext grant_on_ude_statement() {
			return getRuleContext(Grant_on_ude_statementContext.class,0);
		}
		public Grant_on_view_statementContext grant_on_view_statement() {
			return getRuleContext(Grant_on_view_statementContext.class,0);
		}
		public Grant_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_statements_statementContext grant_statements_statement() throws RecognitionException {
		Grant_statements_statementContext _localctx = new Grant_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_grant_statements_statement);
		try {
			setState(3996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3983);
				grant_authentication_to_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3984);
				grant_privileges_on_database_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3985);
				grant_on_library_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3986);
				grant_on_model_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3987);
				grant_on_procedure_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3988);
				grant_on_resourcepool_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3989);
				grant_on_role_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3990);
				grant_on_schema_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3991);
				grant_on_sequence_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3992);
				grant_on_location_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3993);
				grant_on_table_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3994);
				grant_on_ude_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3995);
				grant_on_view_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public Grant_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_view_statementContext grant_on_view_statement() throws RecognitionException {
		Grant_on_view_statementContext _localctx = new Grant_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_grant_on_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3998);
			match(K_GRANT);
			setState(4001);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(3999);
				match(K_SELECT);
				}
				break;
			case K_ALL:
			case K_EXCLUDE:
			case K_INCLUDE:
			case K_MATERIALIZE:
				{
				setState(4000);
				schema_privileges_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4003);
			match(K_ON);
			setState(4004);
			tableReference();
			setState(4009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4005);
				match(COMMA);
				setState(4006);
				tableReference();
				}
				}
				setState(4011);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4012);
			match(K_TO);
			setState(4013);
			grantees();
			setState(4015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4014);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_ude_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<FunctionReferenceContext> functionReference() {
			return getRuleContexts(FunctionReferenceContext.class);
		}
		public FunctionReferenceContext functionReference(int i) {
			return getRuleContext(FunctionReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public Grant_on_ude_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_ude_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_ude_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_ude_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_ude_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_ude_statementContext grant_on_ude_statement() throws RecognitionException {
		Grant_on_ude_statementContext _localctx = new Grant_on_ude_statementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_grant_on_ude_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			match(K_GRANT);
			setState(4023);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4018);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4019);
				match(K_ALL);
				setState(4021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4020);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ON:
				{
				{
				setState(4025);
				match(K_ON);
				setState(4036);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_FUNCTION:
					{
					setState(4026);
					match(K_FUNCTION);
					}
					break;
				case K_AGGREGATE:
					{
					{
					setState(4027);
					match(K_AGGREGATE);
					setState(4028);
					match(K_FUNCTION);
					}
					}
					break;
				case K_ANALYTIC:
					{
					{
					setState(4029);
					match(K_ANALYTIC);
					setState(4030);
					match(K_FUNCTION);
					}
					}
					break;
				case K_TRANSFORM:
					{
					{
					setState(4031);
					match(K_TRANSFORM);
					setState(4032);
					match(K_FUNCTION);
					}
					}
					break;
				case K_FILTER:
					{
					setState(4033);
					match(K_FILTER);
					}
					break;
				case K_PARSER:
					{
					setState(4034);
					match(K_PARSER);
					}
					break;
				case K_SOURCE:
					{
					setState(4035);
					match(K_SOURCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4038);
				functionReference();
				setState(4039);
				argument_list();
				setState(4046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4040);
					match(COMMA);
					setState(4041);
					functionReference();
					setState(4042);
					argument_list();
					}
					}
					setState(4048);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4049);
				match(K_ALL);
				setState(4050);
				match(K_FUNCTIONS);
				setState(4051);
				match(K_IN);
				setState(4052);
				match(K_SCHEMA);
				setState(4053);
				schemaReference();
				setState(4058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4054);
					match(COMMA);
					setState(4055);
					schemaReference();
					}
					}
					setState(4060);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4063);
			match(K_TO);
			setState(4064);
			grantees();
			setState(4066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4065);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_table_statementContext grant_on_table_statement() throws RecognitionException {
		Grant_on_table_statementContext _localctx = new Grant_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_grant_on_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4068);
			match(K_GRANT);
			setState(4081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_USAGE:
				{
				{
				setState(4069);
				schema_privilege();
				setState(4074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4070);
					match(COMMA);
					setState(4071);
					schema_privilege();
					}
					}
					setState(4076);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4077);
				match(K_ALL);
				setState(4079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4078);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4083);
			match(K_ON);
			setState(4105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_TABLE:
				{
				{
				setState(4084);
				match(K_TABLE);
				setState(4085);
				tableReference();
				setState(4090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4086);
					match(COMMA);
					setState(4087);
					tableReference();
					}
					}
					setState(4092);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4093);
				match(K_ALL);
				setState(4094);
				match(K_TABLES);
				setState(4095);
				match(K_IN);
				setState(4096);
				match(K_SCHEMA);
				setState(4097);
				schemaReference();
				setState(4102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4098);
					match(COMMA);
					setState(4099);
					schemaReference();
					}
					}
					setState(4104);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4107);
			match(K_TO);
			setState(4108);
			grantees();
			setState(4110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4109);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_location_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_READ() { return getTokens(VSqlParser.K_READ); }
		public TerminalNode K_READ(int i) {
			return getToken(VSqlParser.K_READ, i);
		}
		public List<TerminalNode> K_WRITE() { return getTokens(VSqlParser.K_WRITE); }
		public TerminalNode K_WRITE(int i) {
			return getToken(VSqlParser.K_WRITE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_location_statementContext grant_on_location_statement() throws RecognitionException {
		Grant_on_location_statementContext _localctx = new Grant_on_location_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_grant_on_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4112);
			match(K_GRANT);
			setState(4125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_READ:
			case K_WRITE:
				{
				{
				setState(4113);
				_la = _input.LA(1);
				if ( !(_la==K_READ || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4114);
					match(COMMA);
					setState(4115);
					_la = _input.LA(1);
					if ( !(_la==K_READ || _la==K_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4120);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4121);
				match(K_ALL);
				setState(4123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4122);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4127);
			match(K_ON);
			setState(4128);
			match(K_LOCATION);
			setState(4129);
			path();
			setState(4130);
			match(K_TO);
			setState(4131);
			grantees();
			setState(4133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4132);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Grant_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_sequence_statementContext grant_on_sequence_statement() throws RecognitionException {
		Grant_on_sequence_statementContext _localctx = new Grant_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_grant_on_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			match(K_GRANT);
			setState(4141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4136);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4137);
				match(K_ALL);
				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4138);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4143);
			match(K_ON);
			setState(4165);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SEQUENCE:
				{
				{
				setState(4144);
				match(K_SEQUENCE);
				setState(4145);
				sequenceReference();
				setState(4150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4146);
					match(COMMA);
					setState(4147);
					sequenceReference();
					}
					}
					setState(4152);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4153);
				match(K_ALL);
				setState(4154);
				match(K_SEQUENCES);
				setState(4155);
				match(K_IN);
				setState(4156);
				match(K_SCHEMA);
				setState(4157);
				schemaReference();
				setState(4162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4158);
					match(COMMA);
					setState(4159);
					schemaReference();
					}
					}
					setState(4164);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4167);
			match(K_TO);
			setState(4168);
			grantees();
			setState(4170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4169);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_schema_statementContext grant_on_schema_statement() throws RecognitionException {
		Grant_on_schema_statementContext _localctx = new Grant_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_grant_on_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4172);
			match(K_GRANT);
			setState(4185);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_USAGE:
				{
				{
				setState(4173);
				schema_privilege();
				setState(4178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4174);
					match(COMMA);
					setState(4175);
					schema_privilege();
					}
					}
					setState(4180);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4181);
				match(K_ALL);
				setState(4183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4182);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4187);
			match(K_ON);
			setState(4188);
			match(K_SCHEMA);
			setState(4189);
			schemaReference();
			setState(4194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4190);
				match(COMMA);
				setState(4191);
				schemaReference();
				}
				}
				setState(4196);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4197);
			match(K_TO);
			setState(4198);
			grantees();
			setState(4200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4199);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_privilegeContext extends ParserRuleContext {
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public Schema_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privilegeContext schema_privilege() throws RecognitionException {
		Schema_privilegeContext _localctx = new Schema_privilegeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_schema_privilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4202);
			_la = _input.LA(1);
			if ( !(_la==K_CREATE || _la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_USAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_role_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public Grant_on_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_role_statementContext grant_on_role_statement() throws RecognitionException {
		Grant_on_role_statementContext _localctx = new Grant_on_role_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_grant_on_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4204);
			match(K_GRANT);
			setState(4205);
			role();
			setState(4210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4206);
				match(COMMA);
				setState(4207);
				role();
				}
				}
				setState(4212);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4213);
			match(K_TO);
			setState(4214);
			grantees();
			setState(4216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4215);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_resourcepool_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public List<ResourcePoolContext> resourcePool() {
			return getRuleContexts(ResourcePoolContext.class);
		}
		public ResourcePoolContext resourcePool(int i) {
			return getRuleContext(ResourcePoolContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_resourcepool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_resourcepool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_resourcepool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_resourcepool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_resourcepool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_resourcepool_statementContext grant_on_resourcepool_statement() throws RecognitionException {
		Grant_on_resourcepool_statementContext _localctx = new Grant_on_resourcepool_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_grant_on_resourcepool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4218);
			match(K_GRANT);
			setState(4224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4219);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4220);
				match(K_ALL);
				setState(4222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4221);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4226);
			match(K_ON);
			setState(4227);
			match(K_RESOURCE);
			setState(4228);
			match(K_POOL);
			setState(4229);
			resourcePool();
			setState(4234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4230);
				match(COMMA);
				setState(4231);
				resourcePool();
				}
				}
				setState(4236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4237);
			match(K_TO);
			setState(4238);
			grantees();
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4239);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_procedure_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public List<ProcedureReferenceContext> procedureReference() {
			return getRuleContexts(ProcedureReferenceContext.class);
		}
		public ProcedureReferenceContext procedureReference(int i) {
			return getRuleContext(ProcedureReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_procedure_statementContext grant_on_procedure_statement() throws RecognitionException {
		Grant_on_procedure_statementContext _localctx = new Grant_on_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_grant_on_procedure_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4242);
			match(K_GRANT);
			setState(4248);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4243);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4244);
				match(K_ALL);
				setState(4246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4245);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4250);
			match(K_ON);
			setState(4251);
			match(K_PROCEDURE);
			setState(4252);
			procedureReference();
			setState(4253);
			argument_list();
			setState(4260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4254);
				match(COMMA);
				setState(4255);
				procedureReference();
				setState(4256);
				argument_list();
				}
				}
				setState(4262);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4263);
			match(K_TO);
			setState(4264);
			grantees();
			setState(4266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4265);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_model_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_model_statementContext grant_on_model_statement() throws RecognitionException {
		Grant_on_model_statementContext _localctx = new Grant_on_model_statementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_grant_on_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4268);
			match(K_GRANT);
			setState(4274);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4269);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4270);
				match(K_ALL);
				setState(4272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4271);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4276);
			match(K_ON);
			setState(4277);
			match(K_MODEL);
			setState(4278);
			modelReference();
			setState(4283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4279);
				match(COMMA);
				setState(4280);
				modelReference();
				}
				}
				setState(4285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4286);
			match(K_TO);
			setState(4287);
			grantees();
			setState(4289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4288);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public List<LibraryReferenceContext> libraryReference() {
			return getRuleContexts(LibraryReferenceContext.class);
		}
		public LibraryReferenceContext libraryReference(int i) {
			return getRuleContext(LibraryReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_library_statementContext grant_on_library_statement() throws RecognitionException {
		Grant_on_library_statementContext _localctx = new Grant_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_grant_on_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4291);
			match(K_GRANT);
			setState(4297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4292);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4293);
				match(K_ALL);
				setState(4295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4294);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4299);
			match(K_ON);
			setState(4300);
			match(K_LIBRARY);
			setState(4301);
			libraryReference();
			setState(4306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4302);
				match(COMMA);
				setState(4303);
				libraryReference();
				}
				}
				setState(4308);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4309);
			match(K_TO);
			setState(4310);
			grantees();
			setState(4312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4311);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_privileges_on_database_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_privileges_on_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_privileges_on_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_privileges_on_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_privileges_on_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_privileges_on_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_privileges_on_database_statementContext grant_privileges_on_database_statement() throws RecognitionException {
		Grant_privileges_on_database_statementContext _localctx = new Grant_privileges_on_database_statementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_grant_privileges_on_database_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4314);
			match(K_GRANT);
			setState(4321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
				{
				setState(4315);
				match(K_CREATE);
				}
				break;
			case K_TEMP:
				{
				setState(4316);
				match(K_TEMP);
				}
				break;
			case K_ALL:
				{
				{
				setState(4317);
				match(K_ALL);
				setState(4319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4318);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4323);
			match(K_ON);
			setState(4324);
			match(K_DATABASE);
			setState(4325);
			dbname();
			setState(4326);
			match(K_TO);
			setState(4327);
			grantees();
			setState(4329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4328);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_authentication_to_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public MethodContext method() {
			return getRuleContext(MethodContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Grant_authentication_to_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_authentication_to_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_authentication_to_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_authentication_to_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_authentication_to_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_authentication_to_statementContext grant_authentication_to_statement() throws RecognitionException {
		Grant_authentication_to_statementContext _localctx = new Grant_authentication_to_statementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_grant_authentication_to_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4331);
			match(K_GRANT);
			setState(4332);
			match(K_AUTHENTICATION);
			setState(4333);
			method();
			setState(4334);
			match(K_TO);
			setState(4335);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithGrantOptionContext extends ParserRuleContext {
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWithGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWithGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWithGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithGrantOptionContext withGrantOption() throws RecognitionException {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_withGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4337);
			match(K_WITH);
			setState(4338);
			match(K_GRANT);
			setState(4339);
			match(K_OPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteesContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public GranteesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantees; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrantees(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrantees(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrantees(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteesContext grantees() throws RecognitionException {
		GranteesContext _localctx = new GranteesContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_grantees);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			grantee();
			setState(4346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4342);
				match(COMMA);
				setState(4343);
				grantee();
				}
				}
				setState(4348);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode K_PUBLIC() { return getToken(VSqlParser.K_PUBLIC, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_grantee);
		try {
			setState(4351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4349);
				user();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4350);
				match(K_PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Grant_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_authentication_statementContext grant_authentication_statement() throws RecognitionException {
		Grant_authentication_statementContext _localctx = new Grant_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_grant_authentication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4353);
			match(K_GRANT);
			setState(4354);
			match(K_AUTHENTICATION);
			setState(4355);
			auth_method_name();
			setState(4356);
			match(K_TO);
			setState(4357);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4359);
			match(K_INSERT);
			setState(4361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4360);
				hints();
				}
			}

			setState(4363);
			match(K_INTO);
			setState(4364);
			tableReference();
			setState(4366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4365);
				columns();
				}
				break;
			}
			setState(4376);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
				{
				{
				setState(4368);
				match(K_DEFAULT);
				setState(4369);
				match(K_VALUES);
				}
				}
				break;
			case K_VALUES:
				{
				{
				setState(4370);
				match(K_VALUES);
				setState(4371);
				match(OPEN_PAREN);
				setState(4372);
				expressions();
				setState(4373);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SELECT:
			case K_AT:
				{
				setState(4375);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode K_MERGE() { return getToken(VSqlParser.K_MERGE, 0); }
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public JoinPredicateContext joinPredicate() {
			return getRuleContext(JoinPredicateContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public List<MatchingClauseContext> matchingClause() {
			return getRuleContexts(MatchingClauseContext.class);
		}
		public MatchingClauseContext matchingClause(int i) {
			return getRuleContext(MatchingClauseContext.class,i);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4378);
			match(K_MERGE);
			setState(4380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4379);
				hints();
				}
			}

			setState(4382);
			match(K_INTO);
			setState(4383);
			tableReference();
			setState(4385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				setState(4384);
				alias();
				}
				break;
			}
			setState(4387);
			match(K_USING);
			setState(4390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				{
				setState(4388);
				tableReference();
				}
				break;
			case 2:
				{
				setState(4389);
				select_statement();
				}
				break;
			}
			setState(4393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(4392);
				alias();
				}
				break;
			}
			setState(4395);
			joinPredicate();
			setState(4397); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4396);
				matchingClause();
				}
				}
				setState(4399); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchingClauseContext extends ParserRuleContext {
		public TerminalNode K_WHEN() { return getToken(VSqlParser.K_WHEN, 0); }
		public TerminalNode K_MATCHED() { return getToken(VSqlParser.K_MATCHED, 0); }
		public List<TerminalNode> K_THEN() { return getTokens(VSqlParser.K_THEN); }
		public TerminalNode K_THEN(int i) {
			return getToken(VSqlParser.K_THEN, i);
		}
		public List<TerminalNode> K_UPDATE() { return getTokens(VSqlParser.K_UPDATE); }
		public TerminalNode K_UPDATE(int i) {
			return getToken(VSqlParser.K_UPDATE, i);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public List<ColumnContext> column() {
			return getRuleContexts(ColumnContext.class);
		}
		public ColumnContext column(int i) {
			return getRuleContext(ColumnContext.class,i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(VSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(VSqlParser.EQUAL, i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public MatchingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMatchingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMatchingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMatchingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingClauseContext matchingClause() throws RecognitionException {
		MatchingClauseContext _localctx = new MatchingClauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_matchingClause);
		int _la;
		try {
			int _alt;
			setState(4443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4401);
				match(K_WHEN);
				setState(4402);
				match(K_MATCHED);
				setState(4403);
				match(K_THEN);
				setState(4404);
				match(K_UPDATE);
				setState(4407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AND) {
					{
					setState(4405);
					match(K_AND);
					setState(4406);
					predicates();
					}
				}

				setState(4409);
				match(K_THEN);
				setState(4410);
				match(K_UPDATE);
				setState(4411);
				match(K_SET);
				{
				setState(4412);
				column();
				setState(4413);
				match(EQUAL);
				setState(4414);
				value();
				}
				setState(4422);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,559,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4416);
						column();
						setState(4417);
						match(EQUAL);
						setState(4418);
						value();
						}
						} 
					}
					setState(4424);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,559,_ctx);
				}
				setState(4426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WHERE) {
					{
					setState(4425);
					where_clause();
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4428);
				match(K_WHEN);
				setState(4429);
				match(K_NOT);
				setState(4430);
				match(K_MATCHED);
				setState(4433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AND) {
					{
					setState(4431);
					match(K_AND);
					setState(4432);
					predicates();
					}
				}

				setState(4435);
				match(K_THEN);
				setState(4436);
				match(K_INSERT);
				setState(4437);
				columns();
				setState(4438);
				match(K_VALUES);
				setState(4439);
				match(OPEN_PAREN);
				setState(4440);
				values();
				setState(4441);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Profile_statementContext extends ParserRuleContext {
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public Profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProfile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProfile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProfile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Profile_statementContext profile_statement() throws RecognitionException {
		Profile_statementContext _localctx = new Profile_statementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_profile_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4445);
			match(K_PROFILE);
			setState(4446);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_RELEASE() { return getToken(VSqlParser.K_RELEASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public Release_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRelease_savepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRelease_savepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRelease_savepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Release_savepoint_statementContext release_savepoint_statement() throws RecognitionException {
		Release_savepoint_statementContext _localctx = new Release_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_release_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			match(K_RELEASE);
			setState(4450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				{
				setState(4449);
				match(K_SAVEPOINT);
				}
				break;
			}
			setState(4452);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statements_statementContext extends ParserRuleContext {
		public Revoke_authentication_statementContext revoke_authentication_statement() {
			return getRuleContext(Revoke_authentication_statementContext.class,0);
		}
		public Revoke_on_database_statementContext revoke_on_database_statement() {
			return getRuleContext(Revoke_on_database_statementContext.class,0);
		}
		public Revoke_on_library_statementContext revoke_on_library_statement() {
			return getRuleContext(Revoke_on_library_statementContext.class,0);
		}
		public Revoke_on_model_statementContext revoke_on_model_statement() {
			return getRuleContext(Revoke_on_model_statementContext.class,0);
		}
		public Revoke_on_prodecure_statementContext revoke_on_prodecure_statement() {
			return getRuleContext(Revoke_on_prodecure_statementContext.class,0);
		}
		public Revoke_on_resource_pool_statementContext revoke_on_resource_pool_statement() {
			return getRuleContext(Revoke_on_resource_pool_statementContext.class,0);
		}
		public Revoke_on_role_statementContext revoke_on_role_statement() {
			return getRuleContext(Revoke_on_role_statementContext.class,0);
		}
		public Revoke_on_schema_statementContext revoke_on_schema_statement() {
			return getRuleContext(Revoke_on_schema_statementContext.class,0);
		}
		public Revoke_on_sequence_statementContext revoke_on_sequence_statement() {
			return getRuleContext(Revoke_on_sequence_statementContext.class,0);
		}
		public Revoke_on_location_statementContext revoke_on_location_statement() {
			return getRuleContext(Revoke_on_location_statementContext.class,0);
		}
		public Revoke_on_table_statementContext revoke_on_table_statement() {
			return getRuleContext(Revoke_on_table_statementContext.class,0);
		}
		public Revoke_on_function_statementContext revoke_on_function_statement() {
			return getRuleContext(Revoke_on_function_statementContext.class,0);
		}
		public Revoke_on_view_statementContext revoke_on_view_statement() {
			return getRuleContext(Revoke_on_view_statementContext.class,0);
		}
		public Revoke_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_statements_statementContext revoke_statements_statement() throws RecognitionException {
		Revoke_statements_statementContext _localctx = new Revoke_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_revoke_statements_statement);
		try {
			setState(4467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4454);
				revoke_authentication_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4455);
				revoke_on_database_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4456);
				revoke_on_library_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4457);
				revoke_on_model_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4458);
				revoke_on_prodecure_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4459);
				revoke_on_resource_pool_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4460);
				revoke_on_role_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4461);
				revoke_on_schema_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4462);
				revoke_on_sequence_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4463);
				revoke_on_location_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4464);
				revoke_on_table_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4465);
				revoke_on_function_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4466);
				revoke_on_view_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_view_statementContext revoke_on_view_statement() throws RecognitionException {
		Revoke_on_view_statementContext _localctx = new Revoke_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_revoke_on_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			match(K_REVOKE);
			setState(4473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4470);
				match(K_GRANT);
				setState(4471);
				match(K_OPTION);
				setState(4472);
				match(K_FOR);
				}
			}

			setState(4480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4475);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4476);
				match(K_ALL);
				setState(4478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4477);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4482);
			match(K_ON);
			setState(4483);
			tableReference();
			setState(4488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4484);
				match(COMMA);
				setState(4485);
				tableReference();
				}
				}
				setState(4490);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4491);
			match(K_FROM);
			setState(4492);
			grantees();
			setState(4494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4493);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_function_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<FunctionReferenceContext> functionReference() {
			return getRuleContexts(FunctionReferenceContext.class);
		}
		public FunctionReferenceContext functionReference(int i) {
			return getRuleContext(FunctionReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public Revoke_on_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_function_statementContext revoke_on_function_statement() throws RecognitionException {
		Revoke_on_function_statementContext _localctx = new Revoke_on_function_statementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_revoke_on_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4496);
			match(K_REVOKE);
			setState(4500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4497);
				match(K_GRANT);
				setState(4498);
				match(K_OPTION);
				setState(4499);
				match(K_FOR);
				}
			}

			setState(4507);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4502);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4503);
				match(K_ALL);
				setState(4505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4504);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4545);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ON:
				{
				{
				setState(4509);
				match(K_ON);
				setState(4520);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_FUNCTION:
					{
					setState(4510);
					match(K_FUNCTION);
					}
					break;
				case K_AGGREGATE:
					{
					{
					setState(4511);
					match(K_AGGREGATE);
					setState(4512);
					match(K_FUNCTION);
					}
					}
					break;
				case K_ANALYTIC:
					{
					{
					setState(4513);
					match(K_ANALYTIC);
					setState(4514);
					match(K_FUNCTION);
					}
					}
					break;
				case K_TRANSFORM:
					{
					{
					setState(4515);
					match(K_TRANSFORM);
					setState(4516);
					match(K_FUNCTION);
					}
					}
					break;
				case K_FILTER:
					{
					setState(4517);
					match(K_FILTER);
					}
					break;
				case K_PARSER:
					{
					setState(4518);
					match(K_PARSER);
					}
					break;
				case K_SOURCE:
					{
					setState(4519);
					match(K_SOURCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4522);
				functionReference();
				setState(4523);
				argument_list();
				setState(4530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4524);
					match(COMMA);
					setState(4525);
					functionReference();
					setState(4526);
					argument_list();
					}
					}
					setState(4532);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4533);
				match(K_ALL);
				setState(4534);
				match(K_FUNCTIONS);
				setState(4535);
				match(K_IN);
				setState(4536);
				match(K_SCHEMA);
				setState(4537);
				schemaReference();
				setState(4542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4538);
					match(COMMA);
					setState(4539);
					schemaReference();
					}
					}
					setState(4544);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4547);
			match(K_FROM);
			setState(4548);
			grantees();
			setState(4550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4549);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public List<TerminalNode> K_SELECT() { return getTokens(VSqlParser.K_SELECT); }
		public TerminalNode K_SELECT(int i) {
			return getToken(VSqlParser.K_SELECT, i);
		}
		public List<TerminalNode> K_INSERT() { return getTokens(VSqlParser.K_INSERT); }
		public TerminalNode K_INSERT(int i) {
			return getToken(VSqlParser.K_INSERT, i);
		}
		public List<TerminalNode> K_UPDATE() { return getTokens(VSqlParser.K_UPDATE); }
		public TerminalNode K_UPDATE(int i) {
			return getToken(VSqlParser.K_UPDATE, i);
		}
		public List<TerminalNode> K_DELETE() { return getTokens(VSqlParser.K_DELETE); }
		public TerminalNode K_DELETE(int i) {
			return getToken(VSqlParser.K_DELETE, i);
		}
		public List<TerminalNode> K_REFERENCES() { return getTokens(VSqlParser.K_REFERENCES); }
		public TerminalNode K_REFERENCES(int i) {
			return getToken(VSqlParser.K_REFERENCES, i);
		}
		public List<TerminalNode> K_TRUNCATE() { return getTokens(VSqlParser.K_TRUNCATE); }
		public TerminalNode K_TRUNCATE(int i) {
			return getToken(VSqlParser.K_TRUNCATE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public Revoke_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_table_statementContext revoke_on_table_statement() throws RecognitionException {
		Revoke_on_table_statementContext _localctx = new Revoke_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_revoke_on_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4552);
			match(K_REVOKE);
			setState(4556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4553);
				match(K_GRANT);
				setState(4554);
				match(K_OPTION);
				setState(4555);
				match(K_FOR);
				}
			}

			setState(4570);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
				{
				{
				setState(4558);
				_la = _input.LA(1);
				if ( !(_la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4559);
					match(COMMA);
					setState(4560);
					_la = _input.LA(1);
					if ( !(_la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_UPDATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4565);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4566);
				match(K_ALL);
				setState(4568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4567);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4572);
			match(K_ON);
			setState(4596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				{
				{
				setState(4574);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4573);
					match(K_TABLE);
					}
					break;
				}
				setState(4576);
				tableReference();
				setState(4581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4577);
					match(COMMA);
					setState(4578);
					tableReference();
					}
					}
					setState(4583);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4584);
				match(K_ALL);
				setState(4585);
				match(K_TABLES);
				setState(4586);
				match(K_IN);
				setState(4587);
				match(K_SCHEMA);
				setState(4588);
				schemaReference();
				setState(4593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4589);
					match(COMMA);
					setState(4590);
					schemaReference();
					}
					}
					setState(4595);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			setState(4598);
			match(K_FROM);
			setState(4599);
			grantees();
			setState(4601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4600);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_location_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_READ() { return getTokens(VSqlParser.K_READ); }
		public TerminalNode K_READ(int i) {
			return getToken(VSqlParser.K_READ, i);
		}
		public List<TerminalNode> K_WRITE() { return getTokens(VSqlParser.K_WRITE); }
		public TerminalNode K_WRITE(int i) {
			return getToken(VSqlParser.K_WRITE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_location_statementContext revoke_on_location_statement() throws RecognitionException {
		Revoke_on_location_statementContext _localctx = new Revoke_on_location_statementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revoke_on_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4603);
			match(K_REVOKE);
			setState(4607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4604);
				match(K_GRANT);
				setState(4605);
				match(K_OPTION);
				setState(4606);
				match(K_FOR);
				}
			}

			setState(4621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_READ:
			case K_WRITE:
				{
				{
				setState(4609);
				_la = _input.LA(1);
				if ( !(_la==K_READ || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4610);
					match(COMMA);
					setState(4611);
					_la = _input.LA(1);
					if ( !(_la==K_READ || _la==K_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4616);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4617);
				match(K_ALL);
				setState(4619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4618);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4623);
			match(K_ON);
			setState(4624);
			match(K_LOCATION);
			setState(4625);
			path();
			setState(4626);
			match(K_FROM);
			setState(4627);
			grantees();
			setState(4629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4628);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Revoke_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_sequence_statementContext revoke_on_sequence_statement() throws RecognitionException {
		Revoke_on_sequence_statementContext _localctx = new Revoke_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revoke_on_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4631);
			match(K_REVOKE);
			setState(4635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4632);
				match(K_GRANT);
				setState(4633);
				match(K_OPTION);
				setState(4634);
				match(K_FOR);
				}
			}

			setState(4642);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4637);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4638);
				match(K_ALL);
				setState(4640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4639);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4644);
			match(K_ON);
			setState(4666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SEQUENCE:
				{
				{
				setState(4645);
				match(K_SEQUENCE);
				setState(4646);
				sequenceReference();
				setState(4651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4647);
					match(COMMA);
					setState(4648);
					sequenceReference();
					}
					}
					setState(4653);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4654);
				match(K_ALL);
				setState(4655);
				match(K_SEQUENCES);
				setState(4656);
				match(K_IN);
				setState(4657);
				match(K_SCHEMA);
				setState(4658);
				schemaReference();
				setState(4663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4659);
					match(COMMA);
					setState(4660);
					schemaReference();
					}
					}
					setState(4665);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4668);
			match(K_FROM);
			setState(4669);
			grantees();
			setState(4671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4670);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_schema_statementContext revoke_on_schema_statement() throws RecognitionException {
		Revoke_on_schema_statementContext _localctx = new Revoke_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_revoke_on_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			match(K_REVOKE);
			setState(4677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4674);
				match(K_GRANT);
				setState(4675);
				match(K_OPTION);
				setState(4676);
				match(K_FOR);
				}
			}

			setState(4691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_USAGE:
				{
				{
				setState(4679);
				schema_privilege();
				setState(4684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4680);
					match(COMMA);
					setState(4681);
					schema_privilege();
					}
					}
					setState(4686);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4687);
				match(K_ALL);
				setState(4689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4688);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4693);
			match(K_ON);
			setState(4694);
			match(K_SCHEMA);
			setState(4695);
			schemaReference();
			setState(4700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4696);
				match(COMMA);
				setState(4697);
				schemaReference();
				}
				}
				setState(4702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4703);
			match(K_FROM);
			setState(4704);
			grantees();
			setState(4706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4705);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_role_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_ADMIN() { return getToken(VSqlParser.K_ADMIN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Revoke_on_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_role_statementContext revoke_on_role_statement() throws RecognitionException {
		Revoke_on_role_statementContext _localctx = new Revoke_on_role_statementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_revoke_on_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4708);
			match(K_REVOKE);
			setState(4712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				setState(4709);
				match(K_ADMIN);
				setState(4710);
				match(K_OPTION);
				setState(4711);
				match(K_FOR);
				}
				break;
			}
			setState(4714);
			role();
			setState(4719);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4715);
				match(COMMA);
				setState(4716);
				role();
				}
				}
				setState(4721);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4722);
			match(K_FROM);
			setState(4723);
			grantees();
			setState(4725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4724);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public List<ResourcePoolContext> resourcePool() {
			return getRuleContexts(ResourcePoolContext.class);
		}
		public ResourcePoolContext resourcePool(int i) {
			return getRuleContext(ResourcePoolContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_resource_pool_statementContext revoke_on_resource_pool_statement() throws RecognitionException {
		Revoke_on_resource_pool_statementContext _localctx = new Revoke_on_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_revoke_on_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4727);
			match(K_REVOKE);
			setState(4731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4728);
				match(K_GRANT);
				setState(4729);
				match(K_OPTION);
				setState(4730);
				match(K_FOR);
				}
			}

			setState(4738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4733);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4734);
				match(K_ALL);
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4735);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4740);
			match(K_ON);
			setState(4741);
			match(K_RESOURCE);
			setState(4742);
			match(K_POOL);
			setState(4743);
			resourcePool();
			setState(4748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4744);
				match(COMMA);
				setState(4745);
				resourcePool();
				}
				}
				setState(4750);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4751);
			match(K_FROM);
			setState(4752);
			grantees();
			setState(4754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4753);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_prodecure_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public List<ProcedureReferenceContext> procedureReference() {
			return getRuleContexts(ProcedureReferenceContext.class);
		}
		public ProcedureReferenceContext procedureReference(int i) {
			return getRuleContext(ProcedureReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_prodecure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_prodecure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_prodecure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_prodecure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_prodecure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_prodecure_statementContext revoke_on_prodecure_statement() throws RecognitionException {
		Revoke_on_prodecure_statementContext _localctx = new Revoke_on_prodecure_statementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_revoke_on_prodecure_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4756);
			match(K_REVOKE);
			setState(4760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4757);
				match(K_GRANT);
				setState(4758);
				match(K_OPTION);
				setState(4759);
				match(K_FOR);
				}
			}

			setState(4767);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4762);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4763);
				match(K_ALL);
				setState(4765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4764);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4769);
			match(K_ON);
			setState(4770);
			match(K_PROCEDURE);
			setState(4771);
			procedureReference();
			setState(4772);
			argument_list();
			setState(4779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4773);
				match(COMMA);
				{
				setState(4774);
				procedureReference();
				setState(4775);
				argument_list();
				}
				}
				}
				setState(4781);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4782);
			match(K_FROM);
			setState(4783);
			grantees();
			setState(4785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4784);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_model_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_model_statementContext revoke_on_model_statement() throws RecognitionException {
		Revoke_on_model_statementContext _localctx = new Revoke_on_model_statementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_revoke_on_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4787);
			match(K_REVOKE);
			setState(4791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4788);
				match(K_GRANT);
				setState(4789);
				match(K_OPTION);
				setState(4790);
				match(K_FOR);
				}
			}

			setState(4798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4793);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4794);
				match(K_ALL);
				setState(4796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4795);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4800);
			match(K_ON);
			setState(4801);
			match(K_MODEL);
			setState(4802);
			modelReference();
			setState(4807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4803);
				match(COMMA);
				setState(4804);
				modelReference();
				}
				}
				setState(4809);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4810);
			match(K_FROM);
			setState(4811);
			grantees();
			setState(4813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4812);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public List<LibraryReferenceContext> libraryReference() {
			return getRuleContexts(LibraryReferenceContext.class);
		}
		public LibraryReferenceContext libraryReference(int i) {
			return getRuleContext(LibraryReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_library_statementContext revoke_on_library_statement() throws RecognitionException {
		Revoke_on_library_statementContext _localctx = new Revoke_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_revoke_on_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4815);
			match(K_REVOKE);
			setState(4819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4816);
				match(K_GRANT);
				setState(4817);
				match(K_OPTION);
				setState(4818);
				match(K_FOR);
				}
			}

			setState(4826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4821);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4822);
				match(K_ALL);
				setState(4824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4823);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4828);
			match(K_ON);
			setState(4829);
			match(K_LIBRARY);
			setState(4830);
			libraryReference();
			setState(4835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4831);
				match(COMMA);
				setState(4832);
				libraryReference();
				}
				}
				setState(4837);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4838);
			match(K_FROM);
			setState(4839);
			grantees();
			setState(4841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4840);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_database_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_CREATE() { return getTokens(VSqlParser.K_CREATE); }
		public TerminalNode K_CREATE(int i) {
			return getToken(VSqlParser.K_CREATE, i);
		}
		public List<TerminalNode> K_TEMP() { return getTokens(VSqlParser.K_TEMP); }
		public TerminalNode K_TEMP(int i) {
			return getToken(VSqlParser.K_TEMP, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_database_statementContext revoke_on_database_statement() throws RecognitionException {
		Revoke_on_database_statementContext _localctx = new Revoke_on_database_statementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_revoke_on_database_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4843);
			match(K_REVOKE);
			setState(4847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4844);
				match(K_GRANT);
				setState(4845);
				match(K_OPTION);
				setState(4846);
				match(K_FOR);
				}
			}

			setState(4861);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_TEMP:
				{
				{
				setState(4849);
				_la = _input.LA(1);
				if ( !(_la==K_CREATE || _la==K_TEMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4850);
					match(COMMA);
					setState(4851);
					_la = _input.LA(1);
					if ( !(_la==K_CREATE || _la==K_TEMP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4856);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4857);
				match(K_ALL);
				setState(4859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4858);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4863);
			match(K_ON);
			setState(4864);
			match(K_DATABASE);
			setState(4865);
			dbname();
			setState(4866);
			match(K_FROM);
			setState(4867);
			grantees();
			setState(4869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4868);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Revoke_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_authentication_statementContext revoke_authentication_statement() throws RecognitionException {
		Revoke_authentication_statementContext _localctx = new Revoke_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_revoke_authentication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4871);
			match(K_REVOKE);
			setState(4872);
			match(K_AUTHENTICATION);
			setState(4873);
			auth_method_name();
			setState(4874);
			match(K_FROM);
			setState(4875);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4877);
			match(K_ROLLBACK);
			setState(4879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(4878);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_to_savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public Rollback_to_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_to_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRollback_to_savepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRollback_to_savepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRollback_to_savepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_to_savepoint_statementContext rollback_to_savepoint_statement() throws RecognitionException {
		Rollback_to_savepoint_statementContext _localctx = new Rollback_to_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_rollback_to_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4881);
			match(K_ROLLBACK);
			setState(4882);
			match(K_TO);
			setState(4884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				setState(4883);
				match(K_SAVEPOINT);
				}
				break;
			}
			setState(4886);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4888);
			match(K_SAVEPOINT);
			setState(4889);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_epoch_clauseContext extends ParserRuleContext {
		public TerminalNode K_AT() { return getToken(VSqlParser.K_AT, 0); }
		public TerminalNode K_EPOCH() { return getToken(VSqlParser.K_EPOCH, 0); }
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_LATEST() { return getToken(VSqlParser.K_LATEST, 0); }
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public At_epoch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_epoch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAt_epoch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAt_epoch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAt_epoch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final At_epoch_clauseContext at_epoch_clause() throws RecognitionException {
		At_epoch_clauseContext _localctx = new At_epoch_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_at_epoch_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				{
				{
				setState(4891);
				match(K_AT);
				setState(4892);
				match(K_EPOCH);
				setState(4893);
				_la = _input.LA(1);
				if ( !(_la==K_LATEST || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4894);
				match(K_AT);
				setState(4895);
				match(K_TIME);
				setState(4896);
				string();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public List<Select_queryContext> select_query() {
			return getRuleContexts(Select_queryContext.class);
		}
		public Select_queryContext select_query(int i) {
			return getRuleContext(Select_queryContext.class,i);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public List<TerminalNode> K_UNION() { return getTokens(VSqlParser.K_UNION); }
		public TerminalNode K_UNION(int i) {
			return getToken(VSqlParser.K_UNION, i);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TerminalNode> K_DISTINCT() { return getTokens(VSqlParser.K_DISTINCT); }
		public TerminalNode K_DISTINCT(int i) {
			return getToken(VSqlParser.K_DISTINCT, i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_select_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AT) {
				{
				setState(4899);
				at_epoch_clause();
				}
			}

			setState(4902);
			select_query();
			setState(4910);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					setState(4903);
					match(K_UNION);
					setState(4905);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_ALL || _la==K_DISTINCT) {
						{
						setState(4904);
						_la = _input.LA(1);
						if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4907);
					select_query();
					}
					}
					} 
				}
				setState(4912);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_datestyle_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_DATESTYLE() { return getToken(VSqlParser.K_DATESTYLE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ISO() { return getToken(VSqlParser.K_ISO, 0); }
		public TerminalNode K_GERMAN() { return getToken(VSqlParser.K_GERMAN, 0); }
		public TerminalNode K_SQL() { return getToken(VSqlParser.K_SQL, 0); }
		public TerminalNode K_POSTGRES() { return getToken(VSqlParser.K_POSTGRES, 0); }
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public TerminalNode K_DMY() { return getToken(VSqlParser.K_DMY, 0); }
		public TerminalNode K_MDY() { return getToken(VSqlParser.K_MDY, 0); }
		public Set_datestyle_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_datestyle_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_datestyle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_datestyle_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_datestyle_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_datestyle_statementContext set_datestyle_statement() throws RecognitionException {
		Set_datestyle_statementContext _localctx = new Set_datestyle_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_set_datestyle_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4913);
			match(K_SET);
			setState(4914);
			match(K_DATESTYLE);
			setState(4915);
			match(K_TO);
			setState(4928);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ISO:
				{
				setState(4916);
				match(K_ISO);
				}
				break;
			case K_GERMAN:
				{
				setState(4917);
				match(K_GERMAN);
				}
				break;
			case K_SQL:
				{
				{
				setState(4918);
				match(K_SQL);
				setState(4921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4919);
					match(COMMA);
					setState(4920);
					_la = _input.LA(1);
					if ( !(_la==K_MDY || _la==K_DMY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case K_POSTGRES:
				{
				{
				setState(4923);
				match(K_POSTGRES);
				setState(4926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4924);
					match(COMMA);
					setState(4925);
					_la = _input.LA(1);
					if ( !(_la==K_MDY || _la==K_DMY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_escape_string_warning_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_ESCAPE_STRING_WARNING() { return getToken(VSqlParser.K_ESCAPE_STRING_WARNING, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_escape_string_warning_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_escape_string_warning_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_escape_string_warning_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_escape_string_warning_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_escape_string_warning_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_escape_string_warning_statementContext set_escape_string_warning_statement() throws RecognitionException {
		Set_escape_string_warning_statementContext _localctx = new Set_escape_string_warning_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_set_escape_string_warning_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4930);
			match(K_SET);
			setState(4931);
			match(K_ESCAPE_STRING_WARNING);
			setState(4932);
			match(K_TO);
			setState(4933);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_intervalstyle_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_INTERVALSTYLE() { return getToken(VSqlParser.K_INTERVALSTYLE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_PLAIN() { return getToken(VSqlParser.K_PLAIN, 0); }
		public TerminalNode K_UNITS() { return getToken(VSqlParser.K_UNITS, 0); }
		public Set_intervalstyle_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_intervalstyle_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_intervalstyle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_intervalstyle_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_intervalstyle_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_intervalstyle_statementContext set_intervalstyle_statement() throws RecognitionException {
		Set_intervalstyle_statementContext _localctx = new Set_intervalstyle_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_set_intervalstyle_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4935);
			match(K_SET);
			setState(4936);
			match(K_INTERVALSTYLE);
			setState(4937);
			match(K_TO);
			setState(4938);
			_la = _input.LA(1);
			if ( !(_la==K_PLAIN || _la==K_UNITS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_locale_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_LOCALE() { return getToken(VSqlParser.K_LOCALE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Set_locale_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_locale_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_locale_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_locale_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_locale_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_locale_statementContext set_locale_statement() throws RecognitionException {
		Set_locale_statementContext _localctx = new Set_locale_statementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_set_locale_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4940);
			match(K_SET);
			setState(4941);
			match(K_LOCALE);
			setState(4942);
			match(K_TO);
			setState(4943);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_role_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_role_statementContext set_role_statement() throws RecognitionException {
		Set_role_statementContext _localctx = new Set_role_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_set_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4945);
			match(K_SET);
			setState(4946);
			match(K_ROLE);
			setState(4968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				{
				setState(4947);
				role();
				setState(4952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4948);
					match(COMMA);
					setState(4949);
					role();
					}
					}
					setState(4954);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(4955);
				match(K_NONE);
				}
				break;
			case 3:
				{
				setState(4956);
				match(K_ALL);
				}
				break;
			case 4:
				{
				{
				setState(4957);
				match(K_ALL);
				setState(4958);
				match(K_EXCEPT);
				{
				setState(4959);
				role();
				setState(4964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4960);
					match(COMMA);
					setState(4961);
					role();
					}
					}
					setState(4966);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				}
				break;
			case 5:
				{
				setState(4967);
				match(K_DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_search_path_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public List<SchemaContext> schema() {
			return getRuleContexts(SchemaContext.class);
		}
		public SchemaContext schema(int i) {
			return getRuleContext(SchemaContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_search_path_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_search_path_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_search_path_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_search_path_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_search_path_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_search_path_statementContext set_search_path_statement() throws RecognitionException {
		Set_search_path_statementContext _localctx = new Set_search_path_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_set_search_path_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4970);
			match(K_SET);
			setState(4971);
			match(K_SEARCH_PATH);
			setState(4972);
			_la = _input.LA(1);
			if ( !(_la==K_TO || _la==EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				{
				setState(4973);
				schema();
				setState(4978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4974);
					match(COMMA);
					setState(4975);
					schema();
					}
					}
					setState(4980);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(4981);
				match(K_DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_autocommit_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_AUTOCOMMIT() { return getToken(VSqlParser.K_AUTOCOMMIT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_session_autocommit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_autocommit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_autocommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_autocommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_autocommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_autocommit_statementContext set_session_autocommit_statement() throws RecognitionException {
		Set_session_autocommit_statementContext _localctx = new Set_session_autocommit_statementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_set_session_autocommit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			match(K_SET);
			setState(4985);
			match(K_SESSION);
			setState(4986);
			match(K_AUTOCOMMIT);
			setState(4987);
			match(K_TO);
			setState(4988);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_characteristics_as_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_CHARACTERISTICS() { return getToken(VSqlParser.K_CHARACTERISTICS, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public List<IsolationLevelContext> isolationLevel() {
			return getRuleContexts(IsolationLevelContext.class);
		}
		public IsolationLevelContext isolationLevel(int i) {
			return getRuleContext(IsolationLevelContext.class,i);
		}
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_session_characteristics_as_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_characteristics_as_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_characteristics_as_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_characteristics_as_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_characteristics_as_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_characteristics_as_transaction_statementContext set_session_characteristics_as_transaction_statement() throws RecognitionException {
		Set_session_characteristics_as_transaction_statementContext _localctx = new Set_session_characteristics_as_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_set_session_characteristics_as_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4990);
			match(K_SET);
			setState(4991);
			match(K_SESSION);
			setState(4992);
			match(K_CHARACTERISTICS);
			setState(4993);
			match(K_AS);
			setState(4994);
			match(K_TRANSACTION);
			setState(5003); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(5003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					setState(4996);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4995);
						match(COMMA);
						}
					}

					setState(4998);
					isolationLevel();
					}
					break;
				case 2:
					{
					setState(5000);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4999);
						match(COMMA);
						}
					}

					setState(5002);
					transactionMode();
					}
					break;
				}
				}
				setState(5005); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (K_READ - 471)) | (1L << (K_REPEATABLE - 471)) | (1L << (K_SERIALIZABLE - 471)))) != 0) || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_graceperiod_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_graceperiod_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_graceperiod_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_graceperiod_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_graceperiod_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_graceperiod_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_graceperiod_statementContext set_session_graceperiod_statement() throws RecognitionException {
		Set_session_graceperiod_statementContext _localctx = new Set_session_graceperiod_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_set_session_graceperiod_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5007);
			match(K_SET);
			setState(5008);
			match(K_SESSION);
			setState(5009);
			match(K_GRACEPERIOD);
			setState(5014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				{
				setState(5010);
				value();
				}
				break;
			case 2:
				{
				setState(5011);
				match(K_NONE);
				}
				break;
			case 3:
				{
				{
				setState(5012);
				match(EQUAL);
				setState(5013);
				match(K_DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_idlesessiontimeout_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_idlesessiontimeout_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_idlesessiontimeout_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_idlesessiontimeout_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_idlesessiontimeout_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_idlesessiontimeout_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_idlesessiontimeout_statementContext set_session_idlesessiontimeout_statement() throws RecognitionException {
		Set_session_idlesessiontimeout_statementContext _localctx = new Set_session_idlesessiontimeout_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_set_session_idlesessiontimeout_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5016);
			match(K_SET);
			setState(5017);
			match(K_SESSION);
			setState(5018);
			match(K_IDLESESSIONTIMEOUT);
			setState(5023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5019);
				value();
				}
				break;
			case 2:
				{
				setState(5020);
				match(K_NONE);
				}
				break;
			case 3:
				{
				{
				setState(5021);
				match(EQUAL);
				setState(5022);
				match(K_DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_memorycap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_memorycap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_memorycap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_memorycap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_memorycap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_memorycap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_memorycap_statementContext set_session_memorycap_statement() throws RecognitionException {
		Set_session_memorycap_statementContext _localctx = new Set_session_memorycap_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_set_session_memorycap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5025);
			match(K_SET);
			setState(5026);
			match(K_SESSION);
			setState(5027);
			match(K_MEMORYCAP);
			setState(5032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5028);
				value();
				}
				break;
			case 2:
				{
				setState(5029);
				match(K_NONE);
				}
				break;
			case 3:
				{
				{
				setState(5030);
				match(EQUAL);
				setState(5031);
				match(K_DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_multipleactiveresultsets_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_MULTIPLEACTIVERESULTSETS() { return getToken(VSqlParser.K_MULTIPLEACTIVERESULTSETS, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_session_multipleactiveresultsets_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_multipleactiveresultsets_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_multipleactiveresultsets_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_multipleactiveresultsets_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_multipleactiveresultsets_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_multipleactiveresultsets_statementContext set_session_multipleactiveresultsets_statement() throws RecognitionException {
		Set_session_multipleactiveresultsets_statementContext _localctx = new Set_session_multipleactiveresultsets_statementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_set_session_multipleactiveresultsets_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5034);
			match(K_SET);
			setState(5035);
			match(K_SESSION);
			setState(5036);
			match(K_MULTIPLEACTIVERESULTSETS);
			setState(5037);
			match(K_TO);
			setState(5038);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_RESOURCE_POOL() { return getToken(VSqlParser.K_RESOURCE_POOL, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_resource_pool_statementContext set_session_resource_pool_statement() throws RecognitionException {
		Set_session_resource_pool_statementContext _localctx = new Set_session_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_set_session_resource_pool_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5040);
			match(K_SET);
			setState(5041);
			match(K_SESSION);
			setState(5042);
			match(K_RESOURCE_POOL);
			setState(5043);
			match(EQUAL);
			setState(5046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5044);
				value();
				}
				break;
			case 2:
				{
				{
				setState(5045);
				match(K_DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_runtimecap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_runtimecap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_runtimecap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_runtimecap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_runtimecap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_runtimecap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_runtimecap_statementContext set_session_runtimecap_statement() throws RecognitionException {
		Set_session_runtimecap_statementContext _localctx = new Set_session_runtimecap_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_set_session_runtimecap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5048);
			match(K_SET);
			setState(5049);
			match(K_SESSION);
			setState(5050);
			match(K_RUNTIMECAP);
			setState(5055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5051);
				value();
				}
				break;
			case 2:
				{
				setState(5052);
				match(K_NONE);
				}
				break;
			case 3:
				{
				{
				setState(5053);
				match(EQUAL);
				setState(5054);
				match(K_DEFAULT);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_tempspacecap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public Set_session_tempspacecap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_tempspacecap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_tempspacecap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_tempspacecap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_tempspacecap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_tempspacecap_statementContext set_session_tempspacecap_statement() throws RecognitionException {
		Set_session_tempspacecap_statementContext _localctx = new Set_session_tempspacecap_statementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_set_session_tempspacecap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5057);
			match(K_SET);
			setState(5058);
			match(K_SESSION);
			setState(5059);
			match(K_TEMPSPACECAP);
			setState(5062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5060);
				value();
				}
				break;
			case 2:
				{
				setState(5061);
				match(K_NONE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_standard_conforming_strings_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_STANDARD_CONFORMING_STRINGS() { return getToken(VSqlParser.K_STANDARD_CONFORMING_STRINGS, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_standard_conforming_strings_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_standard_conforming_strings_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_standard_conforming_strings_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_standard_conforming_strings_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_standard_conforming_strings_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_standard_conforming_strings_statementContext set_standard_conforming_strings_statement() throws RecognitionException {
		Set_standard_conforming_strings_statementContext _localctx = new Set_standard_conforming_strings_statementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_set_standard_conforming_strings_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5064);
			match(K_SET);
			setState(5065);
			match(K_STANDARD_CONFORMING_STRINGS);
			setState(5066);
			match(K_TO);
			setState(5067);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_time_zone_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_TIMEZONE() { return getToken(VSqlParser.K_TIMEZONE, 0); }
		public TerminalNode K_INTERVAL() { return getToken(VSqlParser.K_INTERVAL, 0); }
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public TerminalNode K_ZONE() { return getToken(VSqlParser.K_ZONE, 0); }
		public Set_time_zone_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_time_zone_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_time_zone_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_time_zone_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_time_zone_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_time_zone_statementContext set_time_zone_statement() throws RecognitionException {
		Set_time_zone_statementContext _localctx = new Set_time_zone_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_set_time_zone_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5069);
			match(K_SET);
			setState(5073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_TIME:
				{
				{
				setState(5070);
				match(K_TIME);
				setState(5071);
				match(K_ZONE);
				}
				}
				break;
			case K_TIMEZONE:
				{
				setState(5072);
				match(K_TIMEZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5075);
			match(K_TO);
			setState(5077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5076);
				match(K_INTERVAL);
				}
				break;
			}
			setState(5079);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public Show_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_statementContext show_statement() throws RecognitionException {
		Show_statementContext _localctx = new Show_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_show_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5081);
			match(K_SHOW);
			setState(5084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5082);
				match(K_ALL);
				}
				break;
			case 2:
				{
				setState(5083);
				param();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_current_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_CURRENT() { return getToken(VSqlParser.K_CURRENT, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_current_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_current_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_current_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_current_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_current_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_current_statementContext show_current_statement() throws RecognitionException {
		Show_current_statementContext _localctx = new Show_current_statementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_show_current_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			match(K_SHOW);
			setState(5087);
			match(K_CURRENT);
			setState(5090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5088);
				match(K_ALL);
				}
				break;
			case 2:
				{
				setState(5089);
				params();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_database_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_database_statementContext show_database_statement() throws RecognitionException {
		Show_database_statementContext _localctx = new Show_database_statementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_show_database_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5092);
			match(K_SHOW);
			setState(5093);
			match(K_DATABASE);
			setState(5094);
			dbname();
			setState(5097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(5095);
				match(K_ALL);
				}
				break;
			case 2:
				{
				setState(5096);
				params();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_node_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_node_statementContext show_node_statement() throws RecognitionException {
		Show_node_statementContext _localctx = new Show_node_statementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_show_node_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5099);
			match(K_SHOW);
			setState(5100);
			match(K_NODE);
			setState(5101);
			node();
			setState(5104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(5102);
				match(K_ALL);
				}
				break;
			case 2:
				{
				setState(5103);
				params();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_session_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_UDPARAMETERS() { return getToken(VSqlParser.K_UDPARAMETERS, 0); }
		public Show_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_session_statementContext show_session_statement() throws RecognitionException {
		Show_session_statementContext _localctx = new Show_session_statementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_show_session_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5106);
			match(K_SHOW);
			setState(5107);
			match(K_SESSION);
			setState(5112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(5108);
				match(K_ALL);
				}
				break;
			case 2:
				{
				{
				setState(5109);
				match(K_UDPARAMETERS);
				setState(5110);
				match(K_ALL);
				}
				}
				break;
			case 3:
				{
				setState(5111);
				params();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_START() { return getToken(VSqlParser.K_START, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionModeContext transactionMode() {
			return getRuleContext(TransactionModeContext.class,0);
		}
		public Start_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterStart_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitStart_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitStart_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_transaction_statementContext start_transaction_statement() throws RecognitionException {
		Start_transaction_statementContext _localctx = new Start_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_start_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			match(K_START);
			setState(5115);
			match(K_TRANSACTION);
			setState(5121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ISOLATION) {
				{
				setState(5116);
				match(K_ISOLATION);
				setState(5117);
				match(K_LEVEL);
				setState(5118);
				isolationLevel();
				setState(5119);
				transactionMode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_table_statementContext extends ParserRuleContext {
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Truncate_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTruncate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTruncate_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTruncate_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_table_statementContext truncate_table_statement() throws RecognitionException {
		Truncate_table_statementContext _localctx = new Truncate_table_statementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_truncate_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5123);
			match(K_TRUNCATE);
			setState(5124);
			match(K_TABLE);
			setState(5125);
			tableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			match(K_UPDATE);
			setState(5129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5128);
				hints();
				}
				break;
			}
			setState(5131);
			tableReference();
			setState(5133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5132);
				alias();
				}
				break;
			}
			setState(5135);
			match(K_SET);
			setState(5136);
			expressions();
			setState(5138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(5137);
				from_clause();
				}
			}

			setState(5141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WHERE) {
				{
				setState(5140);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_select_query_clauseContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Simple_select_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSimple_select_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSimple_select_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSimple_select_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_select_query_clauseContext simple_select_query_clause() throws RecognitionException {
		Simple_select_query_clauseContext _localctx = new Simple_select_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_simple_select_query_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			select_clause();
			setState(5144);
			from_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_queryContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Timeseries_clauseContext timeseries_clause() {
			return getRuleContext(Timeseries_clauseContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Match_clauseContext match_clause() {
			return getRuleContext(Match_clauseContext.class,0);
		}
		public TerminalNode K_UNION() { return getToken(VSqlParser.K_UNION, 0); }
		public Except_clauseContext except_clause() {
			return getRuleContext(Except_clauseContext.class,0);
		}
		public Intersect_clauseContext intersect_clause() {
			return getRuleContext(Intersect_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_OF() { return getToken(VSqlParser.K_OF, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Select_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_queryContext select_query() throws RecognitionException {
		Select_queryContext _localctx = new Select_queryContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_select_query);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5146);
			select_clause();
			setState(5148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				setState(5147);
				into_clause();
				}
				break;
			}
			setState(5151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				{
				setState(5150);
				from_clause();
				}
				break;
			}
			setState(5154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(5153);
				where_clause();
				}
				break;
			}
			setState(5157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				setState(5156);
				timeseries_clause();
				}
				break;
			}
			setState(5160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5159);
				groupBy_clause();
				}
				break;
			}
			setState(5163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(5162);
				having_clause();
				}
				break;
			}
			setState(5166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(5165);
				match_clause();
				}
				break;
			}
			setState(5172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5168);
				match(K_UNION);
				setState(5170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(5169);
					_la = _input.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(5175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5174);
				except_clause();
				}
				break;
			}
			setState(5178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(5177);
				intersect_clause();
				}
				break;
			}
			setState(5181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				setState(5180);
				orderby_clause();
				}
				break;
			}
			setState(5184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(5183);
				limit_clause();
				}
				break;
			}
			setState(5187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				{
				setState(5186);
				offset_clause();
				}
				break;
			}
			setState(5202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				setState(5189);
				match(K_FOR);
				setState(5190);
				match(K_UPDATE);
				setState(5200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5191);
					match(K_OF);
					setState(5192);
					tableReference();
					setState(5197);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5193);
							match(COMMA);
							setState(5194);
							tableReference();
							}
							} 
						}
						setState(5199);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,683,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode K_OFFSET() { return getToken(VSqlParser.K_OFFSET, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5204);
			match(K_OFFSET);
			setState(5205);
			integerNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			match(K_LIMIT);
			setState(5210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				{
				setState(5208);
				integerNumber();
				}
				break;
			case K_ALL:
				{
				setState(5209);
				match(K_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public ElementsContext elements() {
			return getRuleContext(ElementsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_select_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5212);
			match(K_SELECT);
			setState(5214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5213);
				hints();
				}
				break;
			}
			setState(5217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(5216);
				_la = _input.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5219);
			elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Intersect_clauseContext extends ParserRuleContext {
		public TerminalNode K_INTERSECT() { return getToken(VSqlParser.K_INTERSECT, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public Intersect_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intersect_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIntersect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIntersect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIntersect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Intersect_clauseContext intersect_clause() throws RecognitionException {
		Intersect_clauseContext _localctx = new Intersect_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_intersect_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5221);
			match(K_INTERSECT);
			setState(5222);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Except_clauseContext extends ParserRuleContext {
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public Except_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_except_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExcept_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExcept_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExcept_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Except_clauseContext except_clause() throws RecognitionException {
		Except_clauseContext _localctx = new Except_clauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_except_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5224);
			match(K_EXCEPT);
			setState(5225);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<DatasetContext> dataset() {
			return getRuleContexts(DatasetContext.class);
		}
		public DatasetContext dataset(int i) {
			return getRuleContext(DatasetContext.class,i);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5227);
			match(K_FROM);
			{
			setState(5228);
			dataset();
			setState(5235);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5230);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
					case 1:
						{
						setState(5229);
						match(COMMA);
						}
						break;
					}
					setState(5232);
					dataset();
					}
					} 
				}
				setState(5237);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			}
			}
			setState(5239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				{
				setState(5238);
				tableSample();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_into_clause);
		int _la;
		try {
			setState(5264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5241);
				match(K_INTO);
				setState(5243);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					setState(5242);
					match(K_TABLE);
					}
					break;
				}
				setState(5245);
				tableReference();
				setState(5247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					setState(5246);
					alias();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5249);
				match(K_INTO);
				setState(5251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_GLOBAL || _la==K_LOCAL) {
					{
					setState(5250);
					_la = _input.LA(1);
					if ( !(_la==K_GLOBAL || _la==K_LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5253);
				_la = _input.LA(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(5254);
					match(K_TABLE);
					}
					break;
				}
				setState(5257);
				tableReference();
				setState(5262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(5258);
					match(K_ON);
					setState(5259);
					match(K_COMMIT);
					setState(5260);
					_la = _input.LA(1);
					if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5261);
					match(K_ROWS);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timeseries_clauseContext extends ParserRuleContext {
		public TerminalNode K_TIMESERIES() { return getToken(VSqlParser.K_TIMESERIES, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Timeseries_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeseries_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTimeseries_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTimeseries_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTimeseries_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timeseries_clauseContext timeseries_clause() throws RecognitionException {
		Timeseries_clauseContext _localctx = new Timeseries_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_timeseries_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5266);
			match(K_TIMESERIES);
			setState(5267);
			columnReference();
			setState(5268);
			alias();
			setState(5269);
			over_clause();
			setState(5270);
			match(K_ORDER);
			setState(5271);
			match(K_BY);
			setState(5272);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			match(K_OVER);
			setState(5275);
			match(OPEN_PAREN);
			setState(5279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(5276);
				match(K_PARTITION);
				setState(5277);
				match(K_BY);
				setState(5278);
				columns();
				}
			}

			setState(5282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(5281);
				orderby_clause();
				}
			}

			setState(5284);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBy_clauseContext extends ParserRuleContext {
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public GroupBy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGroupBy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGroupBy_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGroupBy_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBy_clauseContext groupBy_clause() throws RecognitionException {
		GroupBy_clauseContext _localctx = new GroupBy_clauseContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_groupBy_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5286);
			match(K_GROUP);
			setState(5287);
			match(K_BY);
			setState(5289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				{
				setState(5288);
				hints();
				}
				break;
			}
			setState(5291);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode K_HAVING() { return getToken(VSqlParser.K_HAVING, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5293);
			match(K_HAVING);
			setState(5294);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode K_WHERE() { return getToken(VSqlParser.K_WHERE, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			match(K_WHERE);
			setState(5297);
			predicates();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_clauseContext extends ParserRuleContext {
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<OrderbyItemContext> orderbyItem() {
			return getRuleContexts(OrderbyItemContext.class);
		}
		public OrderbyItemContext orderbyItem(int i) {
			return getRuleContext(OrderbyItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOrderby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOrderby_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOrderby_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_orderby_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5299);
			match(K_ORDER);
			setState(5300);
			match(K_BY);
			setState(5301);
			orderbyItem();
			setState(5306);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,701,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5302);
					match(COMMA);
					setState(5303);
					orderbyItem();
					}
					} 
				}
				setState(5308);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,701,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_clauseContext extends ParserRuleContext {
		public List<TerminalNode> K_MATCH() { return getTokens(VSqlParser.K_MATCH); }
		public TerminalNode K_MATCH(int i) {
			return getToken(VSqlParser.K_MATCH, i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public List<TerminalNode> K_BY() { return getTokens(VSqlParser.K_BY); }
		public TerminalNode K_BY(int i) {
			return getToken(VSqlParser.K_BY, i);
		}
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public TerminalNode K_DEFINE() { return getToken(VSqlParser.K_DEFINE, 0); }
		public TerminalNode K_PATTERN() { return getToken(VSqlParser.K_PATTERN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_EVENTS() { return getToken(VSqlParser.K_EVENTS, 0); }
		public TerminalNode K_FIRST() { return getToken(VSqlParser.K_FIRST, 0); }
		public TerminalNode K_EVENT() { return getToken(VSqlParser.K_EVENT, 0); }
		public Match_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMatch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMatch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMatch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_clauseContext match_clause() throws RecognitionException {
		Match_clauseContext _localctx = new Match_clauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_match_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5309);
			match(K_MATCH);
			setState(5310);
			match(OPEN_PAREN);
			setState(5321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(5311);
				match(K_PARTITION);
				setState(5312);
				match(K_BY);
				setState(5313);
				columnReference();
				setState(5318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5314);
					match(COMMA);
					setState(5315);
					columnReference();
					}
					}
					setState(5320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5323);
			match(K_ORDER);
			setState(5324);
			match(K_BY);
			setState(5325);
			columnReference();
			setState(5330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5326);
				match(COMMA);
				setState(5327);
				columnReference();
				}
				}
				setState(5332);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5333);
			match(K_DEFINE);
			{
			setState(5334);
			id();
			setState(5335);
			match(K_AS);
			setState(5338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(5336);
				expression();
				}
				break;
			case 2:
				{
				setState(5337);
				predicates();
				}
				break;
			}
			}
			setState(5349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5340);
				match(COMMA);
				{
				setState(5341);
				id();
				setState(5342);
				match(K_AS);
				setState(5345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
				case 1:
					{
					setState(5343);
					expression();
					}
					break;
				case 2:
					{
					setState(5344);
					predicates();
					}
					break;
				}
				}
				}
				}
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5352);
			match(K_PATTERN);
			setState(5353);
			id();
			setState(5354);
			match(K_AS);
			setState(5355);
			match(OPEN_PAREN);
			setState(5356);
			id();
			setState(5357);
			match(CLOSE_PAREN);
			setState(5367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ROWS) {
				{
				{
				setState(5358);
				match(K_ROWS);
				setState(5359);
				match(K_MATCH);
				}
				setState(5365);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ALL:
					{
					{
					setState(5361);
					match(K_ALL);
					setState(5362);
					match(K_EVENTS);
					}
					}
					break;
				case K_FIRST:
					{
					{
					setState(5363);
					match(K_FIRST);
					setState(5364);
					match(K_EVENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5369);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_clauseContext extends ParserRuleContext {
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPartition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPartition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPartition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_clauseContext partition_clause() throws RecognitionException {
		Partition_clauseContext _localctx = new Partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_partition_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5371);
			match(K_PARTITION);
			setState(5372);
			match(K_BY);
			setState(5373);
			expression();
			setState(5375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GROUP) {
				{
				setState(5374);
				groupBy_clause();
				}
			}

			setState(5379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACTIVEPARTITIONCOUNT) {
				{
				setState(5377);
				match(K_ACTIVEPARTITIONCOUNT);
				setState(5378);
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encoding_clauseContext extends ParserRuleContext {
		public TerminalNode K_ENCODING() { return getToken(VSqlParser.K_ENCODING, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_BLOCK_DICT() { return getToken(VSqlParser.K_BLOCK_DICT, 0); }
		public TerminalNode K_BLOCKDICT_COMP() { return getToken(VSqlParser.K_BLOCKDICT_COMP, 0); }
		public TerminalNode K_BZIP_COMP() { return getToken(VSqlParser.K_BZIP_COMP, 0); }
		public TerminalNode K_COMMONDELTA_COMP() { return getToken(VSqlParser.K_COMMONDELTA_COMP, 0); }
		public TerminalNode K_DELTARANGE_COMP() { return getToken(VSqlParser.K_DELTARANGE_COMP, 0); }
		public TerminalNode K_DELTAVAL() { return getToken(VSqlParser.K_DELTAVAL, 0); }
		public TerminalNode K_GCDDELTA() { return getToken(VSqlParser.K_GCDDELTA, 0); }
		public TerminalNode K_GZIP_COMP() { return getToken(VSqlParser.K_GZIP_COMP, 0); }
		public TerminalNode K_RLE() { return getToken(VSqlParser.K_RLE, 0); }
		public Encoding_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEncoding_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEncoding_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEncoding_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encoding_clauseContext encoding_clause() throws RecognitionException {
		Encoding_clauseContext _localctx = new Encoding_clauseContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_encoding_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			match(K_ENCODING);
			setState(5382);
			_la = _input.LA(1);
			if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (K_AUTO - 173)) | (1L << (K_BLOCK_DICT - 173)) | (1L << (K_BLOCKDICT_COMP - 173)) | (1L << (K_BZIP_COMP - 173)) | (1L << (K_COMMONDELTA_COMP - 173)))) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (K_DELTARANGE_COMP - 242)) | (1L << (K_DELTAVAL - 242)) | (1L << (K_GCDDELTA - 242)))) != 0) || _la==K_GZIP_COMP || _la==K_RLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Owner_clauseContext extends ParserRuleContext {
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public Owner_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOwner_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOwner_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOwner_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Owner_clauseContext owner_clause() throws RecognitionException {
		Owner_clauseContext _localctx = new Owner_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_owner_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5384);
			match(K_OWNER);
			setState(5385);
			match(K_TO);
			setState(5386);
			owner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_clauseContext extends ParserRuleContext {
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public Rename_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRename_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRename_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRename_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_clauseContext rename_clause() throws RecognitionException {
		Rename_clauseContext _localctx = new Rename_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_rename_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5388);
			match(K_RENAME);
			setState(5389);
			match(K_TO);
			setState(5390);
			values();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_schema_clauseContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public Set_schema_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_schema_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_schema_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_schema_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_schema_clauseContext set_schema_clause() throws RecognitionException {
		Set_schema_clauseContext _localctx = new Set_schema_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_set_schema_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5392);
			match(K_SET);
			setState(5393);
			match(K_SCHEMA);
			setState(5394);
			schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderbyItemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_ASC() { return getToken(VSqlParser.K_ASC, 0); }
		public TerminalNode K_DESC() { return getToken(VSqlParser.K_DESC, 0); }
		public OrderbyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderbyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOrderbyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOrderbyItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOrderbyItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderbyItemContext orderbyItem() throws RecognitionException {
		OrderbyItemContext _localctx = new OrderbyItemContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_orderbyItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5396);
			expression();
			setState(5398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
			case 1:
				{
				setState(5397);
				_la = _input.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicatesContext extends ParserRuleContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> K_AND() { return getTokens(VSqlParser.K_AND); }
		public TerminalNode K_AND(int i) {
			return getToken(VSqlParser.K_AND, i);
		}
		public List<TerminalNode> K_OR() { return getTokens(VSqlParser.K_OR); }
		public TerminalNode K_OR(int i) {
			return getToken(VSqlParser.K_OR, i);
		}
		public PredicatesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicates; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPredicates(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPredicates(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPredicates(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicatesContext predicates() throws RecognitionException {
		PredicatesContext _localctx = new PredicatesContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_predicates);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5400);
			predicate();
			setState(5405);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,713,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5401);
					_la = _input.LA(1);
					if ( !(_la==K_AND || _la==K_OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5402);
					predicate();
					}
					} 
				}
				setState(5407);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,713,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSampleContext extends ParserRuleContext {
		public TerminalNode K_TABLESAMPLE() { return getToken(VSqlParser.K_TABLESAMPLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TableSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTableSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTableSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTableSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSampleContext tableSample() throws RecognitionException {
		TableSampleContext _localctx = new TableSampleContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_tableSample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5408);
			match(K_TABLESAMPLE);
			setState(5409);
			match(OPEN_PAREN);
			setState(5410);
			match(FLOAT);
			setState(5411);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatasetContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public DatasetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDataset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDataset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDataset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatasetContext dataset() throws RecognitionException {
		DatasetContext _localctx = new DatasetContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_dataset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				setState(5413);
				tableReference();
				}
				break;
			case 2:
				{
				setState(5414);
				select_clause();
				}
				break;
			case 3:
				{
				setState(5415);
				joinedTable();
				}
				break;
			}
			setState(5419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5418);
				alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_JOIN() { return getToken(VSqlParser.K_JOIN, 0); }
		public TerminalNode K_INNER() { return getToken(VSqlParser.K_INNER, 0); }
		public TerminalNode K_NATURAL() { return getToken(VSqlParser.K_NATURAL, 0); }
		public TerminalNode K_CROSS() { return getToken(VSqlParser.K_CROSS, 0); }
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public JoinPredicateContext joinPredicate() {
			return getRuleContext(JoinPredicateContext.class,0);
		}
		public TerminalNode K_LEFT() { return getToken(VSqlParser.K_LEFT, 0); }
		public TerminalNode K_RIGHT() { return getToken(VSqlParser.K_RIGHT, 0); }
		public TerminalNode K_FULL() { return getToken(VSqlParser.K_FULL, 0); }
		public TerminalNode K_OUTER() { return getToken(VSqlParser.K_OUTER, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_joinedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5421);
			tableReference();
			setState(5437);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_INNER:
				{
				setState(5422);
				match(K_INNER);
				}
				break;
			case K_LEFT:
				{
				{
				setState(5423);
				match(K_LEFT);
				setState(5425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5424);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_RIGHT:
				{
				{
				setState(5427);
				match(K_RIGHT);
				setState(5429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5428);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_FULL:
				{
				{
				setState(5431);
				match(K_FULL);
				setState(5433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5432);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_NATURAL:
				{
				setState(5435);
				match(K_NATURAL);
				}
				break;
			case K_CROSS:
				{
				setState(5436);
				match(K_CROSS);
				}
				break;
			case K_JOIN:
				break;
			default:
				break;
			}
			setState(5439);
			match(K_JOIN);
			setState(5441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
			case 1:
				{
				setState(5440);
				hints();
				}
				break;
			}
			setState(5444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				setState(5443);
				tableSample();
				}
				break;
			}
			setState(5447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(5446);
				joinPredicate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElementsContext extends ParserRuleContext {
		public List<ElementContext> element() {
			return getRuleContexts(ElementContext.class);
		}
		public ElementContext element(int i) {
			return getRuleContext(ElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementsContext elements() throws RecognitionException {
		ElementsContext _localctx = new ElementsContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_elements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5449);
			element();
			setState(5454);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,723,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5450);
					match(COMMA);
					setState(5451);
					element();
					}
					} 
				}
				setState(5456);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,723,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public AsteriskExpContext asteriskExp() {
			return getRuleContext(AsteriskExpContext.class,0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementContext element() throws RecognitionException {
		ElementContext _localctx = new ElementContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_element);
		try {
			setState(5462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5457);
				expression();
				setState(5459);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5458);
					alias();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5461);
				asteriskExp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5464);
			expression();
			}
			setState(5469);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,726,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5465);
					match(COMMA);
					{
					setState(5466);
					expression();
					}
					}
					} 
				}
				setState(5471);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,726,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastExprContext extends ParserRuleContext {
		public TerminalNode DCOLON() { return getToken(VSqlParser.DCOLON, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public CastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCastExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCastExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCastExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastExprContext castExpr() throws RecognitionException {
		CastExprContext _localctx = new CastExprContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_castExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			match(DCOLON);
			setState(5473);
			dataTypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CastExprContext castExpr() {
			return getRuleContext(CastExprContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public CaseExpContext caseExp() {
			return getRuleContext(CaseExpContext.class,0);
		}
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_expression);
		int _la;
		try {
			int _alt;
			setState(5507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5475);
				match(OPEN_PAREN);
				{
				setState(5476);
				expression();
				setState(5482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 658)) & ~0x3f) == 0 && ((1L << (_la - 658)) & ((1L << (MINUS - 658)) | (1L << (STAR - 658)) | (1L << (PLUS - 658)) | (1L << (BANG_EQUAL - 658)) | (1L << (EQUAL - 658)) | (1L << (EQUAL_GT - 658)) | (1L << (EQUAL2 - 658)) | (1L << (GT - 658)) | (1L << (GTE - 658)) | (1L << (LT - 658)) | (1L << (LTE - 658)) | (1L << (LT_GT - 658)) | (1L << (DIV - 658)))) != 0)) {
					{
					{
					setState(5477);
					operator();
					setState(5478);
					expression();
					}
					}
					setState(5484);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5485);
				match(CLOSE_PAREN);
				setState(5487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5486);
					castExpr();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
				case 1:
					{
					setState(5489);
					functionCall();
					}
					break;
				case 2:
					{
					setState(5490);
					columnReference();
					}
					break;
				case 3:
					{
					setState(5491);
					caseExp();
					}
					break;
				case 4:
					{
					setState(5492);
					select_query();
					}
					break;
				case 5:
					{
					setState(5493);
					value();
					}
					break;
				}
				setState(5501);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5496);
						operator();
						setState(5497);
						expression();
						}
						} 
					}
					setState(5503);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
				}
				setState(5505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(5504);
					castExpr();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public BooleanPredicateContext booleanPredicate() {
			return getRuleContext(BooleanPredicateContext.class,0);
		}
		public ColumnValuePredicateContext columnValuePredicate() {
			return getRuleContext(ColumnValuePredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public InterpolatePredicateContext interpolatePredicate() {
			return getRuleContext(InterpolatePredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_predicate);
		try {
			setState(5516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5509);
				betweenPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5510);
				booleanPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5511);
				columnValuePredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5512);
				inPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5513);
				interpolatePredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5514);
				likePredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5515);
				nullPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_nullPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5518);
			expression();
			setState(5519);
			match(K_IS);
			setState(5520);
			nullOrNotNull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public TerminalNode K_ILIKE() { return getToken(VSqlParser.K_ILIKE, 0); }
		public TerminalNode K_LIKEB() { return getToken(VSqlParser.K_LIKEB, 0); }
		public TerminalNode K_ILIKEB() { return getToken(VSqlParser.K_ILIKEB, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5522);
			expression();
			setState(5524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5523);
				match(K_NOT);
				}
			}

			setState(5526);
			_la = _input.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (K_ILIKE - 55)) | (1L << (K_ILIKEB - 55)) | (1L << (K_LIKE - 55)) | (1L << (K_LIKEB - 55)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5527);
			expression();
			setState(5530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
			case 1:
				{
				setState(5528);
				match(K_ESCAPE);
				setState(5529);
				value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPredicateContext extends ParserRuleContext {
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public List<ComparisonOperatorContext> comparisonOperator() {
			return getRuleContexts(ComparisonOperatorContext.class);
		}
		public ComparisonOperatorContext comparisonOperator(int i) {
			return getRuleContext(ComparisonOperatorContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> K_AND() { return getTokens(VSqlParser.K_AND); }
		public TerminalNode K_AND(int i) {
			return getToken(VSqlParser.K_AND, i);
		}
		public List<TerminalNode> K_OR() { return getTokens(VSqlParser.K_OR); }
		public TerminalNode K_OR(int i) {
			return getToken(VSqlParser.K_OR, i);
		}
		public List<TerminalNode> K_NOT() { return getTokens(VSqlParser.K_NOT); }
		public TerminalNode K_NOT(int i) {
			return getToken(VSqlParser.K_NOT, i);
		}
		public JoinPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterJoinPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitJoinPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitJoinPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPredicateContext joinPredicate() throws RecognitionException {
		JoinPredicateContext _localctx = new JoinPredicateContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_joinPredicate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5532);
			match(K_ON);
			setState(5533);
			columnReference();
			setState(5534);
			comparisonOperator();
			setState(5535);
			expression();
			setState(5543);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,736,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5536);
					_la = _input.LA(1);
					if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5537);
					columnReference();
					setState(5538);
					comparisonOperator();
					setState(5539);
					expression();
					}
					} 
				}
				setState(5545);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,736,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InterpolatePredicateContext extends ParserRuleContext {
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public TerminalNode K_PREVIOUS() { return getToken(VSqlParser.K_PREVIOUS, 0); }
		public TerminalNode K_VALUE() { return getToken(VSqlParser.K_VALUE, 0); }
		public InterpolatePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interpolatePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInterpolatePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInterpolatePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInterpolatePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InterpolatePredicateContext interpolatePredicate() throws RecognitionException {
		InterpolatePredicateContext _localctx = new InterpolatePredicateContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_interpolatePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5546);
			columnReference();
			setState(5547);
			match(K_PREVIOUS);
			setState(5548);
			match(K_VALUE);
			setState(5549);
			columnReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnValuePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public ColumnValuePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnValuePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumnValuePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumnValuePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumnValuePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnValuePredicateContext columnValuePredicate() throws RecognitionException {
		ColumnValuePredicateContext _localctx = new ColumnValuePredicateContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_columnValuePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5551);
			expression();
			setState(5552);
			operator();
			setState(5553);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPredicateContext extends ParserRuleContext {
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5555);
			columns();
			setState(5556);
			match(K_IN);
			setState(5558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5557);
				match(K_NOT);
				}
			}

			setState(5560);
			match(OPEN_PAREN);
			setState(5561);
			expressions();
			setState(5562);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantExpContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public ConstantExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConstantExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConstantExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConstantExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantExpContext constantExp() throws RecognitionException {
		ConstantExpContext _localctx = new ConstantExpContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_constantExp);
		try {
			setState(5569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5564);
				number();
				}
				break;
			case DOUBLE_QUOTE_STRING:
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5565);
				string();
				{
				setState(5566);
				match(K_IS);
				setState(5567);
				nullOrNotNull();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_BETWEEN() { return getToken(VSqlParser.K_BETWEEN, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_betweenPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5571);
			expression();
			setState(5573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				setState(5572);
				match(K_BETWEEN);
				}
				break;
			}
			setState(5575);
			expression();
			setState(5576);
			match(K_AND);
			setState(5577);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public Bool_expressionContext bool_expression() {
			return getRuleContext(Bool_expressionContext.class,0);
		}
		public TerminalNode K_UNKNOWN() { return getToken(VSqlParser.K_UNKNOWN, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public BooleanPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanPredicateContext booleanPredicate() throws RecognitionException {
		BooleanPredicateContext _localctx = new BooleanPredicateContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_booleanPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5579);
			expression();
			setState(5580);
			match(K_IS);
			setState(5582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5581);
				match(K_NOT);
				}
			}

			setState(5586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FALSE:
			case K_TRUE:
				{
				setState(5584);
				bool_expression();
				}
				break;
			case K_UNKNOWN:
				{
				setState(5585);
				match(K_UNKNOWN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpContext extends ParserRuleContext {
		public TerminalNode K_CASE() { return getToken(VSqlParser.K_CASE, 0); }
		public List<TerminalNode> K_WHEN() { return getTokens(VSqlParser.K_WHEN); }
		public TerminalNode K_WHEN(int i) {
			return getToken(VSqlParser.K_WHEN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> K_THEN() { return getTokens(VSqlParser.K_THEN); }
		public TerminalNode K_THEN(int i) {
			return getToken(VSqlParser.K_THEN, i);
		}
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_ELSE() { return getToken(VSqlParser.K_ELSE, 0); }
		public CaseExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCaseExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCaseExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCaseExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpContext caseExp() throws RecognitionException {
		CaseExpContext _localctx = new CaseExpContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_caseExp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5588);
			match(K_CASE);
			setState(5589);
			match(K_WHEN);
			setState(5590);
			expression();
			setState(5591);
			match(K_THEN);
			setState(5592);
			expression();
			setState(5600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_WHEN) {
				{
				{
				setState(5593);
				match(K_WHEN);
				setState(5594);
				expression();
				setState(5595);
				match(K_THEN);
				setState(5596);
				expression();
				}
				}
				setState(5602);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ELSE) {
				{
				setState(5603);
				match(K_ELSE);
				setState(5604);
				expression();
				}
			}

			setState(5607);
			match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				setState(5609);
				match(K_AS);
				}
				break;
			}
			setState(5612);
			id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public ElementsContext elements() {
			return getRuleContext(ElementsContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_functionCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5614);
			function();
			setState(5615);
			match(OPEN_PAREN);
			setState(5620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(5617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					setState(5616);
					_la = _input.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5619);
				elements();
				}
				break;
			}
			setState(5622);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommaSeparatedKeyValuePairsContext extends ParserRuleContext {
		public List<KeyValuePairContext> keyValuePair() {
			return getRuleContexts(KeyValuePairContext.class);
		}
		public KeyValuePairContext keyValuePair(int i) {
			return getRuleContext(KeyValuePairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public CommaSeparatedKeyValuePairsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commaSeparatedKeyValuePairs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCommaSeparatedKeyValuePairs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCommaSeparatedKeyValuePairs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCommaSeparatedKeyValuePairs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() throws RecognitionException {
		CommaSeparatedKeyValuePairsContext _localctx = new CommaSeparatedKeyValuePairsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_commaSeparatedKeyValuePairs);
		int _la;
		try {
			setState(5644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5624);
				keyValuePair();
				setState(5629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5625);
					match(COMMA);
					setState(5626);
					keyValuePair();
					}
					}
					setState(5631);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5632);
				match(OPEN_PAREN);
				setState(5634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
				case 1:
					{
					setState(5633);
					keyValuePair();
					}
					break;
				}
				setState(5640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5636);
					match(COMMA);
					setState(5637);
					keyValuePair();
					}
					}
					setState(5642);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5643);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesContext extends ParserRuleContext {
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_values);
		int _la;
		try {
			setState(5666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5646);
				value();
				setState(5651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5647);
					match(COMMA);
					setState(5648);
					value();
					}
					}
					setState(5653);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5654);
				match(OPEN_PAREN);
				{
				setState(5656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5655);
					value();
					}
					break;
				}
				setState(5662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5658);
					match(COMMA);
					setState(5659);
					value();
					}
					}
					setState(5664);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5665);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyValuePairContext extends ParserRuleContext {
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyValuePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterKeyValuePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitKeyValuePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitKeyValuePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyValuePairContext keyValuePair() throws RecognitionException {
		KeyValuePairContext _localctx = new KeyValuePairContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_keyValuePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5668);
			param();
			setState(5669);
			operator();
			setState(5670);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintsContext extends ParserRuleContext {
		public TerminalNode OPEN_HINT() { return getToken(VSqlParser.OPEN_HINT, 0); }
		public List<HintContext> hint() {
			return getRuleContexts(HintContext.class);
		}
		public HintContext hint(int i) {
			return getRuleContext(HintContext.class,i);
		}
		public TerminalNode CLOSE_HINT() { return getToken(VSqlParser.CLOSE_HINT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public HintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintsContext hints() throws RecognitionException {
		HintsContext _localctx = new HintsContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5672);
			match(OPEN_HINT);
			setState(5673);
			hint();
			setState(5678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5674);
				match(COMMA);
				setState(5675);
				hint();
				}
				}
				setState(5680);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5681);
			match(CLOSE_HINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintContext extends ParserRuleContext {
		public TerminalNode K_ALLNODES() { return getToken(VSqlParser.K_ALLNODES, 0); }
		public TerminalNode K_GBYTYPE() { return getToken(VSqlParser.K_GBYTYPE, 0); }
		public TerminalNode K_HASH() { return getToken(VSqlParser.K_HASH, 0); }
		public TerminalNode K_PIPE() { return getToken(VSqlParser.K_PIPE, 0); }
		public TerminalNode K_ENABLE_WITH_CLAUSE_MATERIALIZATION() { return getToken(VSqlParser.K_ENABLE_WITH_CLAUSE_MATERIALIZATION, 0); }
		public TerminalNode K_EARLY_MATERIALIZATION() { return getToken(VSqlParser.K_EARLY_MATERIALIZATION, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_SYN_JOIN() { return getToken(VSqlParser.K_SYN_JOIN, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_SYNTACTIC_JOIN() { return getToken(VSqlParser.K_SYNTACTIC_JOIN, 0); }
		public TerminalNode K_DISTRIB() { return getToken(VSqlParser.K_DISTRIB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_JTYPE() { return getToken(VSqlParser.K_JTYPE, 0); }
		public TerminalNode K_UTYPE() { return getToken(VSqlParser.K_UTYPE, 0); }
		public TerminalNode K_PROJS() { return getToken(VSqlParser.K_PROJS, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public TerminalNode K_SKIP_PROJS() { return getToken(VSqlParser.K_SKIP_PROJS, 0); }
		public TerminalNode K_IGNORECONST() { return getToken(VSqlParser.K_IGNORECONST, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_VERBATIM() { return getToken(VSqlParser.K_VERBATIM, 0); }
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_hint);
		int _la;
		try {
			setState(5749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALLNODES:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5683);
				match(K_ALLNODES);
				}
				}
				break;
			case K_GBYTYPE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5684);
				match(K_GBYTYPE);
				setState(5685);
				_la = _input.LA(1);
				if ( !(_la==K_HASH || _la==K_PIPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_ENABLE_WITH_CLAUSE_MATERIALIZATION:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5686);
				match(K_ENABLE_WITH_CLAUSE_MATERIALIZATION);
				}
				}
				break;
			case K_EARLY_MATERIALIZATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(5687);
				match(K_EARLY_MATERIALIZATION);
				}
				break;
			case K_DIRECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5688);
				match(K_DIRECT);
				}
				break;
			case K_LABEL:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(5689);
				match(K_LABEL);
				setState(5690);
				match(OPEN_PAREN);
				setState(5691);
				value();
				setState(5692);
				match(CLOSE_PAREN);
				}
				setState(5694);
				match(K_SYN_JOIN);
				}
				break;
			case K_SYNTACTIC_JOIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(5696);
				match(K_SYNTACTIC_JOIN);
				}
				break;
			case K_DISTRIB:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(5697);
				match(K_DISTRIB);
				setState(5698);
				match(OPEN_PAREN);
				{
				setState(5699);
				value();
				}
				setState(5704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5700);
					match(COMMA);
					{
					setState(5701);
					value();
					}
					}
					}
					setState(5706);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5707);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_JTYPE:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(5709);
				match(K_JTYPE);
				setState(5710);
				match(OPEN_PAREN);
				{
				setState(5711);
				value();
				}
				setState(5712);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_UTYPE:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(5714);
				match(K_UTYPE);
				setState(5715);
				match(OPEN_PAREN);
				{
				setState(5716);
				value();
				}
				setState(5717);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_PROJS:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(5719);
				match(K_PROJS);
				setState(5720);
				match(OPEN_PAREN);
				{
				setState(5721);
				projectionReference();
				setState(5726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5722);
					match(COMMA);
					setState(5723);
					projectionReference();
					}
					}
					setState(5728);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5729);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SKIP_PROJS:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(5731);
				match(K_SKIP_PROJS);
				setState(5732);
				match(OPEN_PAREN);
				{
				setState(5733);
				projectionReference();
				setState(5738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5734);
					match(COMMA);
					setState(5735);
					projectionReference();
					}
					}
					setState(5740);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5741);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_IGNORECONST:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(5743);
				match(K_IGNORECONST);
				setState(5744);
				match(OPEN_PAREN);
				setState(5745);
				integerNumber();
				setState(5746);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_VERBATIM:
				enterOuterAlt(_localctx, 14);
				{
				setState(5748);
				match(K_VERBATIM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnReferenceContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ColumnReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnReferenceContext columnReference() throws RecognitionException {
		ColumnReferenceContext _localctx = new ColumnReferenceContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_columnReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
			case 1:
				{
				{
				setState(5759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
				case 1:
					{
					setState(5754);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
					case 1:
						{
						setState(5751);
						dbname();
						setState(5752);
						match(DOT);
						}
						break;
					}
					{
					setState(5756);
					schema();
					setState(5757);
					match(DOT);
					}
					}
					break;
				}
				{
				setState(5761);
				table();
				setState(5762);
				match(DOT);
				}
				}
				}
				break;
			}
			setState(5766);
			column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_tableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				setState(5771);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(5768);
					dbname();
					setState(5769);
					match(DOT);
					}
					break;
				}
				{
				setState(5773);
				schema();
				setState(5774);
				match(DOT);
				}
				}
				break;
			}
			setState(5778);
			table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewReferenceContext extends ParserRuleContext {
		public ViewContext view() {
			return getRuleContext(ViewContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ViewReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterViewReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitViewReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitViewReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewReferenceContext viewReference() throws RecognitionException {
		ViewReferenceContext _localctx = new ViewReferenceContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_viewReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				{
				setState(5783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
				case 1:
					{
					setState(5780);
					dbname();
					setState(5781);
					match(DOT);
					}
					break;
				}
				{
				setState(5785);
				schema();
				setState(5786);
				match(DOT);
				}
				}
				break;
			}
			setState(5790);
			view();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceReferenceContext extends ParserRuleContext {
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public SourceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSourceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSourceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSourceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceReferenceContext sourceReference() throws RecognitionException {
		SourceReferenceContext _localctx = new SourceReferenceContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_sourceReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
			case 1:
				{
				setState(5795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(5792);
					dbname();
					setState(5793);
					match(DOT);
					}
					break;
				}
				{
				setState(5797);
				schema();
				setState(5798);
				match(DOT);
				}
				}
				break;
			}
			setState(5802);
			source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterReferenceContext extends ParserRuleContext {
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public FilterReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFilterReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFilterReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFilterReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterReferenceContext filterReference() throws RecognitionException {
		FilterReferenceContext _localctx = new FilterReferenceContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_filterReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				{
				setState(5807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(5804);
					dbname();
					setState(5805);
					match(DOT);
					}
					break;
				}
				{
				setState(5809);
				schema();
				setState(5810);
				match(DOT);
				}
				}
				break;
			}
			setState(5814);
			filter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParserReferenceContext extends ParserRuleContext {
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ParserReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parserReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParserReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParserReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParserReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParserReferenceContext parserReference() throws RecognitionException {
		ParserReferenceContext _localctx = new ParserReferenceContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_parserReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(5819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(5816);
					dbname();
					setState(5817);
					match(DOT);
					}
					break;
				}
				{
				setState(5821);
				schema();
				setState(5822);
				match(DOT);
				}
				}
				break;
			}
			setState(5826);
			parserName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionReferenceContext extends ParserRuleContext {
		public ProjectionContext projection() {
			return getRuleContext(ProjectionContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ProjectionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projectionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjectionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjectionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjectionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionReferenceContext projectionReference() throws RecognitionException {
		ProjectionReferenceContext _localctx = new ProjectionReferenceContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_projectionReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				setState(5836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(5831);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
					case 1:
						{
						setState(5828);
						dbname();
						setState(5829);
						match(DOT);
						}
						break;
					}
					{
					setState(5833);
					schema();
					setState(5834);
					match(DOT);
					}
					}
					break;
				}
				setState(5838);
				table();
				setState(5839);
				match(DOT);
				}
				break;
			}
			setState(5843);
			projection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureReferenceContext extends ParserRuleContext {
		public ProcedureContext procedure() {
			return getRuleContext(ProcedureContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ProcedureReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProcedureReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProcedureReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProcedureReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureReferenceContext procedureReference() throws RecognitionException {
		ProcedureReferenceContext _localctx = new ProcedureReferenceContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_procedureReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(5853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(5848);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
					case 1:
						{
						setState(5845);
						dbname();
						setState(5846);
						match(DOT);
						}
						break;
					}
					{
					setState(5850);
					schema();
					setState(5851);
					match(DOT);
					}
					}
					break;
				}
				setState(5855);
				table();
				setState(5856);
				match(DOT);
				}
				break;
			}
			setState(5860);
			procedure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureContext procedure() throws RecognitionException {
		ProcedureContext _localctx = new ProcedureContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5862);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionReferenceContext extends ParserRuleContext {
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public FunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionReferenceContext functionReference() throws RecognitionException {
		FunctionReferenceContext _localctx = new FunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_functionReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				setState(5867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(5864);
					dbname();
					setState(5865);
					match(DOT);
					}
					break;
				}
				{
				setState(5869);
				schema();
				setState(5870);
				match(DOT);
				}
				}
				break;
			}
			setState(5874);
			function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibraryReferenceContext extends ParserRuleContext {
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public LibraryReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_libraryReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLibraryReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLibraryReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLibraryReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryReferenceContext libraryReference() throws RecognitionException {
		LibraryReferenceContext _localctx = new LibraryReferenceContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_libraryReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				setState(5879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(5876);
					dbname();
					setState(5877);
					match(DOT);
					}
					break;
				}
				{
				setState(5881);
				schema();
				setState(5882);
				match(DOT);
				}
				}
				break;
			}
			setState(5886);
			library();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceReferenceContext extends ParserRuleContext {
		public SequenceContext sequence() {
			return getRuleContext(SequenceContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_sequenceReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
			case 1:
				{
				setState(5891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
				case 1:
					{
					setState(5888);
					dbname();
					setState(5889);
					match(DOT);
					}
					break;
				}
				{
				setState(5893);
				schema();
				setState(5894);
				match(DOT);
				}
				}
				break;
			}
			setState(5898);
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModelReferenceContext extends ParserRuleContext {
		public ModelContext model() {
			return getRuleContext(ModelContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ModelReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modelReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterModelReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitModelReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitModelReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModelReferenceContext modelReference() throws RecognitionException {
		ModelReferenceContext _localctx = new ModelReferenceContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_modelReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				setState(5903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(5900);
					dbname();
					setState(5901);
					match(DOT);
					}
					break;
				}
				{
				setState(5905);
				schema();
				setState(5906);
				match(DOT);
				}
				}
				break;
			}
			setState(5910);
			model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TxtIndexReferenceContext extends ParserRuleContext {
		public TxtIndexContext txtIndex() {
			return getRuleContext(TxtIndexContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TxtIndexReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_txtIndexReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTxtIndexReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTxtIndexReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTxtIndexReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TxtIndexReferenceContext txtIndexReference() throws RecognitionException {
		TxtIndexReferenceContext _localctx = new TxtIndexReferenceContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_txtIndexReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(5915);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(5912);
					dbname();
					setState(5913);
					match(DOT);
					}
					break;
				}
				{
				setState(5917);
				schema();
				setState(5918);
				match(DOT);
				}
				}
				break;
			}
			setState(5922);
			txtIndex();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaReferenceContext extends ParserRuleContext {
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(VSqlParser.DOT, 0); }
		public SchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchemaReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchemaReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaReferenceContext schemaReference() throws RecognitionException {
		SchemaReferenceContext _localctx = new SchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_schemaReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				setState(5924);
				dbname();
				setState(5925);
				match(DOT);
				}
				break;
			}
			setState(5929);
			schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DbnameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public DbnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDbname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDbname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDbname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbnameContext dbname() throws RecognitionException {
		DbnameContext _localctx = new DbnameContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_dbname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5931);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TxtIndexContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TxtIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_txtIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTxtIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTxtIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTxtIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TxtIndexContext txtIndex() throws RecognitionException {
		TxtIndexContext _localctx = new TxtIndexContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_txtIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5933);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_host);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5935);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PortContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public PortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PortContext port() throws RecognitionException {
		PortContext _localctx = new PortContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_port);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5937);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceContext source() throws RecognitionException {
		SourceContext _localctx = new SourceContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5939);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifierContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NotifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNotifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNotifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNotifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifierContext notifier() throws RecognitionException {
		NotifierContext _localctx = new NotifierContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_notifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5941);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModelContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterModel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitModel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitModel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModelContext model() throws RecognitionException {
		ModelContext _localctx = new ModelContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_model);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5943);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterContext filter() throws RecognitionException {
		FilterContext _localctx = new FilterContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_filter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5945);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParserNameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ParserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parserName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParserNameContext parserName() throws RecognitionException {
		ParserNameContext _localctx = new ParserNameContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_parserName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5947);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewContext view() throws RecognitionException {
		ViewContext _localctx = new ViewContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5949);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lb_groupContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Lb_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lb_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLb_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLb_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLb_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lb_groupContext lb_group() throws RecognitionException {
		Lb_groupContext _localctx = new Lb_groupContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_lb_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5951);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_addressContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_addressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_address; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNetwork_address(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNetwork_address(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNetwork_address(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_addressContext network_address() throws RecognitionException {
		Network_addressContext _localctx = new Network_addressContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_network_address);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5953);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutingRuleContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public RoutingRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routingRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRoutingRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRoutingRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRoutingRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutingRuleContext routingRule() throws RecognitionException {
		RoutingRuleContext _localctx = new RoutingRuleContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_routingRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5955);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Branch_identifierContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Branch_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_branch_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBranch_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBranch_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBranch_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Branch_identifierContext branch_identifier() throws RecognitionException {
		Branch_identifierContext _localctx = new Branch_identifierContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_branch_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5957);
			id();
			setState(5959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (FLOAT - 692)) | (1L << (REAL - 692)) | (1L << (DECIMAL - 692)))) != 0)) {
				{
				setState(5958);
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5961);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LangContext extends ParserRuleContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public LangContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lang; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLang(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLang(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLang(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LangContext lang() throws RecognitionException {
		LangContext _localctx = new LangContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_lang);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5963);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourcePoolContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ResourcePoolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourcePool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterResourcePool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitResourcePool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitResourcePool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourcePoolContext resourcePool() throws RecognitionException {
		ResourcePoolContext _localctx = new ResourcePoolContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_resourcePool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5965);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_PUBLIC() { return getToken(VSqlParser.K_PUBLIC, 0); }
		public SchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaContext schema() throws RecognitionException {
		SchemaContext _localctx = new SchemaContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_schema);
		try {
			setState(5969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5967);
				id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5968);
				match(K_PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableContext table() throws RecognitionException {
		TableContext _localctx = new TableContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5971);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamsContext extends ParserRuleContext {
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamsContext params() throws RecognitionException {
		ParamsContext _localctx = new ParamsContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5973);
			param();
			setState(5978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5974);
				match(COMMA);
				setState(5975);
				param();
				}
				}
				setState(5980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_projection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5981);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibraryContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public LibraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLibrary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLibrary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLibrary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryContext library() throws RecognitionException {
		LibraryContext _localctx = new LibraryContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_library);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5983);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionContext extends ParserRuleContext {
		public TerminalNode K_HASH() { return getToken(VSqlParser.K_HASH, 0); }
		public TerminalNode K_ROLLUP() { return getToken(VSqlParser.K_ROLLUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_function);
		try {
			int _alt;
			setState(5992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5985);
				match(K_HASH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5986);
				match(K_ROLLUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5988); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5987);
						id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5990); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,793,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5994);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NodeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_node; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NodeContext node() throws RecognitionException {
		NodeContext _localctx = new NodeContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_node);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5996);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceContext sequence() throws RecognitionException {
		SequenceContext _localctx = new SequenceContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5998);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnContext column() throws RecognitionException {
		ColumnContext _localctx = new ColumnContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6000);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6002);
			_la = _input.LA(1);
			if ( !(_la==DOUBLE_QUOTE_STRING || _la==SINGLE_QUOTE_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleCharContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public SingleCharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleChar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSingleChar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSingleChar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSingleChar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleCharContext singleChar() throws RecognitionException {
		SingleCharContext _localctx = new SingleCharContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_singleChar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6004);
			match(SINGLE_QUOTE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(VSqlParser.REAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6006);
			_la = _input.LA(1);
			if ( !(((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (FLOAT - 692)) | (1L << (REAL - 692)) | (1L << (DECIMAL - 692)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerNumberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public IntegerNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIntegerNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIntegerNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIntegerNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerNumberContext integerNumber() throws RecognitionException {
		IntegerNumberContext _localctx = new IntegerNumberContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_integerNumber);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6008);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskExpContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(VSqlParser.STAR, 0); }
		public AsteriskExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAsteriskExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAsteriskExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAsteriskExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskExpContext asteriskExp() throws RecognitionException {
		AsteriskExpContext _localctx = new AsteriskExpContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_asteriskExp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6010);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubnetContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SubnetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subnet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSubnet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSubnet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSubnet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubnetContext subnet() throws RecognitionException {
		SubnetContext _localctx = new SubnetContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_subnet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6012);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6014);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6016);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MethodContext method() throws RecognitionException {
		MethodContext _localctx = new MethodContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6018);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FaultGroupContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FaultGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_faultGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFaultGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFaultGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFaultGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FaultGroupContext faultGroup() throws RecognitionException {
		FaultGroupContext _localctx = new FaultGroupContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_faultGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6020);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_method_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Auth_method_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_method_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAuth_method_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAuth_method_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAuth_method_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_method_nameContext auth_method_name() throws RecognitionException {
		Auth_method_nameContext _localctx = new Auth_method_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_auth_method_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6022);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6024);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_interfaceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_interfaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_interface; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNetwork_interface(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNetwork_interface(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNetwork_interface(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_interfaceContext network_interface() throws RecognitionException {
		Network_interfaceContext _localctx = new Network_interfaceContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_network_interface);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6026);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProfile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileContext profile() throws RecognitionException {
		ProfileContext _localctx = new ProfileContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_profile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6028);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public TerminalNode WORD() { return getToken(VSqlParser.WORD, 0); }
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode SEMI() { return getToken(VSqlParser.SEMI, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_id);
		int _la;
		try {
			setState(6035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6030);
				match(WORD);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6031);
				match(DOUBLE_QUOTE_STRING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6032);
				match(SINGLE_QUOTE_STRING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6033);
				match(K_DEFAULT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6034);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMI) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueContext extends ParserRuleContext {
		public TerminalNode WORD() { return getToken(VSqlParser.WORD, 0); }
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(VSqlParser.REAL, 0); }
		public TerminalNode ANY() { return getToken(VSqlParser.ANY, 0); }
		public TerminalNode SEMI() { return getToken(VSqlParser.SEMI, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_value);
		int _la;
		try {
			setState(6045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6037);
				match(WORD);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6038);
				match(DOUBLE_QUOTE_STRING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6039);
				match(SINGLE_QUOTE_STRING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6040);
				match(DECIMAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6041);
				match(FLOAT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6042);
				match(REAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6043);
				match(ANY);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6044);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMI) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableOrDisableContext extends ParserRuleContext {
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public EnableOrDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableOrDisable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnableOrDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnableOrDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnableOrDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableOrDisableContext enableOrDisable() throws RecognitionException {
		EnableOrDisableContext _localctx = new EnableOrDisableContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_enableOrDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6047);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLE || _la==K_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullOrNotNullContext extends ParserRuleContext {
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public NullOrNotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrNotNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNullOrNotNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNullOrNotNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNullOrNotNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullOrNotNullContext nullOrNotNull() throws RecognitionException {
		NullOrNotNullContext _localctx = new NullOrNotNullContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_nullOrNotNull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(6049);
				match(K_NOT);
				}
			}

			setState(6052);
			match(K_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddressContext extends ParserRuleContext {
		public TerminalNode IPV4_ADDR() { return getToken(VSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(VSqlParser.IPV6_ADDR, 0); }
		public AddressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_address; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAddress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAddress(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAddress(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddressContext address() throws RecognitionException {
		AddressContext _localctx = new AddressContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_address);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6054);
			_la = _input.LA(1);
			if ( !(_la==IPV4_ADDR || _la==IPV6_ADDR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressionTypeContext extends ParserRuleContext {
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public CompressionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCompressionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCompressionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCompressionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionTypeContext compressionType() throws RecognitionException {
		CompressionTypeContext _localctx = new CompressionTypeContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_compressionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6056);
			_la = _input.LA(1);
			if ( !(_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Password_parameterContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_PASSWORD_LIFE_TIME() { return getToken(VSqlParser.K_PASSWORD_LIFE_TIME, 0); }
		public TerminalNode K_PASSWORD_GRACE_TIME() { return getToken(VSqlParser.K_PASSWORD_GRACE_TIME, 0); }
		public TerminalNode K_FAILED_LOGIN_ATTEMPTS() { return getToken(VSqlParser.K_FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode K_PASSWORD_LOCK_TIME() { return getToken(VSqlParser.K_PASSWORD_LOCK_TIME, 0); }
		public TerminalNode K_PASSWORD_REUSE_MAX() { return getToken(VSqlParser.K_PASSWORD_REUSE_MAX, 0); }
		public TerminalNode K_PASSWORD_REUSE_TIME() { return getToken(VSqlParser.K_PASSWORD_REUSE_TIME, 0); }
		public TerminalNode K_PASSWORD_MAX_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_UPPERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_UPPERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_LOWERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LOWERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_DIGITS() { return getToken(VSqlParser.K_PASSWORD_MIN_DIGITS, 0); }
		public TerminalNode K_PASSWORD_MIN_SYMBOLS() { return getToken(VSqlParser.K_PASSWORD_MIN_SYMBOLS, 0); }
		public Password_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPassword_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPassword_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPassword_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Password_parameterContext password_parameter() throws RecognitionException {
		Password_parameterContext _localctx = new Password_parameterContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_password_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6058);
			_la = _input.LA(1);
			if ( !(_la==K_FAILED_LOGIN_ATTEMPTS || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (K_PASSWORD_GRACE_TIME - 432)) | (1L << (K_PASSWORD_LIFE_TIME - 432)) | (1L << (K_PASSWORD_LOCK_TIME - 432)) | (1L << (K_PASSWORD_MAX_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_DIGITS - 432)) | (1L << (K_PASSWORD_MIN_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 432)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_REUSE_MAX - 432)) | (1L << (K_PASSWORD_REUSE_TIME - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6059);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_operator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6061);
			comparisonOperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode EQUAL_GT() { return getToken(VSqlParser.EQUAL_GT, 0); }
		public TerminalNode GT() { return getToken(VSqlParser.GT, 0); }
		public TerminalNode LT() { return getToken(VSqlParser.LT, 0); }
		public TerminalNode PLUS() { return getToken(VSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(VSqlParser.MINUS, 0); }
		public TerminalNode LTE() { return getToken(VSqlParser.LTE, 0); }
		public TerminalNode GTE() { return getToken(VSqlParser.GTE, 0); }
		public TerminalNode LT_GT() { return getToken(VSqlParser.LT_GT, 0); }
		public TerminalNode BANG_EQUAL() { return getToken(VSqlParser.BANG_EQUAL, 0); }
		public TerminalNode EQUAL2() { return getToken(VSqlParser.EQUAL2, 0); }
		public TerminalNode DIV() { return getToken(VSqlParser.DIV, 0); }
		public TerminalNode STAR() { return getToken(VSqlParser.STAR, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6063);
			_la = _input.LA(1);
			if ( !(((((_la - 658)) & ~0x3f) == 0 && ((1L << (_la - 658)) & ((1L << (MINUS - 658)) | (1L << (STAR - 658)) | (1L << (PLUS - 658)) | (1L << (BANG_EQUAL - 658)) | (1L << (EQUAL - 658)) | (1L << (EQUAL_GT - 658)) | (1L << (EQUAL2 - 658)) | (1L << (GT - 658)) | (1L << (GTE - 658)) | (1L << (LT - 658)) | (1L << (LTE - 658)) | (1L << (LT_GT - 658)) | (1L << (DIV - 658)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_SERIALIZABLE() { return getToken(VSqlParser.K_SERIALIZABLE, 0); }
		public TerminalNode K_REPEATABLE() { return getToken(VSqlParser.K_REPEATABLE, 0); }
		public TerminalNode K_UNCOMMITTED() { return getToken(VSqlParser.K_UNCOMMITTED, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_isolationLevel);
		try {
			setState(6072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6065);
				match(K_READ);
				setState(6066);
				match(K_COMMITTED);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6067);
				match(K_SERIALIZABLE);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(6068);
				match(K_REPEATABLE);
				setState(6069);
				match(K_READ);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(6070);
				match(K_READ);
				setState(6071);
				match(K_UNCOMMITTED);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_ONLY() { return getToken(VSqlParser.K_ONLY, 0); }
		public TerminalNode K_WRITE() { return getToken(VSqlParser.K_WRITE, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_transactionMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6074);
			match(K_READ);
			setState(6076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ONLY || _la==K_WRITE) {
				{
				setState(6075);
				_la = _input.LA(1);
				if ( !(_la==K_ONLY || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_expressionContext extends ParserRuleContext {
		public TerminalNode K_TRUE() { return getToken(VSqlParser.K_TRUE, 0); }
		public TerminalNode K_FALSE() { return getToken(VSqlParser.K_FALSE, 0); }
		public Bool_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBool_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBool_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBool_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expressionContext bool_expression() throws RecognitionException {
		Bool_expressionContext _localctx = new Bool_expressionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_bool_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6078);
			_la = _input.LA(1);
			if ( !(_la==K_FALSE || _la==K_TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypesContext extends ParserRuleContext {
		public BinaryTypesContext binaryTypes() {
			return getRuleContext(BinaryTypesContext.class,0);
		}
		public BooleanTypesContext booleanTypes() {
			return getRuleContext(BooleanTypesContext.class,0);
		}
		public CharTypesContext charTypes() {
			return getRuleContext(CharTypesContext.class,0);
		}
		public DateTypesContext dateTypes() {
			return getRuleContext(DateTypesContext.class,0);
		}
		public ApNumericTypesContext apNumericTypes() {
			return getRuleContext(ApNumericTypesContext.class,0);
		}
		public ENumericTypesContext eNumericTypes() {
			return getRuleContext(ENumericTypesContext.class,0);
		}
		public SpatialTypesContext spatialTypes() {
			return getRuleContext(SpatialTypesContext.class,0);
		}
		public UuidTypesContext uuidTypes() {
			return getRuleContext(UuidTypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public DataTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDataTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDataTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDataTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypesContext dataTypes() throws RecognitionException {
		DataTypesContext _localctx = new DataTypesContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_dataTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(6080);
				binaryTypes();
				}
				break;
			case 2:
				{
				setState(6081);
				booleanTypes();
				}
				break;
			case 3:
				{
				setState(6082);
				charTypes();
				}
				break;
			case 4:
				{
				setState(6083);
				dateTypes();
				}
				break;
			case 5:
				{
				setState(6084);
				apNumericTypes();
				}
				break;
			case 6:
				{
				setState(6085);
				eNumericTypes();
				}
				break;
			case 7:
				{
				setState(6086);
				spatialTypes();
				}
				break;
			case 8:
				{
				setState(6087);
				uuidTypes();
				}
				break;
			}
			setState(6098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				{
				setState(6090);
				match(OPEN_PAREN);
				setState(6091);
				value();
				setState(6094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6092);
					match(COMMA);
					setState(6093);
					value();
					}
				}

				setState(6096);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinaryTypesContext extends ParserRuleContext {
		public TerminalNode K_BINARY() { return getToken(VSqlParser.K_BINARY, 0); }
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_VARBINARY() { return getToken(VSqlParser.K_VARBINARY, 0); }
		public TerminalNode K_BYTEA() { return getToken(VSqlParser.K_BYTEA, 0); }
		public TerminalNode K_RAW() { return getToken(VSqlParser.K_RAW, 0); }
		public BinaryTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binaryTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBinaryTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBinaryTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBinaryTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinaryTypesContext binaryTypes() throws RecognitionException {
		BinaryTypesContext _localctx = new BinaryTypesContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_binaryTypes);
		try {
			setState(6106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6100);
				match(K_BINARY);
				}
				break;
			case K_LONG:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6101);
				match(K_LONG);
				setState(6102);
				match(K_VARBINARY);
				}
				}
				break;
			case K_VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(6103);
				match(K_VARBINARY);
				}
				break;
			case K_BYTEA:
				enterOuterAlt(_localctx, 4);
				{
				setState(6104);
				match(K_BYTEA);
				}
				break;
			case K_RAW:
				enterOuterAlt(_localctx, 5);
				{
				setState(6105);
				match(K_RAW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanTypesContext extends ParserRuleContext {
		public TerminalNode K_BOOLEAN() { return getToken(VSqlParser.K_BOOLEAN, 0); }
		public BooleanTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanTypesContext booleanTypes() throws RecognitionException {
		BooleanTypesContext _localctx = new BooleanTypesContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_booleanTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6108);
			match(K_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharTypesContext extends ParserRuleContext {
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_VARCHAR() { return getToken(VSqlParser.K_VARCHAR, 0); }
		public TerminalNode K_CHAR() { return getToken(VSqlParser.K_CHAR, 0); }
		public CharTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCharTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCharTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCharTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharTypesContext charTypes() throws RecognitionException {
		CharTypesContext _localctx = new CharTypesContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_charTypes);
		try {
			setState(6114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_LONG:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6110);
				match(K_LONG);
				setState(6111);
				match(K_VARCHAR);
				}
				}
				break;
			case K_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6112);
				match(K_CHAR);
				}
				break;
			case K_VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6113);
				match(K_VARCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTypesContext extends ParserRuleContext {
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_TIMEZONE() { return getToken(VSqlParser.K_TIMEZONE, 0); }
		public TerminalNode K_DATE() { return getToken(VSqlParser.K_DATE, 0); }
		public TerminalNode K_SMALLDATETIME() { return getToken(VSqlParser.K_SMALLDATETIME, 0); }
		public TerminalNode K_TIMESTAMP() { return getToken(VSqlParser.K_TIMESTAMP, 0); }
		public TerminalNode K_INTERVAL() { return getToken(VSqlParser.K_INTERVAL, 0); }
		public TerminalNode K_DAY() { return getToken(VSqlParser.K_DAY, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_SECOND() { return getToken(VSqlParser.K_SECOND, 0); }
		public TerminalNode K_YEAR() { return getToken(VSqlParser.K_YEAR, 0); }
		public TerminalNode K_MONTH() { return getToken(VSqlParser.K_MONTH, 0); }
		public DateTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDateTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDateTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDateTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTypesContext dateTypes() throws RecognitionException {
		DateTypesContext _localctx = new DateTypesContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_dateTypes);
		try {
			setState(6135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6116);
				match(K_TIME);
				setState(6117);
				match(K_WITH);
				setState(6118);
				match(K_TIMEZONE);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6119);
				match(K_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6120);
				match(K_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6121);
				match(K_SMALLDATETIME);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(6122);
				match(K_TIMESTAMP);
				setState(6123);
				match(K_WITH);
				setState(6124);
				match(K_TIMEZONE);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(6125);
				match(K_INTERVAL);
				setState(6126);
				match(K_DAY);
				setState(6127);
				match(K_TO);
				setState(6128);
				match(K_SECOND);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(6129);
				match(K_INTERVAL);
				setState(6130);
				match(K_YEAR);
				setState(6131);
				match(K_TO);
				setState(6132);
				match(K_MONTH);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6133);
				match(K_TIMESTAMP);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6134);
				match(K_INTERVAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApNumericTypesContext extends ParserRuleContext {
		public TerminalNode K_DOUBLE() { return getToken(VSqlParser.K_DOUBLE, 0); }
		public TerminalNode K_PRECISION() { return getToken(VSqlParser.K_PRECISION, 0); }
		public TerminalNode K_FLOAT() { return getToken(VSqlParser.K_FLOAT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FLOAT8() { return getToken(VSqlParser.K_FLOAT8, 0); }
		public TerminalNode K_REAL() { return getToken(VSqlParser.K_REAL, 0); }
		public ApNumericTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apNumericTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterApNumericTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitApNumericTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitApNumericTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApNumericTypesContext apNumericTypes() throws RecognitionException {
		ApNumericTypesContext _localctx = new ApNumericTypesContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_apNumericTypes);
		try {
			setState(6146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6137);
				match(K_DOUBLE);
				setState(6138);
				match(K_PRECISION);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6139);
				match(K_FLOAT);
				setState(6140);
				match(OPEN_PAREN);
				setState(6141);
				match(DECIMAL);
				setState(6142);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(6143);
				match(K_FLOAT8);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6144);
				match(K_FLOAT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(6145);
				match(K_REAL);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ENumericTypesContext extends ParserRuleContext {
		public TerminalNode K_BIGINT() { return getToken(VSqlParser.K_BIGINT, 0); }
		public TerminalNode K_INT8() { return getToken(VSqlParser.K_INT8, 0); }
		public TerminalNode K_SMALLINT() { return getToken(VSqlParser.K_SMALLINT, 0); }
		public TerminalNode K_TINYINT() { return getToken(VSqlParser.K_TINYINT, 0); }
		public TerminalNode K_DECIMAL() { return getToken(VSqlParser.K_DECIMAL, 0); }
		public TerminalNode K_NUMERIC() { return getToken(VSqlParser.K_NUMERIC, 0); }
		public TerminalNode K_NUMBER() { return getToken(VSqlParser.K_NUMBER, 0); }
		public TerminalNode K_MONEY() { return getToken(VSqlParser.K_MONEY, 0); }
		public TerminalNode K_INTEGER() { return getToken(VSqlParser.K_INTEGER, 0); }
		public TerminalNode K_INT() { return getToken(VSqlParser.K_INT, 0); }
		public ENumericTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eNumericTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterENumericTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitENumericTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitENumericTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ENumericTypesContext eNumericTypes() throws RecognitionException {
		ENumericTypesContext _localctx = new ENumericTypesContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_eNumericTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6148);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_BIGINT) | (1L << K_DECIMAL) | (1L << K_INT) | (1L << K_INTEGER))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (K_MONEY - 80)) | (1L << (K_NUMBER - 80)) | (1L << (K_NUMERIC - 80)) | (1L << (K_SMALLINT - 80)) | (1L << (K_TINYINT - 80)))) != 0) || _la==K_INT8) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialTypesContext extends ParserRuleContext {
		public TerminalNode K_GEOMETRY() { return getToken(VSqlParser.K_GEOMETRY, 0); }
		public TerminalNode K_GEOGRAPHY() { return getToken(VSqlParser.K_GEOGRAPHY, 0); }
		public SpatialTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSpatialTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSpatialTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSpatialTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialTypesContext spatialTypes() throws RecognitionException {
		SpatialTypesContext _localctx = new SpatialTypesContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_spatialTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6150);
			_la = _input.LA(1);
			if ( !(_la==K_GEOMETRY || _la==K_GEOGRAPHY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidTypesContext extends ParserRuleContext {
		public TerminalNode K_UUID() { return getToken(VSqlParser.K_UUID, 0); }
		public UuidTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUuidTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUuidTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUuidTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidTypesContext uuidTypes() throws RecognitionException {
		UuidTypesContext _localctx = new UuidTypesContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_uuidTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6152);
			match(K_UUID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02b9\u180d\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\3\2\5\2\u02da\n\2\3\2\7\2\u02dd\n\2\f"+
		"\2\16\2\u02e0\13\2\3\2\5\2\u02e3\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\5\3\u036b\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0376"+
		"\n\4\3\4\3\4\3\4\5\4\u037b\n\4\5\4\u037d\n\4\3\4\3\4\3\4\3\4\3\4\5\4\u0384"+
		"\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u038d\n\5\3\5\5\5\u0390\n\5\3\5\5"+
		"\5\u0393\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u039c\n\5\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u03ac\n\6\3\6\3\6\3\6\5\6"+
		"\u03b1\n\6\3\6\5\6\u03b4\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u03c9\n\7\3\b\3\b\3\b\3\b\5\b\u03cf"+
		"\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u03d7\n\b\3\t\3\t\3\t\3\t\3\t\3\t\6\t"+
		"\u03df\n\t\r\t\16\t\u03e0\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u03ea\n\n\5"+
		"\n\u03ec\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u03f6\n\13\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0405\n\r\3\r\3\r"+
		"\3\r\3\r\5\r\u040b\n\r\3\r\3\r\3\r\5\r\u0410\n\r\3\r\3\r\3\r\5\r\u0415"+
		"\n\r\3\r\5\r\u0418\n\r\3\16\3\16\3\16\3\16\7\16\u041e\n\16\f\16\16\16"+
		"\u0421\13\16\3\17\5\17\u0424\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\5\17\u0432\n\17\3\20\3\20\3\20\3\20\3\20\3\21"+
		"\3\21\3\21\3\21\3\21\6\21\u043e\n\21\r\21\16\21\u043f\3\22\3\22\3\22\3"+
		"\22\3\22\3\23\3\23\3\23\3\23\3\23\6\23\u044c\n\23\r\23\16\23\u044d\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\5\24\u0460\n\24\3\24\3\24\3\24\5\24\u0465\n\24\3\24\3\24\3\24\5"+
		"\24\u046a\n\24\3\24\3\24\3\24\5\24\u046f\n\24\3\24\3\24\3\24\5\24\u0474"+
		"\n\24\3\24\3\24\3\24\3\24\3\24\5\24\u047b\n\24\3\24\3\24\3\24\5\24\u0480"+
		"\n\24\3\24\3\24\3\24\5\24\u0485\n\24\3\24\3\24\3\24\5\24\u048a\n\24\3"+
		"\24\3\24\3\24\3\24\3\24\5\24\u0491\n\24\3\25\3\25\3\25\3\25\3\25\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u04a1\n\26\5\26\u04a3\n"+
		"\26\3\26\3\26\3\26\7\26\u04a8\n\26\f\26\16\26\u04ab\13\26\3\26\3\26\5"+
		"\26\u04af\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u04b8\n\27\5\27"+
		"\u04ba\n\27\3\30\3\30\3\30\5\30\u04bf\n\30\3\30\3\30\3\30\3\30\5\30\u04c5"+
		"\n\30\3\30\3\30\3\30\3\30\5\30\u04cb\n\30\3\30\3\30\3\30\5\30\u04d0\n"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u04da\n\30\5\30\u04dc"+
		"\n\30\3\31\3\31\3\31\3\31\5\31\u04e2\n\31\3\31\3\31\3\31\5\31\u04e7\n"+
		"\31\3\31\3\31\3\31\3\31\3\31\5\31\u04ee\n\31\3\31\3\31\3\31\3\31\3\31"+
		"\5\31\u04f5\n\31\3\31\5\31\u04f8\n\31\3\32\3\32\3\32\3\32\3\32\3\33\3"+
		"\33\3\33\3\33\3\33\7\33\u0504\n\33\f\33\16\33\u0507\13\33\3\33\3\33\3"+
		"\34\3\34\3\34\3\34\3\34\7\34\u0510\n\34\f\34\16\34\u0513\13\34\3\35\3"+
		"\35\3\35\5\35\u0518\n\35\3\35\3\35\3\35\3\35\5\35\u051e\n\35\3\35\5\35"+
		"\u0521\n\35\3\35\3\35\5\35\u0525\n\35\3\35\5\35\u0528\n\35\3\35\3\35\3"+
		"\35\3\35\3\35\7\35\u052f\n\35\f\35\16\35\u0532\13\35\3\35\3\35\5\35\u0536"+
		"\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\5\35\u0555\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\5\35\u0560\n\35\3\35\3\35\5\35\u0564\n\35\3\35\3\35\5\35\u0568\n\35\3"+
		"\35\3\35\5\35\u056c\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\5\35\u0577\n\35\3\35\3\35\3\35\3\35\5\35\u057d\n\35\3\35\3\35\3\35\3"+
		"\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u058d\n\35"+
		"\3\36\3\36\3\36\3\36\6\36\u0593\n\36\r\36\16\36\u0594\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\7\37\u059d\n\37\f\37\16\37\u05a0\13\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\7\37\u05a8\n\37\f\37\16\37\u05ab\13\37\5\37\u05ad\n\37\3"+
		"\37\3\37\3\37\5\37\u05b2\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u05b9\n\37"+
		"\3\37\3\37\3\37\3\37\3\37\5\37\u05c0\n\37\3\37\3\37\3\37\5\37\u05c5\n"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u05cd\n\37\3\37\3\37\3\37\5\37"+
		"\u05d2\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u05d9\n\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\5\37\u05e1\n\37\3\37\3\37\3\37\3\37\3\37\7\37\u05e8\n\37"+
		"\f\37\16\37\u05eb\13\37\5\37\u05ed\n\37\3\37\3\37\3\37\3\37\3\37\5\37"+
		"\u05f4\n\37\5\37\u05f6\n\37\5\37\u05f8\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3"+
		" \3 \5 \u0604\n \3 \3 \7 \u0608\n \f \16 \u060b\13 \3 \3 \3 \5 \u0610"+
		"\n \3!\6!\u0613\n!\r!\16!\u0614\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\5#\u0629\n#\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3"+
		"%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3("+
		"\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+"+
		"\3,\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3/\3/\3/\5/\u0677"+
		"\n/\3\60\3\60\5\60\u067b\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u068b\n\61\3\62\3\62\3\62\5\62\u0690"+
		"\n\62\3\62\3\62\5\62\u0694\n\62\3\62\5\62\u0697\n\62\3\62\3\62\5\62\u069b"+
		"\n\62\3\62\5\62\u069e\n\62\3\62\5\62\u06a1\n\62\3\62\3\62\5\62\u06a5\n"+
		"\62\3\62\3\62\3\62\5\62\u06aa\n\62\3\62\3\62\5\62\u06ae\n\62\3\62\3\62"+
		"\5\62\u06b2\n\62\3\62\3\62\5\62\u06b6\n\62\3\62\5\62\u06b9\n\62\3\62\3"+
		"\62\5\62\u06bd\n\62\3\63\3\63\3\63\5\63\u06c2\n\63\3\63\5\63\u06c5\n\63"+
		"\3\63\3\63\5\63\u06c9\n\63\3\63\5\63\u06cc\n\63\3\63\5\63\u06cf\n\63\3"+
		"\63\3\63\5\63\u06d3\n\63\3\63\3\63\3\63\5\63\u06d8\n\63\3\63\3\63\5\63"+
		"\u06dc\n\63\3\63\3\63\5\63\u06e0\n\63\3\63\3\63\5\63\u06e4\n\63\3\63\5"+
		"\63\u06e7\n\63\3\63\3\63\5\63\u06eb\n\63\3\64\3\64\3\64\7\64\u06f0\n\64"+
		"\f\64\16\64\u06f3\13\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u06fb\n\64"+
		"\f\64\16\64\u06fe\13\64\3\64\3\64\3\64\3\64\5\64\u0704\n\64\5\64\u0706"+
		"\n\64\3\64\5\64\u0709\n\64\3\65\3\65\3\65\5\65\u070e\n\65\3\65\5\65\u0711"+
		"\n\65\3\66\3\66\3\67\3\67\3\67\3\67\38\38\38\58\u071c\n8\38\38\38\58\u0721"+
		"\n8\38\38\38\58\u0726\n8\58\u0728\n8\39\39\39\39\39\39\79\u0730\n9\f9"+
		"\169\u0733\139\39\39\59\u0737\n9\39\39\39\39\39\39\79\u073f\n9\f9\169"+
		"\u0742\139\39\39\59\u0746\n9\39\39\39\59\u074b\n9\39\39\39\79\u0750\n"+
		"9\f9\169\u0753\139\39\39\39\79\u0758\n9\f9\169\u075b\139\39\59\u075e\n"+
		"9\59\u0760\n9\39\59\u0763\n9\39\39\39\39\39\39\59\u076b\n9\59\u076d\n"+
		"9\39\59\u0770\n9\39\69\u0773\n9\r9\169\u0774\59\u0777\n9\39\39\59\u077b"+
		"\n9\39\59\u077e\n9\39\39\59\u0782\n9\39\39\59\u0786\n9\39\59\u0789\n9"+
		"\39\39\39\39\39\59\u0790\n9\39\39\59\u0794\n9\39\59\u0797\n9\39\39\39"+
		"\59\u079c\n9\39\39\59\u07a0\n9\39\39\39\59\u07a5\n9\39\39\59\u07a9\n9"+
		"\39\39\59\u07ad\n9\39\39\39\39\39\79\u07b4\n9\f9\169\u07b7\139\39\39\3"+
		"9\59\u07bc\n9\59\u07be\n9\39\39\39\39\79\u07c4\n9\f9\169\u07c7\139\59"+
		"\u07c9\n9\39\59\u07cc\n9\39\39\59\u07d0\n9\39\39\39\59\u07d5\n9\39\59"+
		"\u07d8\n9\39\59\u07db\n9\39\39\39\59\u07e0\n9\39\39\59\u07e4\n9\3:\3:"+
		"\3;\3;\3;\5;\u07eb\n;\3;\3;\3;\3;\5;\u07f1\n;\3;\5;\u07f4\n;\3;\3;\3;"+
		"\5;\u07f9\n;\3;\3;\5;\u07fd\n;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<"+
		"\3<\5<\u080d\n<\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0819\n=\3=\5=\u081c"+
		"\n=\3=\5=\u081f\n=\3>\3>\3>\3>\3>\3>\3>\7>\u0828\n>\f>\16>\u082b\13>\3"+
		">\3>\5>\u082f\n>\3?\3?\3?\3?\3?\3?\5?\u0837\n?\3?\3?\3?\3?\3?\5?\u083e"+
		"\n?\3?\3?\3?\3?\3?\3?\7?\u0846\n?\f?\16?\u0849\13?\3?\3?\5?\u084d\n?\3"+
		"?\3?\3?\3?\3?\3?\7?\u0855\n?\f?\16?\u0858\13?\3?\3?\5?\u085c\n?\3?\3?"+
		"\3?\3?\5?\u0862\n?\3?\3?\3?\3?\3?\3?\5?\u086a\n?\5?\u086c\n?\3?\5?\u086f"+
		"\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\7?\u087c\n?\f?\16?\u087f\13?\3?\3"+
		"?\3?\3?\5?\u0885\n?\3?\3?\3?\5?\u088a\n?\3?\3?\5?\u088e\n?\3?\3?\3?\3"+
		"?\3?\3?\3?\3?\5?\u0898\n?\3?\5?\u089b\n?\3?\3?\5?\u089f\n?\3?\3?\3?\3"+
		"?\3?\5?\u08a6\n?\3?\3?\3?\3?\5?\u08ac\n?\3?\3?\3?\7?\u08b1\n?\f?\16?\u08b4"+
		"\13?\5?\u08b6\n?\3?\5?\u08b9\n?\3?\3?\3?\3?\5?\u08bf\n?\3?\3?\5?\u08c3"+
		"\n?\3?\3?\5?\u08c7\n?\3?\5?\u08ca\n?\3?\5?\u08cd\n?\3?\3?\3?\3?\5?\u08d3"+
		"\n?\3?\3?\5?\u08d7\n?\3?\3?\3?\5?\u08dc\n?\3?\3?\3?\3?\3?\5?\u08e3\n?"+
		"\3?\3?\3?\7?\u08e8\n?\f?\16?\u08eb\13?\5?\u08ed\n?\3?\3?\5?\u08f1\n?\3"+
		"?\3?\5?\u08f5\n?\3?\3?\3?\5?\u08fa\n?\3?\3?\5?\u08fe\n?\3?\3?\5?\u0902"+
		"\n?\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\5A\u090f\nA\3A\3A\3A\3A\3A\3A\5A"+
		"\u0917\nA\3A\5A\u091a\nA\3A\5A\u091d\nA\3A\5A\u0920\nA\3A\5A\u0923\nA"+
		"\3A\5A\u0926\nA\3A\5A\u0929\nA\3A\3A\5A\u092d\nA\3B\3B\3B\3B\3B\5B\u0934"+
		"\nB\3B\3B\3B\3B\3B\5B\u093b\nB\3B\3B\3B\3B\3B\3B\7B\u0943\nB\fB\16B\u0946"+
		"\13B\3B\3B\5B\u094a\nB\3B\3B\3B\3B\3B\7B\u0951\nB\fB\16B\u0954\13B\5B"+
		"\u0956\nB\3B\5B\u0959\nB\3B\3B\3B\3B\3B\3B\5B\u0961\nB\3B\3B\3B\3B\3B"+
		"\3B\5B\u0969\nB\3B\3B\3B\3B\5B\u096f\nB\3B\3B\5B\u0973\nB\3B\5B\u0976"+
		"\nB\3B\3B\5B\u097a\nB\3B\3B\5B\u097e\nB\3B\5B\u0981\nB\3B\3B\5B\u0985"+
		"\nB\3B\3B\3B\5B\u098a\nB\3B\3B\5B\u098e\nB\3B\5B\u0991\nB\3B\3B\3B\5B"+
		"\u0996\nB\3B\3B\5B\u099a\nB\3B\3B\3B\5B\u099f\nB\3B\3B\5B\u09a3\nB\3B"+
		"\3B\5B\u09a7\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\7B\u09b4\nB\fB\16B\u09b7"+
		"\13B\5B\u09b9\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\7B\u09c8\nB\f"+
		"B\16B\u09cb\13B\5B\u09cd\nB\3B\5B\u09d0\nB\3B\3B\3B\5B\u09d5\nB\5B\u09d7"+
		"\nB\3C\3C\3C\3C\3C\3C\3C\3C\5C\u09e1\nC\3D\3D\3D\5D\u09e6\nD\3D\3D\3D"+
		"\3D\3D\3D\5D\u09ee\nD\3D\3D\3D\3D\3D\3D\3D\5D\u09f7\nD\3E\3E\3E\5E\u09fc"+
		"\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0a0a\nE\3F\3F\3F\5F\u0a0f"+
		"\nF\3F\3F\3F\3F\3F\5F\u0a16\nF\3F\3F\3F\3F\3F\3F\3F\5F\u0a1f\nF\3G\3G"+
		"\3G\5G\u0a24\nG\3G\3G\3G\3G\3G\5G\u0a2b\nG\3G\3G\3G\3G\3G\3G\3G\5G\u0a34"+
		"\nG\3H\3H\3H\5H\u0a39\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\5I"+
		"\u0a49\nI\3I\3I\3I\3I\3I\5I\u0a50\nI\3I\3I\3I\3I\3I\5I\u0a57\nI\3I\5I"+
		"\u0a5a\nI\3J\3J\3J\5J\u0a5f\nJ\3J\3J\3J\3J\3J\3J\5J\u0a67\nJ\3J\3J\3J"+
		"\3J\3J\3J\3J\5J\u0a70\nJ\3K\3K\3K\5K\u0a75\nK\3K\3K\3K\3K\3K\3K\5K\u0a7d"+
		"\nK\3K\3K\3K\3K\3K\3L\3L\3L\3L\5L\u0a88\nL\3L\3L\3L\5L\u0a8d\nL\3L\3L"+
		"\6L\u0a91\nL\rL\16L\u0a92\5L\u0a95\nL\3M\3M\3M\3M\3N\3N\3N\5N\u0a9e\n"+
		"N\3N\3N\3N\3N\3N\5N\u0aa5\nN\3N\3N\5N\u0aa9\nN\3O\3O\3O\3O\3O\3O\3O\3"+
		"O\3O\3O\7O\u0ab5\nO\fO\16O\u0ab8\13O\3O\3O\3O\3O\3O\7O\u0abf\nO\fO\16"+
		"O\u0ac2\13O\3O\3O\3O\5O\u0ac7\nO\3O\3O\5O\u0acb\nO\3P\3P\3P\3P\3P\3P\3"+
		"P\3P\3P\5P\u0ad6\nP\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0ae2\nQ\3Q\5Q\u0ae5"+
		"\nQ\3Q\3Q\5Q\u0ae9\nQ\3Q\3Q\5Q\u0aed\nQ\3Q\3Q\5Q\u0af1\nQ\3R\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\3S\3S\3S\3S\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3T\7T\u0b0b"+
		"\nT\fT\16T\u0b0e\13T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3V\3V\5V\u0b1d\n"+
		"V\3V\3V\7V\u0b21\nV\fV\16V\u0b24\13V\3V\3V\3W\5W\u0b29\nW\3W\3W\3X\3X"+
		"\3X\3X\3X\6X\u0b32\nX\rX\16X\u0b33\3Y\3Y\5Y\u0b38\nY\3Y\5Y\u0b3b\nY\3"+
		"Y\5Y\u0b3e\nY\3Z\3Z\5Z\u0b42\nZ\3[\3[\5[\u0b46\n[\3[\3[\3\\\3\\\3\\\5"+
		"\\\u0b4d\n\\\3\\\3\\\3\\\3\\\3\\\7\\\u0b54\n\\\f\\\16\\\u0b57\13\\\3\\"+
		"\3\\\5\\\u0b5b\n\\\3\\\3\\\3\\\5\\\u0b60\n\\\3\\\5\\\u0b63\n\\\3\\\5\\"+
		"\u0b66\n\\\3\\\5\\\u0b69\n\\\3]\3]\5]\u0b6d\n]\3^\3^\3^\5^\u0b72\n^\3"+
		"^\3^\3^\3^\3^\7^\u0b79\n^\f^\16^\u0b7c\13^\3^\3^\5^\u0b80\n^\3^\3^\3^"+
		"\5^\u0b85\n^\3^\3^\5^\u0b89\n^\3_\3_\3_\5_\u0b8e\n_\3_\3_\3_\3_\3_\7_"+
		"\u0b95\n_\f_\16_\u0b98\13_\3_\3_\5_\u0b9c\n_\3_\3_\3_\5_\u0ba1\n_\3_\3"+
		"_\3_\5_\u0ba6\n_\3`\3`\3`\5`\u0bab\n`\3`\3`\3`\3`\3`\7`\u0bb2\n`\f`\16"+
		"`\u0bb5\13`\3`\3`\5`\u0bb9\n`\3`\3`\3`\3`\3`\3`\5`\u0bc1\n`\5`\u0bc3\n"+
		"`\3`\5`\u0bc6\n`\3a\3a\5a\u0bca\na\3a\3a\7a\u0bce\na\fa\16a\u0bd1\13a"+
		"\3a\3a\3a\3a\7a\u0bd7\na\fa\16a\u0bda\13a\5a\u0bdc\na\3b\3b\3b\3b\3b\3"+
		"b\3b\3b\3b\3b\3b\3b\3b\5b\u0beb\nb\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3"+
		"c\3c\5c\u0bfa\nc\3c\3c\3c\3d\3d\3d\3d\3d\6d\u0c04\nd\rd\16d\u0c05\3e\3"+
		"e\3e\3e\3f\3f\3f\3f\3f\3f\3f\3f\3f\3g\3g\3g\5g\u0c18\ng\3g\3g\3g\5g\u0c1d"+
		"\ng\3g\3g\5g\u0c21\ng\3h\3h\3h\5h\u0c26\nh\3h\3h\3h\3h\5h\u0c2c\nh\3h"+
		"\3h\3h\3h\5h\u0c32\nh\3h\3h\3h\3h\5h\u0c38\nh\3h\3h\3h\5h\u0c3d\nh\3h"+
		"\3h\3h\3h\3h\3h\3h\3h\5h\u0c47\nh\5h\u0c49\nh\3i\3i\3i\3i\3i\3i\3j\3j"+
		"\3j\5j\u0c54\nj\3k\3k\5k\u0c58\nk\3k\5k\u0c5b\nk\3k\3k\3l\3l\3l\5l\u0c62"+
		"\nl\3l\3l\5l\u0c66\nl\3l\5l\u0c69\nl\3l\3l\5l\u0c6d\nl\3l\5l\u0c70\nl"+
		"\3l\3l\5l\u0c74\nl\3m\3m\3m\3m\7m\u0c7a\nm\fm\16m\u0c7d\13m\3m\3m\3n\3"+
		"n\5n\u0c83\nn\3n\5n\u0c86\nn\3n\5n\u0c89\nn\3o\3o\3o\3p\3p\3p\3q\3q\3"+
		"q\5q\u0c94\nq\3q\3q\3q\3q\5q\u0c9a\nq\3q\5q\u0c9d\nq\3q\5q\u0ca0\nq\3"+
		"r\3r\3r\5r\u0ca5\nr\3r\3r\3r\3r\3r\3r\3r\7r\u0cae\nr\fr\16r\u0cb1\13r"+
		"\5r\u0cb3\nr\3r\3r\5r\u0cb7\nr\3r\5r\u0cba\nr\3r\5r\u0cbd\nr\3r\5r\u0cc0"+
		"\nr\3r\5r\u0cc3\nr\3r\5r\u0cc6\nr\3s\3s\3s\3s\3s\3s\5s\u0cce\ns\3s\3s"+
		"\3s\3s\3s\3s\5s\u0cd6\ns\3s\3s\3s\5s\u0cdb\ns\3s\3s\3s\3s\3s\5s\u0ce2"+
		"\ns\5s\u0ce4\ns\3t\3t\3t\7t\u0ce9\nt\ft\16t\u0cec\13t\3u\3u\3u\7u\u0cf1"+
		"\nu\fu\16u\u0cf4\13u\3u\5u\u0cf7\nu\3u\5u\u0cfa\nu\3v\3v\3v\3v\3v\7v\u0d01"+
		"\nv\fv\16v\u0d04\13v\3v\3v\5v\u0d08\nv\3v\3v\3v\3v\3v\3v\3v\5v\u0d11\n"+
		"v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0d1c\nv\3v\3v\3v\3v\5v\u0d22\nv\3v\3"+
		"v\3v\3v\5v\u0d28\nv\3v\3v\5v\u0d2c\nv\3v\3v\5v\u0d30\nv\3w\3w\3x\3x\3"+
		"x\3x\3x\5x\u0d39\nx\3x\3x\3x\3x\3x\3x\5x\u0d41\nx\3x\3x\3x\3x\7x\u0d47"+
		"\nx\fx\16x\u0d4a\13x\5x\u0d4c\nx\5x\u0d4e\nx\3y\3y\5y\u0d52\ny\3z\3z\5"+
		"z\u0d56\nz\3z\3z\3z\5z\u0d5b\nz\3z\3z\3z\3z\3z\5z\u0d62\nz\3z\3z\3z\3"+
		"z\5z\u0d68\nz\3z\5z\u0d6b\nz\3z\3z\5z\u0d6f\nz\3z\5z\u0d72\nz\3z\5z\u0d75"+
		"\nz\3z\5z\u0d78\nz\3z\5z\u0d7b\nz\3{\3{\3{\3{\5{\u0d81\n{\3{\3{\5{\u0d85"+
		"\n{\3{\3{\3{\3{\5{\u0d8b\n{\3{\5{\u0d8e\n{\3{\3{\5{\u0d92\n{\3{\5{\u0d95"+
		"\n{\3{\3{\5{\u0d99\n{\3|\3|\3|\3|\3|\7|\u0da0\n|\f|\16|\u0da3\13|\3}\3"+
		"}\5}\u0da7\n}\3}\5}\u0daa\n}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0db8"+
		"\n~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0dc2\n~\5~\u0dc4\n~\3~\3~\3~\3~\3~\3~"+
		"\5~\u0dcc\n~\3\177\3\177\3\177\3\177\7\177\u0dd2\n\177\f\177\16\177\u0dd5"+
		"\13\177\3\u0080\3\u0080\3\u0080\5\u0080\u0dda\n\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\5\u0080\u0de0\n\u0080\3\u0080\3\u0080\3\u0080\3\u0081"+
		"\3\u0081\5\u0081\u0de7\n\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0dec\n"+
		"\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0df4\n"+
		"\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0e02\n\u0084\3\u0084\3\u0084"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0e0b\n\u0085\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0e27"+
		"\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0e2d\n\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\5\u008c\u0e35\n\u008c\3\u008c"+
		"\3\u008c\5\u008c\u0e39\n\u008c\3\u008d\3\u008d\3\u008d\5\u008d\u0e3e\n"+
		"\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0e43\n\u008d\f\u008d\16\u008d"+
		"\u0e46\13\u008d\3\u008d\5\u008d\u0e49\n\u008d\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0e4f\n\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f"+
		"\5\u008f\u0e56\n\u008f\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0e70\n\u0093\3\u0093\3\u0093\3\u0093\7\u0093\u0e75\n\u0093\f"+
		"\u0093\16\u0093\u0e78\13\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u0e7d\n"+
		"\u0094\3\u0094\3\u0094\5\u0094\u0e81\n\u0094\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\3\u0095\3\u0095\5\u0095\u0e89\n\u0095\3\u0096\3\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\5\u0096\u0e91\n\u0096\3\u0097\3\u0097\3\u0097\3"+
		"\u0097\5\u0097\u0e97\n\u0097\3\u0097\3\u0097\5\u0097\u0e9b\n\u0097\3\u0098"+
		"\3\u0098\3\u0098\5\u0098\u0ea0\n\u0098\3\u0098\3\u0098\3\u0099\3\u0099"+
		"\3\u0099\5\u0099\u0ea7\n\u0099\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0eaf\n\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0eb4\n"+
		"\u009a\f\u009a\16\u009a\u0eb7\13\u009a\3\u009a\5\u009a\u0eba\n\u009a\3"+
		"\u009b\3\u009b\3\u009b\5\u009b\u0ebf\n\u009b\3\u009b\3\u009b\3\u009b\7"+
		"\u009b\u0ec4\n\u009b\f\u009b\16\u009b\u0ec7\13\u009b\3\u009b\5\u009b\u0eca"+
		"\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u0ed4\n\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u0ed9\n\u009d\f"+
		"\u009d\16\u009d\u0edc\13\u009d\3\u009d\5\u009d\u0edf\n\u009d\3\u009e\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\5\u009f\u0ee9\n"+
		"\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0eee\n\u009f\f\u009f\16\u009f"+
		"\u0ef1\13\u009f\3\u009f\5\u009f\u0ef4\n\u009f\3\u00a0\3\u00a0\3\u00a0"+
		"\5\u00a0\u0ef9\n\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0efe\n\u00a0\f"+
		"\u00a0\16\u00a0\u0f01\13\u00a0\3\u00a0\5\u00a0\u0f04\n\u00a0\3\u00a1\3"+
		"\u00a1\3\u00a1\5\u00a1\u0f09\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u0f0d\n\u00a1"+
		"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f12\n\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\7\u00a2\u0f17\n\u00a2\f\u00a2\16\u00a2\u0f1a\13\u00a2\3\u00a2\5\u00a2"+
		"\u0f1d\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f23\n\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f2b\n\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0f33\n\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\7\u00a5\u0f38\n\u00a5\f\u00a5\16\u00a5\u0f3b\13"+
		"\u00a5\3\u00a5\5\u00a5\u0f3e\n\u00a5\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f43"+
		"\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u0f4b"+
		"\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0f4f\n\u00a8\3\u00a8\5\u00a8\u0f52\n"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f61\n\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f67\n\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\5\u00a9\u0f6d\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u0f73\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f79\n\u00a9\3"+
		"\u00a9\3\u00a9\5\u00a9\u0f7d\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f87\n\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f8e\n\u00aa\5\u00aa\u0f90\n\u00aa\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f9f\n\u00ab\3\u00ac\3\u00ac\3\u00ac"+
		"\5\u00ac\u0fa4\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0faa\n"+
		"\u00ac\f\u00ac\16\u00ac\u0fad\13\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0fb2\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fb8\n\u00ad\5"+
		"\u00ad\u0fba\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fc7\n\u00ad\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u0fcf\n\u00ad\f\u00ad\16"+
		"\u00ad\u0fd2\13\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\7\u00ad\u0fdb\n\u00ad\f\u00ad\16\u00ad\u0fde\13\u00ad\5\u00ad"+
		"\u0fe0\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fe5\n\u00ad\3\u00ae\3"+
		"\u00ae\3\u00ae\3\u00ae\7\u00ae\u0feb\n\u00ae\f\u00ae\16\u00ae\u0fee\13"+
		"\u00ae\3\u00ae\3\u00ae\5\u00ae\u0ff2\n\u00ae\5\u00ae\u0ff4\n\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0ffb\n\u00ae\f\u00ae\16\u00ae"+
		"\u0ffe\13\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\7\u00ae\u1007\n\u00ae\f\u00ae\16\u00ae\u100a\13\u00ae\5\u00ae\u100c\n"+
		"\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u1011\n\u00ae\3\u00af\3\u00af\3"+
		"\u00af\3\u00af\7\u00af\u1017\n\u00af\f\u00af\16\u00af\u101a\13\u00af\3"+
		"\u00af\3\u00af\5\u00af\u101e\n\u00af\5\u00af\u1020\n\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1028\n\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u102e\n\u00b0\5\u00b0\u1030\n\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u1037\n\u00b0\f\u00b0\16\u00b0"+
		"\u103a\13\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\7\u00b0\u1043\n\u00b0\f\u00b0\16\u00b0\u1046\13\u00b0\5\u00b0\u1048\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u104d\n\u00b0\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\7\u00b1\u1053\n\u00b1\f\u00b1\16\u00b1\u1056\13\u00b1\3"+
		"\u00b1\3\u00b1\5\u00b1\u105a\n\u00b1\5\u00b1\u105c\n\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u1063\n\u00b1\f\u00b1\16\u00b1\u1066"+
		"\13\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u106b\n\u00b1\3\u00b2\3\u00b2"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u1073\n\u00b3\f\u00b3\16\u00b3"+
		"\u1076\13\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u107b\n\u00b3\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1081\n\u00b4\5\u00b4\u1083\n\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u108b\n\u00b4\f"+
		"\u00b4\16\u00b4\u108e\13\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1093\n"+
		"\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u1099\n\u00b5\5\u00b5\u109b"+
		"\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\7\u00b5\u10a5\n\u00b5\f\u00b5\16\u00b5\u10a8\13\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\5\u00b5\u10ad\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6"+
		"\u10b3\n\u00b6\5\u00b6\u10b5\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3"+
		"\u00b6\7\u00b6\u10bc\n\u00b6\f\u00b6\16\u00b6\u10bf\13\u00b6\3\u00b6\3"+
		"\u00b6\3\u00b6\5\u00b6\u10c4\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5"+
		"\u00b7\u10ca\n\u00b7\5\u00b7\u10cc\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\7\u00b7\u10d3\n\u00b7\f\u00b7\16\u00b7\u10d6\13\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u10db\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u10e2\n\u00b8\5\u00b8\u10e4\n\u00b8\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10ec\n\u00b8\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb"+
		"\3\u00bb\3\u00bb\7\u00bb\u10fb\n\u00bb\f\u00bb\16\u00bb\u10fe\13\u00bb"+
		"\3\u00bc\3\u00bc\5\u00bc\u1102\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00be\3\u00be\5\u00be\u110c\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u1111\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u111b\n\u00be\3\u00bf\3\u00bf\5\u00bf"+
		"\u111f\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1124\n\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\5\u00bf\u1129\n\u00bf\3\u00bf\5\u00bf\u112c\n\u00bf\3\u00bf"+
		"\3\u00bf\6\u00bf\u1130\n\u00bf\r\u00bf\16\u00bf\u1131\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u113a\n\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\7\u00c0\u1147\n\u00c0\f\u00c0\16\u00c0\u114a\13\u00c0\3\u00c0\5\u00c0"+
		"\u114d\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u1154\n"+
		"\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\5\u00c0\u115e\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\5\u00c2"+
		"\u1165\n\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3"+
		"\u1176\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u117c\n\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\5\u00c4\u1181\n\u00c4\5\u00c4\u1183\n\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u1189\n\u00c4\f\u00c4\16\u00c4\u118c"+
		"\13\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1191\n\u00c4\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\5\u00c5\u1197\n\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u119c\n\u00c5\5\u00c5\u119e\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u11ab\n"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u11b3\n"+
		"\u00c5\f\u00c5\16\u00c5\u11b6\13\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u11bf\n\u00c5\f\u00c5\16\u00c5\u11c2"+
		"\13\u00c5\5\u00c5\u11c4\n\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u11c9"+
		"\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u11cf\n\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\7\u00c6\u11d4\n\u00c6\f\u00c6\16\u00c6\u11d7\13\u00c6"+
		"\3\u00c6\3\u00c6\5\u00c6\u11db\n\u00c6\5\u00c6\u11dd\n\u00c6\3\u00c6\3"+
		"\u00c6\5\u00c6\u11e1\n\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u11e6\n\u00c6"+
		"\f\u00c6\16\u00c6\u11e9\13\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\7\u00c6\u11f2\n\u00c6\f\u00c6\16\u00c6\u11f5\13\u00c6"+
		"\5\u00c6\u11f7\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u11fc\n\u00c6\3"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1202\n\u00c7\3\u00c7\3\u00c7\3"+
		"\u00c7\7\u00c7\u1207\n\u00c7\f\u00c7\16\u00c7\u120a\13\u00c7\3\u00c7\3"+
		"\u00c7\5\u00c7\u120e\n\u00c7\5\u00c7\u1210\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1218\n\u00c7\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u121e\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1223\n"+
		"\u00c8\5\u00c8\u1225\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7"+
		"\u00c8\u122c\n\u00c8\f\u00c8\16\u00c8\u122f\13\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u1238\n\u00c8\f\u00c8\16"+
		"\u00c8\u123b\13\u00c8\5\u00c8\u123d\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5"+
		"\u00c8\u1242\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1248\n\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u124d\n\u00c9\f\u00c9\16\u00c9\u1250"+
		"\13\u00c9\3\u00c9\3\u00c9\5\u00c9\u1254\n\u00c9\5\u00c9\u1256\n\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u125d\n\u00c9\f\u00c9"+
		"\16\u00c9\u1260\13\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1265\n\u00c9"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u126b\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\7\u00ca\u1270\n\u00ca\f\u00ca\16\u00ca\u1273\13\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u1278\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u127e\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u1283\n\u00cb\5"+
		"\u00cb\u1285\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7"+
		"\u00cb\u128d\n\u00cb\f\u00cb\16\u00cb\u1290\13\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\5\u00cb\u1295\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u129b"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12a0\n\u00cc\5\u00cc\u12a2\n"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\7\u00cc\u12ac\n\u00cc\f\u00cc\16\u00cc\u12af\13\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u12b4\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u12ba\n\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u12bf\n\u00cd\5\u00cd\u12c1"+
		"\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u12c8\n\u00cd"+
		"\f\u00cd\16\u00cd\u12cb\13\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u12d0"+
		"\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u12d6\n\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\5\u00ce\u12db\n\u00ce\5\u00ce\u12dd\n\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u12e4\n\u00ce\f\u00ce\16\u00ce"+
		"\u12e7\13\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u12ec\n\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u12f2\n\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\7\u00cf\u12f7\n\u00cf\f\u00cf\16\u00cf\u12fa\13\u00cf\3\u00cf\3\u00cf"+
		"\5\u00cf\u12fe\n\u00cf\5\u00cf\u1300\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\3\u00cf\5\u00cf\u1308\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\5\u00d1\u1312\n\u00d1\3\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u1317\n\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u1324\n"+
		"\u00d4\3\u00d5\5\u00d5\u1327\n\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u132c"+
		"\n\u00d5\3\u00d5\7\u00d5\u132f\n\u00d5\f\u00d5\16\u00d5\u1332\13\u00d5"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6"+
		"\u133c\n\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1341\n\u00d6\5\u00d6\u1343"+
		"\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\7\u00da\u1359\n\u00da\f\u00da\16\u00da\u135c"+
		"\13\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da"+
		"\u1365\n\u00da\f\u00da\16\u00da\u1368\13\u00da\3\u00da\5\u00da\u136b\n"+
		"\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u1373\n"+
		"\u00db\f\u00db\16\u00db\u1376\13\u00db\3\u00db\5\u00db\u1379\n\u00db\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1387\n\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u138b\n\u00dd\3\u00dd\6\u00dd\u138e\n\u00dd\r\u00dd\16\u00dd\u138f\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1399\n"+
		"\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u13a2\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u13ab\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u13b9\n\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u13c2"+
		"\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u13c9\n\u00e4"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\5\u00e6\u13d4\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u13d8\n\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u13df\n\u00e7\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\5\u00e8\u13e5\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3"+
		"\u00e9\5\u00e9\u13ec\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5"+
		"\u00ea\u13f3\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5"+
		"\u00eb\u13fb\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ec\5\u00ec\u1404\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3"+
		"\u00ee\5\u00ee\u140c\n\u00ee\3\u00ee\3\u00ee\5\u00ee\u1410\n\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\5\u00ee\u1415\n\u00ee\3\u00ee\5\u00ee\u1418\n\u00ee\3"+
		"\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\5\u00f0\u141f\n\u00f0\3\u00f0\5"+
		"\u00f0\u1422\n\u00f0\3\u00f0\5\u00f0\u1425\n\u00f0\3\u00f0\5\u00f0\u1428"+
		"\n\u00f0\3\u00f0\5\u00f0\u142b\n\u00f0\3\u00f0\5\u00f0\u142e\n\u00f0\3"+
		"\u00f0\5\u00f0\u1431\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u1435\n\u00f0\5\u00f0"+
		"\u1437\n\u00f0\3\u00f0\5\u00f0\u143a\n\u00f0\3\u00f0\5\u00f0\u143d\n\u00f0"+
		"\3\u00f0\5\u00f0\u1440\n\u00f0\3\u00f0\5\u00f0\u1443\n\u00f0\3\u00f0\5"+
		"\u00f0\u1446\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7"+
		"\u00f0\u144e\n\u00f0\f\u00f0\16\u00f0\u1451\13\u00f0\5\u00f0\u1453\n\u00f0"+
		"\5\u00f0\u1455\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2"+
		"\5\u00f2\u145d\n\u00f2\3\u00f3\3\u00f3\5\u00f3\u1461\n\u00f3\3\u00f3\5"+
		"\u00f3\u1464\n\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1471\n\u00f6\3\u00f6\7"+
		"\u00f6\u1474\n\u00f6\f\u00f6\16\u00f6\u1477\13\u00f6\3\u00f6\5\u00f6\u147a"+
		"\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u147e\n\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u1482\n\u00f7\3\u00f7\3\u00f7\5\u00f7\u1486\n\u00f7\3\u00f7\3\u00f7\5"+
		"\u00f7\u148a\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1491"+
		"\n\u00f7\5\u00f7\u1493\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9"+
		"\u14a2\n\u00f9\3\u00f9\5\u00f9\u14a5\n\u00f9\3\u00f9\3\u00f9\3\u00fa\3"+
		"\u00fa\3\u00fa\5\u00fa\u14ac\n\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3"+
		"\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\7\u00fd\u14bb\n\u00fd\f\u00fd\16\u00fd\u14be\13\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u14c7\n\u00fe\f\u00fe"+
		"\16\u00fe\u14ca\13\u00fe\5\u00fe\u14cc\n\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\7\u00fe\u14d3\n\u00fe\f\u00fe\16\u00fe\u14d6\13\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u14dd\n\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u14e4\n\u00fe\7\u00fe\u14e6\n"+
		"\u00fe\f\u00fe\16\u00fe\u14e9\13\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\5\u00fe\u14f8\n\u00fe\5\u00fe\u14fa\n\u00fe\3\u00fe\3\u00fe\3\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\5\u00ff\u1502\n\u00ff\3\u00ff\3\u00ff\5\u00ff\u1506"+
		"\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104"+
		"\5\u0104\u1519\n\u0104\3\u0105\3\u0105\3\u0105\7\u0105\u151e\n\u0105\f"+
		"\u0105\16\u0105\u1521\13\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0107\3\u0107\3\u0107\5\u0107\u152b\n\u0107\3\u0107\5\u0107\u152e\n"+
		"\u0107\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1534\n\u0108\3\u0108\3"+
		"\u0108\5\u0108\u1538\n\u0108\3\u0108\3\u0108\5\u0108\u153c\n\u0108\3\u0108"+
		"\3\u0108\5\u0108\u1540\n\u0108\3\u0108\3\u0108\5\u0108\u1544\n\u0108\3"+
		"\u0108\5\u0108\u1547\n\u0108\3\u0108\5\u0108\u154a\n\u0108\3\u0109\3\u0109"+
		"\3\u0109\7\u0109\u154f\n\u0109\f\u0109\16\u0109\u1552\13\u0109\3\u010a"+
		"\3\u010a\5\u010a\u1556\n\u010a\3\u010a\5\u010a\u1559\n\u010a\3\u010b\3"+
		"\u010b\3\u010b\7\u010b\u155e\n\u010b\f\u010b\16\u010b\u1561\13\u010b\3"+
		"\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d"+
		"\u156b\n\u010d\f\u010d\16\u010d\u156e\13\u010d\3\u010d\3\u010d\5\u010d"+
		"\u1572\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1579\n"+
		"\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u157e\n\u010d\f\u010d\16\u010d"+
		"\u1581\13\u010d\3\u010d\5\u010d\u1584\n\u010d\5\u010d\u1586\n\u010d\3"+
		"\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u158f\n"+
		"\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\5\u0110\u1597\n"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u159d\n\u0110\3\u0111\3"+
		"\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\7\u0111"+
		"\u15a8\n\u0111\f\u0111\16\u0111\u15ab\13\u0111\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114"+
		"\5\u0114\u15b9\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\5\u0115\u15c4\n\u0115\3\u0116\3\u0116\5\u0116"+
		"\u15c8\n\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117"+
		"\5\u0117\u15d1\n\u0117\3\u0117\3\u0117\5\u0117\u15d5\n\u0117\3\u0118\3"+
		"\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\7\u0118\u15e1\n\u0118\f\u0118\16\u0118\u15e4\13\u0118\3\u0118\3\u0118"+
		"\5\u0118\u15e8\n\u0118\3\u0118\3\u0118\3\u0119\5\u0119\u15ed\n\u0119\3"+
		"\u0119\3\u0119\3\u011a\3\u011a\3\u011a\5\u011a\u15f4\n\u011a\3\u011a\5"+
		"\u011a\u15f7\n\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\7\u011b\u15fe"+
		"\n\u011b\f\u011b\16\u011b\u1601\13\u011b\3\u011b\3\u011b\5\u011b\u1605"+
		"\n\u011b\3\u011b\3\u011b\7\u011b\u1609\n\u011b\f\u011b\16\u011b\u160c"+
		"\13\u011b\3\u011b\5\u011b\u160f\n\u011b\3\u011c\3\u011c\3\u011c\7\u011c"+
		"\u1614\n\u011c\f\u011c\16\u011c\u1617\13\u011c\3\u011c\3\u011c\5\u011c"+
		"\u161b\n\u011c\3\u011c\3\u011c\7\u011c\u161f\n\u011c\f\u011c\16\u011c"+
		"\u1622\13\u011c\3\u011c\5\u011c\u1625\n\u011c\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011e\3\u011e\3\u011e\3\u011e\7\u011e\u162f\n\u011e\f\u011e"+
		"\16\u011e\u1632\13\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u1649\n\u011f"+
		"\f\u011f\16\u011f\u164c\13\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\7\u011f\u165f\n\u011f\f\u011f\16\u011f\u1662"+
		"\13\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f"+
		"\u166b\n\u011f\f\u011f\16\u011f\u166e\13\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1678\n\u011f\3\u0120"+
		"\3\u0120\3\u0120\5\u0120\u167d\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u1682\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1687\n\u0120\3\u0120\3"+
		"\u0120\3\u0121\3\u0121\3\u0121\5\u0121\u168e\n\u0121\3\u0121\3\u0121\3"+
		"\u0121\5\u0121\u1693\n\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\5"+
		"\u0122\u169a\n\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u169f\n\u0122\3\u0122"+
		"\3\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u16a6\n\u0123\3\u0123\3\u0123"+
		"\3\u0123\5\u0123\u16ab\n\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u16b2\n\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u16b7\n\u0124\3"+
		"\u0124\3\u0124\3\u0125\3\u0125\3\u0125\5\u0125\u16be\n\u0125\3\u0125\3"+
		"\u0125\3\u0125\5\u0125\u16c3\n\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3"+
		"\u0126\5\u0126\u16ca\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u16cf\n\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u16d4\n\u0126\3\u0126\3\u0126\3\u0127"+
		"\3\u0127\3\u0127\5\u0127\u16db\n\u0127\3\u0127\3\u0127\3\u0127\5\u0127"+
		"\u16e0\n\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u16e5\n\u0127\3\u0127\3"+
		"\u0127\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\5\u0129\u16ee\n\u0129\3"+
		"\u0129\3\u0129\3\u0129\5\u0129\u16f3\n\u0129\3\u0129\3\u0129\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u16fa\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u16ff"+
		"\n\u012a\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\5\u012b\u1706\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\5\u012b\u170b\n\u012b\3\u012b\3\u012b\3\u012c"+
		"\3\u012c\3\u012c\5\u012c\u1712\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u1717\n\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\5\u012d\u171e\n"+
		"\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1723\n\u012d\3\u012d\3\u012d\3"+
		"\u012e\3\u012e\3\u012e\5\u012e\u172a\n\u012e\3\u012e\3\u012e\3\u012f\3"+
		"\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133"+
		"\3\u0134\3\u0134\3\u0135\3\u0135\3\u0136\3\u0136\3\u0137\3\u0137\3\u0138"+
		"\3\u0138\3\u0139\3\u0139\3\u013a\3\u013a\3\u013b\3\u013b\3\u013c\3\u013c"+
		"\5\u013c\u174a\n\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f\3\u013f"+
		"\3\u0140\3\u0140\5\u0140\u1754\n\u0140\3\u0141\3\u0141\3\u0142\3\u0142"+
		"\3\u0142\7\u0142\u175b\n\u0142\f\u0142\16\u0142\u175e\13\u0142\3\u0143"+
		"\3\u0143\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\6\u0145\u1767\n\u0145"+
		"\r\u0145\16\u0145\u1768\5\u0145\u176b\n\u0145\3\u0146\3\u0146\3\u0147"+
		"\3\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b"+
		"\3\u014c\3\u014c\3\u014d\3\u014d\3\u014e\3\u014e\3\u014f\3\u014f\3\u0150"+
		"\3\u0150\3\u0151\3\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154"+
		"\3\u0155\3\u0155\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\3\u0158\5\u0158\u1796\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u17a0\n\u0159\3\u015a\3\u015a"+
		"\3\u015b\5\u015b\u17a5\n\u015b\3\u015b\3\u015b\3\u015c\3\u015c\3\u015d"+
		"\3\u015d\3\u015e\3\u015e\3\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u17bb\n\u0161"+
		"\3\u0162\3\u0162\5\u0162\u17bf\n\u0162\3\u0163\3\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u17cb\n\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u17d1\n\u0164\3\u0164\3\u0164"+
		"\5\u0164\u17d5\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\5\u0165\u17dd\n\u0165\3\u0166\3\u0166\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\5\u0167\u17e5\n\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u17fa\n\u0168\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u1805"+
		"\n\u0169\3\u016a\3\u016a\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u0c9f"+
		"\2\u016d\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668"+
		":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a"+
		"\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222"+
		"\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a"+
		"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252"+
		"\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a"+
		"\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282"+
		"\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a"+
		"\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2"+
		"\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca"+
		"\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\2/\5\2\5\5\u0118\u0118\u020e\u020e"+
		"\5\2\u0141\u0141\u016f\u016f\u017c\u017c\4\2\u00c3\u00c3\u01ec\u01ec\4"+
		"\2\u016d\u016d\u0245\u0245\4\2\u00e6\u00e6\u0194\u0194\4\2\u0235\u0235"+
		"\u025a\u025a\7\2\u00bf\u00bf\u0137\u0137\u0170\u0170\u023f\u023f\u0267"+
		"\u0267\4\2\u00fe\u00fe\u0108\u0108\3\2\u0128\u0129\n\2\u00e3\u00e3\u013b"+
		"\u013b\u013d\u0140\u0143\u0143\u0146\u0146\u01c5\u01c5\u0217\u0217\u0256"+
		"\u0258\4\2\u022a\u022a\u022c\u022c\6\2\3\3\u0116\u0116\u0151\u0151\u0174"+
		"\u0174\4\2\u00b0\u00b0\u014a\u014a\5\2\u00af\u00af\u00f9\u00f9\u0237\u0237"+
		"\4\2\u0133\u0133\u016b\u016b\4\2\u00f1\u00f1\u01c9\u01c9\4\2\u00e2\u00e2"+
		"\u01a3\u01a4\6\2\u00a9\u00a9\u015e\u015e\u016b\u016b\u0251\u0251\4\2\u01d9"+
		"\u01d9\u025b\u025b\t\2\32\32mmqq\u00f1\u00f1\u0158\u0158\u0239\u0239\u0249"+
		"\u0249\b\2mmqq\u00f1\u00f1\u0158\u0158\u0239\u0239\u0248\u0248\4\2\32"+
		"\32\u022a\u022a\4\2\u0165\u0165\u02b8\u02b8\4\2\3\3))\4\2\u0275\u0275"+
		"\u0279\u0279\4\2__\u01a0\u01a0\3\2\u0271\u0272\4\2\u0085\u0085\u02a3\u02a3"+
		"\13\2\u00af\u00af\u00b9\u00ba\u00c0\u00c0\u00d3\u00d3\u00f4\u00f4\u00f6"+
		"\u00f6\u0131\u0131\u0138\u0138\u01f1\u01f1\4\2\b\b((\4\2\4\4aa\4\29:K"+
		"L\5\2\4\4WWaa\3\2\u0284\u0285\4\2\u02b3\u02b3\u02b5\u02b5\3\2\u02b6\u02b8"+
		"\3\2\u029b\u029b\3\2\u02ac\u02ad\6\2\u00bf\u00bf\u0137\u0137\u0170\u0170"+
		"\u023f\u023f\4\2\u011f\u011f\u01b2\u01bd\4\2\u0294\u0296\u02a2\u02ab\4"+
		"\2``\u025b\u025b\4\2\60\60\u0089\u0089\n\2\13\13$$?@RR[\\uu\u0084\u0084"+
		"\u027c\u027c\3\2\u027e\u027f\2\u1b34\2\u02de\3\2\2\2\4\u036a\3\2\2\2\6"+
		"\u036c\3\2\2\2\b\u0385\3\2\2\2\n\u039d\3\2\2\2\f\u03b5\3\2\2\2\16\u03ca"+
		"\3\2\2\2\20\u03d8\3\2\2\2\22\u03e2\3\2\2\2\24\u03ef\3\2\2\2\26\u03f7\3"+
		"\2\2\2\30\u03fd\3\2\2\2\32\u0419\3\2\2\2\34\u0431\3\2\2\2\36\u0433\3\2"+
		"\2\2 \u0438\3\2\2\2\"\u0441\3\2\2\2$\u0446\3\2\2\2&\u0490\3\2\2\2(\u0492"+
		"\3\2\2\2*\u0497\3\2\2\2,\u04b0\3\2\2\2.\u04be\3\2\2\2\60\u04dd\3\2\2\2"+
		"\62\u04f9\3\2\2\2\64\u04fe\3\2\2\2\66\u050a\3\2\2\28\u058c\3\2\2\2:\u058e"+
		"\3\2\2\2<\u05f7\3\2\2\2>\u060f\3\2\2\2@\u0612\3\2\2\2B\u0616\3\2\2\2D"+
		"\u0628\3\2\2\2F\u062a\3\2\2\2H\u0632\3\2\2\2J\u063a\3\2\2\2L\u0641\3\2"+
		"\2\2N\u0649\3\2\2\2P\u064f\3\2\2\2R\u0655\3\2\2\2T\u065b\3\2\2\2V\u0661"+
		"\3\2\2\2X\u0667\3\2\2\2Z\u066d\3\2\2\2\\\u0673\3\2\2\2^\u0678\3\2\2\2"+
		"`\u067c\3\2\2\2b\u068c\3\2\2\2d\u06be\3\2\2\2f\u06ec\3\2\2\2h\u070a\3"+
		"\2\2\2j\u0712\3\2\2\2l\u0714\3\2\2\2n\u0727\3\2\2\2p\u0729\3\2\2\2r\u07e5"+
		"\3\2\2\2t\u07e7\3\2\2\2v\u07fe\3\2\2\2x\u0810\3\2\2\2z\u0820\3\2\2\2|"+
		"\u0830\3\2\2\2~\u0903\3\2\2\2\u0080\u0908\3\2\2\2\u0082\u092e\3\2\2\2"+
		"\u0084\u09e0\3\2\2\2\u0086\u09e2\3\2\2\2\u0088\u09f8\3\2\2\2\u008a\u0a0b"+
		"\3\2\2\2\u008c\u0a20\3\2\2\2\u008e\u0a35\3\2\2\2\u0090\u0a45\3\2\2\2\u0092"+
		"\u0a5b\3\2\2\2\u0094\u0a71\3\2\2\2\u0096\u0a83\3\2\2\2\u0098\u0a96\3\2"+
		"\2\2\u009a\u0a9a\3\2\2\2\u009c\u0aaa\3\2\2\2\u009e\u0acc\3\2\2\2\u00a0"+
		"\u0ada\3\2\2\2\u00a2\u0af2\3\2\2\2\u00a4\u0afb\3\2\2\2\u00a6\u0b04\3\2"+
		"\2\2\u00a8\u0b0f\3\2\2\2\u00aa\u0b1a\3\2\2\2\u00ac\u0b28\3\2\2\2\u00ae"+
		"\u0b2c\3\2\2\2\u00b0\u0b37\3\2\2\2\u00b2\u0b3f\3\2\2\2\u00b4\u0b43\3\2"+
		"\2\2\u00b6\u0b49\3\2\2\2\u00b8\u0b6c\3\2\2\2\u00ba\u0b6e\3\2\2\2\u00bc"+
		"\u0b8a\3\2\2\2\u00be\u0ba7\3\2\2\2\u00c0\u0bdb\3\2\2\2\u00c2\u0bdd\3\2"+
		"\2\2\u00c4\u0bec\3\2\2\2\u00c6\u0bfe\3\2\2\2\u00c8\u0c07\3\2\2\2\u00ca"+
		"\u0c0b\3\2\2\2\u00cc\u0c14\3\2\2\2\u00ce\u0c22\3\2\2\2\u00d0\u0c4a\3\2"+
		"\2\2\u00d2\u0c53\3\2\2\2\u00d4\u0c55\3\2\2\2\u00d6\u0c5e\3\2\2\2\u00d8"+
		"\u0c75\3\2\2\2\u00da\u0c80\3\2\2\2\u00dc\u0c8a\3\2\2\2\u00de\u0c8d\3\2"+
		"\2\2\u00e0\u0c90\3\2\2\2\u00e2\u0ca1\3\2\2\2\u00e4\u0cc7\3\2\2\2\u00e6"+
		"\u0ce5\3\2\2\2\u00e8\u0ced\3\2\2\2\u00ea\u0d2f\3\2\2\2\u00ec\u0d31\3\2"+
		"\2\2\u00ee\u0d4d\3\2\2\2\u00f0\u0d51\3\2\2\2\u00f2\u0d53\3\2\2\2\u00f4"+
		"\u0d7c\3\2\2\2\u00f6\u0d9a\3\2\2\2\u00f8\u0da4\3\2\2\2\u00fa\u0dab\3\2"+
		"\2\2\u00fc\u0dcd\3\2\2\2\u00fe\u0dd6\3\2\2\2\u0100\u0de4\3\2\2\2\u0102"+
		"\u0df3\3\2\2\2\u0104\u0df5\3\2\2\2\u0106\u0dfa\3\2\2\2\u0108\u0e05\3\2"+
		"\2\2\u010a\u0e0c\3\2\2\2\u010c\u0e11\3\2\2\2\u010e\u0e16\3\2\2\2\u0110"+
		"\u0e1a\3\2\2\2\u0112\u0e1d\3\2\2\2\u0114\u0e28\3\2\2\2\u0116\u0e31\3\2"+
		"\2\2\u0118\u0e3a\3\2\2\2\u011a\u0e4a\3\2\2\2\u011c\u0e52\3\2\2\2\u011e"+
		"\u0e5a\3\2\2\2\u0120\u0e60\3\2\2\2\u0122\u0e66\3\2\2\2\u0124\u0e6c\3\2"+
		"\2\2\u0126\u0e79\3\2\2\2\u0128\u0e82\3\2\2\2\u012a\u0e8a\3\2\2\2\u012c"+
		"\u0e92\3\2\2\2\u012e\u0e9c\3\2\2\2\u0130\u0ea3\3\2\2\2\u0132\u0eab\3\2"+
		"\2\2\u0134\u0ebb\3\2\2\2\u0136\u0ecb\3\2\2\2\u0138\u0ed0\3\2\2\2\u013a"+
		"\u0ee0\3\2\2\2\u013c\u0ee5\3\2\2\2\u013e\u0ef5\3\2\2\2\u0140\u0f05\3\2"+
		"\2\2\u0142\u0f0e\3\2\2\2\u0144\u0f1e\3\2\2\2\u0146\u0f26\3\2\2\2\u0148"+
		"\u0f2f\3\2\2\2\u014a\u0f3f\3\2\2\2\u014c\u0f48\3\2\2\2\u014e\u0f4c\3\2"+
		"\2\2\u0150\u0f55\3\2\2\2\u0152\u0f81\3\2\2\2\u0154\u0f9e\3\2\2\2\u0156"+
		"\u0fa0\3\2\2\2\u0158\u0fb3\3\2\2\2\u015a\u0fe6\3\2\2\2\u015c\u1012\3\2"+
		"\2\2\u015e\u1029\3\2\2\2\u0160\u104e\3\2\2\2\u0162\u106c\3\2\2\2\u0164"+
		"\u106e\3\2\2\2\u0166\u107c\3\2\2\2\u0168\u1094\3\2\2\2\u016a\u10ae\3\2"+
		"\2\2\u016c\u10c5\3\2\2\2\u016e\u10dc\3\2\2\2\u0170\u10ed\3\2\2\2\u0172"+
		"\u10f3\3\2\2\2\u0174\u10f7\3\2\2\2\u0176\u1101\3\2\2\2\u0178\u1103\3\2"+
		"\2\2\u017a\u1109\3\2\2\2\u017c\u111c\3\2\2\2\u017e\u115d\3\2\2\2\u0180"+
		"\u115f\3\2\2\2\u0182\u1162\3\2\2\2\u0184\u1175\3\2\2\2\u0186\u1177\3\2"+
		"\2\2\u0188\u1192\3\2\2\2\u018a\u11ca\3\2\2\2\u018c\u11fd\3\2\2\2\u018e"+
		"\u1219\3\2\2\2\u0190\u1243\3\2\2\2\u0192\u1266\3\2\2\2\u0194\u1279\3\2"+
		"\2\2\u0196\u1296\3\2\2\2\u0198\u12b5\3\2\2\2\u019a\u12d1\3\2\2\2\u019c"+
		"\u12ed\3\2\2\2\u019e\u1309\3\2\2\2\u01a0\u130f\3\2\2\2\u01a2\u1313\3\2"+
		"\2\2\u01a4\u131a\3\2\2\2\u01a6\u1323\3\2\2\2\u01a8\u1326\3\2\2\2\u01aa"+
		"\u1333\3\2\2\2\u01ac\u1344\3\2\2\2\u01ae\u1349\3\2\2\2\u01b0\u134e\3\2"+
		"\2\2\u01b2\u1353\3\2\2\2\u01b4\u136c\3\2\2\2\u01b6\u137a\3\2\2\2\u01b8"+
		"\u1380\3\2\2\2\u01ba\u1391\3\2\2\2\u01bc\u139a\3\2\2\2\u01be\u13a3\3\2"+
		"\2\2\u01c0\u13ac\3\2\2\2\u01c2\u13b2\3\2\2\2\u01c4\u13ba\3\2\2\2\u01c6"+
		"\u13c3\3\2\2\2\u01c8\u13ca\3\2\2\2\u01ca\u13cf\3\2\2\2\u01cc\u13db\3\2"+
		"\2\2\u01ce\u13e0\3\2\2\2\u01d0\u13e6\3\2\2\2\u01d2\u13ed\3\2\2\2\u01d4"+
		"\u13f4\3\2\2\2\u01d6\u13fc\3\2\2\2\u01d8\u1405\3\2\2\2\u01da\u1409\3\2"+
		"\2\2\u01dc\u1419\3\2\2\2\u01de\u141c\3\2\2\2\u01e0\u1456\3\2\2\2\u01e2"+
		"\u1459\3\2\2\2\u01e4\u145e\3\2\2\2\u01e6\u1467\3\2\2\2\u01e8\u146a\3\2"+
		"\2\2\u01ea\u146d\3\2\2\2\u01ec\u1492\3\2\2\2\u01ee\u1494\3\2\2\2\u01f0"+
		"\u149c\3\2\2\2\u01f2\u14a8\3\2\2\2\u01f4\u14af\3\2\2\2\u01f6\u14b2\3\2"+
		"\2\2\u01f8\u14b5\3\2\2\2\u01fa\u14bf\3\2\2\2\u01fc\u14fd\3\2\2\2\u01fe"+
		"\u1507\3\2\2\2\u0200\u150a\3\2\2\2\u0202\u150e\3\2\2\2\u0204\u1512\3\2"+
		"\2\2\u0206\u1516\3\2\2\2\u0208\u151a\3\2\2\2\u020a\u1522\3\2\2\2\u020c"+
		"\u152a\3\2\2\2\u020e\u152f\3\2\2\2\u0210\u154b\3\2\2\2\u0212\u1558\3\2"+
		"\2\2\u0214\u155a\3\2\2\2\u0216\u1562\3\2\2\2\u0218\u1585\3\2\2\2\u021a"+
		"\u158e\3\2\2\2\u021c\u1590\3\2\2\2\u021e\u1594\3\2\2\2\u0220\u159e\3\2"+
		"\2\2\u0222\u15ac\3\2\2\2\u0224\u15b1\3\2\2\2\u0226\u15b5\3\2\2\2\u0228"+
		"\u15c3\3\2\2\2\u022a\u15c5\3\2\2\2\u022c\u15cd\3\2\2\2\u022e\u15d6\3\2"+
		"\2\2\u0230\u15ec\3\2\2\2\u0232\u15f0\3\2\2\2\u0234\u160e\3\2\2\2\u0236"+
		"\u1624\3\2\2\2\u0238\u1626\3\2\2\2\u023a\u162a\3\2\2\2\u023c\u1677\3\2"+
		"\2\2\u023e\u1686\3\2\2\2\u0240\u1692\3\2\2\2\u0242\u169e\3\2\2\2\u0244"+
		"\u16aa\3\2\2\2\u0246\u16b6\3\2\2\2\u0248\u16c2\3\2\2\2\u024a\u16d3\3\2"+
		"\2\2\u024c\u16e4\3\2\2\2\u024e\u16e8\3\2\2\2\u0250\u16f2\3\2\2\2\u0252"+
		"\u16fe\3\2\2\2\u0254\u170a\3\2\2\2\u0256\u1716\3\2\2\2\u0258\u1722\3\2"+
		"\2\2\u025a\u1729\3\2\2\2\u025c\u172d\3\2\2\2\u025e\u172f\3\2\2\2\u0260"+
		"\u1731\3\2\2\2\u0262\u1733\3\2\2\2\u0264\u1735\3\2\2\2\u0266\u1737\3\2"+
		"\2\2\u0268\u1739\3\2\2\2\u026a\u173b\3\2\2\2\u026c\u173d\3\2\2\2\u026e"+
		"\u173f\3\2\2\2\u0270\u1741\3\2\2\2\u0272\u1743\3\2\2\2\u0274\u1745\3\2"+
		"\2\2\u0276\u1747\3\2\2\2\u0278\u174b\3\2\2\2\u027a\u174d\3\2\2\2\u027c"+
		"\u174f\3\2\2\2\u027e\u1753\3\2\2\2\u0280\u1755\3\2\2\2\u0282\u1757\3\2"+
		"\2\2\u0284\u175f\3\2\2\2\u0286\u1761\3\2\2\2\u0288\u176a\3\2\2\2\u028a"+
		"\u176c\3\2\2\2\u028c\u176e\3\2\2\2\u028e\u1770\3\2\2\2\u0290\u1772\3\2"+
		"\2\2\u0292\u1774\3\2\2\2\u0294\u1776\3\2\2\2\u0296\u1778\3\2\2\2\u0298"+
		"\u177a\3\2\2\2\u029a\u177c\3\2\2\2\u029c\u177e\3\2\2\2\u029e\u1780\3\2"+
		"\2\2\u02a0\u1782\3\2\2\2\u02a2\u1784\3\2\2\2\u02a4\u1786\3\2\2\2\u02a6"+
		"\u1788\3\2\2\2\u02a8\u178a\3\2\2\2\u02aa\u178c\3\2\2\2\u02ac\u178e\3\2"+
		"\2\2\u02ae\u1795\3\2\2\2\u02b0\u179f\3\2\2\2\u02b2\u17a1\3\2\2\2\u02b4"+
		"\u17a4\3\2\2\2\u02b6\u17a8\3\2\2\2\u02b8\u17aa\3\2\2\2\u02ba\u17ac\3\2"+
		"\2\2\u02bc\u17af\3\2\2\2\u02be\u17b1\3\2\2\2\u02c0\u17ba\3\2\2\2\u02c2"+
		"\u17bc\3\2\2\2\u02c4\u17c0\3\2\2\2\u02c6\u17ca\3\2\2\2\u02c8\u17dc\3\2"+
		"\2\2\u02ca\u17de\3\2\2\2\u02cc\u17e4\3\2\2\2\u02ce\u17f9\3\2\2\2\u02d0"+
		"\u1804\3\2\2\2\u02d2\u1806\3\2\2\2\u02d4\u1808\3\2\2\2\u02d6\u180a\3\2"+
		"\2\2\u02d8\u02da\5\4\3\2\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da"+
		"\u02db\3\2\2\2\u02db\u02dd\7\u029b\2\2\u02dc\u02d9\3\2\2\2\u02dd\u02e0"+
		"\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0"+
		"\u02de\3\2\2\2\u02e1\u02e3\7\2\2\3\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2"+
		"\2\2\u02e3\3\3\2\2\2\u02e4\u036b\5\6\4\2\u02e5\u036b\5\b\5\2\u02e6\u036b"+
		"\5\n\6\2\u02e7\u036b\5\f\7\2\u02e8\u036b\5\16\b\2\u02e9\u036b\5\20\t\2"+
		"\u02ea\u036b\5\22\n\2\u02eb\u036b\5\24\13\2\u02ec\u036b\5\26\f\2\u02ed"+
		"\u036b\5\30\r\2\u02ee\u036b\5\32\16\2\u02ef\u036b\5\36\20\2\u02f0\u036b"+
		"\5 \21\2\u02f1\u036b\5\"\22\2\u02f2\u036b\5$\23\2\u02f3\u036b\5(\25\2"+
		"\u02f4\u036b\5*\26\2\u02f5\u036b\5,\27\2\u02f6\u036b\5\60\31\2\u02f7\u036b"+
		"\5\62\32\2\u02f8\u036b\5\64\33\2\u02f9\u036b\5\66\34\2\u02fa\u036b\5:"+
		"\36\2\u02fb\u036b\5> \2\u02fc\u036b\5B\"\2\u02fd\u036b\5D#\2\u02fe\u036b"+
		"\5^\60\2\u02ff\u036b\5`\61\2\u0300\u036b\5p9\2\u0301\u036b\5r:\2\u0302"+
		"\u036b\5t;\2\u0303\u036b\5v<\2\u0304\u036b\5x=\2\u0305\u036b\5z>\2\u0306"+
		"\u036b\5|?\2\u0307\u036b\5~@\2\u0308\u036b\5\u0080A\2\u0309\u036b\5\u0082"+
		"B\2\u030a\u036b\5\u0084C\2\u030b\u036b\5\u0096L\2\u030c\u036b\5\u009a"+
		"N\2\u030d\u036b\5\u009cO\2\u030e\u036b\5\u009eP\2\u030f\u036b\5\u00a0"+
		"Q\2\u0310\u036b\5\u00a2R\2\u0311\u036b\5\u00a4S\2\u0312\u036b\5\u00a6"+
		"T\2\u0313\u036b\5\u00a8U\2\u0314\u036b\5\u00aeX\2\u0315\u036b\5\u00b6"+
		"\\\2\u0316\u036b\5\u00b8]\2\u0317\u036b\5\u00be`\2\u0318\u036b\5\u00c6"+
		"d\2\u0319\u036b\5\u00c8e\2\u031a\u036b\5\u00caf\2\u031b\u036b\5\u00cc"+
		"g\2\u031c\u036b\5\u00ceh\2\u031d\u036b\5\u00d0i\2\u031e\u036b\5\u00d2"+
		"j\2\u031f\u036b\5\u00f0y\2\u0320\u036b\5\u00fa~\2\u0321\u036b\5\u00fc"+
		"\177\2\u0322\u036b\5\u00fe\u0080\2\u0323\u036b\5\u0100\u0081\2\u0324\u036b"+
		"\5\u0102\u0082\2\u0325\u036b\5\u0110\u0089\2\u0326\u036b\5\u0112\u008a"+
		"\2\u0327\u036b\5\u0114\u008b\2\u0328\u036b\5\u0116\u008c\2\u0329\u036b"+
		"\5\u0118\u008d\2\u032a\u036b\5\u011a\u008e\2\u032b\u036b\5\u011c\u008f"+
		"\2\u032c\u036b\5\u011e\u0090\2\u032d\u036b\5\u0120\u0091\2\u032e\u036b"+
		"\5\u0122\u0092\2\u032f\u036b\5\u0124\u0093\2\u0330\u036b\5\u0126\u0094"+
		"\2\u0331\u036b\5\u0128\u0095\2\u0332\u036b\5\u012a\u0096\2\u0333\u036b"+
		"\5\u012c\u0097\2\u0334\u036b\5\u012e\u0098\2\u0335\u036b\5\u0130\u0099"+
		"\2\u0336\u036b\5\u0132\u009a\2\u0337\u036b\5\u0134\u009b\2\u0338\u036b"+
		"\5\u0136\u009c\2\u0339\u036b\5\u0138\u009d\2\u033a\u036b\5\u013a\u009e"+
		"\2\u033b\u036b\5\u013c\u009f\2\u033c\u036b\5\u013e\u00a0\2\u033d\u036b"+
		"\5\u0140\u00a1\2\u033e\u036b\5\u0142\u00a2\2\u033f\u036b\5\u0144\u00a3"+
		"\2\u0340\u036b\5\u0146\u00a4\2\u0341\u036b\5\u0148\u00a5\2\u0342\u036b"+
		"\5\u014a\u00a6\2\u0343\u036b\5\u014c\u00a7\2\u0344\u036b\5\u014e\u00a8"+
		"\2\u0345\u036b\5\u0150\u00a9\2\u0346\u036b\5\u0152\u00aa\2\u0347\u036b"+
		"\5\u0154\u00ab\2\u0348\u036b\5\u017a\u00be\2\u0349\u036b\5\u017c\u00bf"+
		"\2\u034a\u036b\5\u0180\u00c1\2\u034b\u036b\5\u0182\u00c2\2\u034c\u036b"+
		"\5\u0184\u00c3\2\u034d\u036b\5\u01a0\u00d1\2\u034e\u036b\5\u01a2\u00d2"+
		"\2\u034f\u036b\5\u01a4\u00d3\2\u0350\u036b\5\u01a8\u00d5\2\u0351\u036b"+
		"\5\u01aa\u00d6\2\u0352\u036b\5\u01ac\u00d7\2\u0353\u036b\5\u01ae\u00d8"+
		"\2\u0354\u036b\5\u01b0\u00d9\2\u0355\u036b\5\u01b2\u00da\2\u0356\u036b"+
		"\5\u01b4\u00db\2\u0357\u036b\5\u01b6\u00dc\2\u0358\u036b\5\u01b8\u00dd"+
		"\2\u0359\u036b\5\u01ba\u00de\2\u035a\u036b\5\u01bc\u00df\2\u035b\u036b"+
		"\5\u01be\u00e0\2\u035c\u036b\5\u01c0\u00e1\2\u035d\u036b\5\u01c2\u00e2"+
		"\2\u035e\u036b\5\u01c4\u00e3\2\u035f\u036b\5\u01c6\u00e4\2\u0360\u036b"+
		"\5\u01c8\u00e5\2\u0361\u036b\5\u01ca\u00e6\2\u0362\u036b\5\u01cc\u00e7"+
		"\2\u0363\u036b\5\u01ce\u00e8\2\u0364\u036b\5\u01d0\u00e9\2\u0365\u036b"+
		"\5\u01d2\u00ea\2\u0366\u036b\5\u01d4\u00eb\2\u0367\u036b\5\u01d6\u00ec"+
		"\2\u0368\u036b\5\u01d8\u00ed\2\u0369\u036b\5\u01da\u00ee\2\u036a\u02e4"+
		"\3\2\2\2\u036a\u02e5\3\2\2\2\u036a\u02e6\3\2\2\2\u036a\u02e7\3\2\2\2\u036a"+
		"\u02e8\3\2\2\2\u036a\u02e9\3\2\2\2\u036a\u02ea\3\2\2\2\u036a\u02eb\3\2"+
		"\2\2\u036a\u02ec\3\2\2\2\u036a\u02ed\3\2\2\2\u036a\u02ee\3\2\2\2\u036a"+
		"\u02ef\3\2\2\2\u036a\u02f0\3\2\2\2\u036a\u02f1\3\2\2\2\u036a\u02f2\3\2"+
		"\2\2\u036a\u02f3\3\2\2\2\u036a\u02f4\3\2\2\2\u036a\u02f5\3\2\2\2\u036a"+
		"\u02f6\3\2\2\2\u036a\u02f7\3\2\2\2\u036a\u02f8\3\2\2\2\u036a\u02f9\3\2"+
		"\2\2\u036a\u02fa\3\2\2\2\u036a\u02fb\3\2\2\2\u036a\u02fc\3\2\2\2\u036a"+
		"\u02fd\3\2\2\2\u036a\u02fe\3\2\2\2\u036a\u02ff\3\2\2\2\u036a\u0300\3\2"+
		"\2\2\u036a\u0301\3\2\2\2\u036a\u0302\3\2\2\2\u036a\u0303\3\2\2\2\u036a"+
		"\u0304\3\2\2\2\u036a\u0305\3\2\2\2\u036a\u0306\3\2\2\2\u036a\u0307\3\2"+
		"\2\2\u036a\u0308\3\2\2\2\u036a\u0309\3\2\2\2\u036a\u030a\3\2\2\2\u036a"+
		"\u030b\3\2\2\2\u036a\u030c\3\2\2\2\u036a\u030d\3\2\2\2\u036a\u030e\3\2"+
		"\2\2\u036a\u030f\3\2\2\2\u036a\u0310\3\2\2\2\u036a\u0311\3\2\2\2\u036a"+
		"\u0312\3\2\2\2\u036a\u0313\3\2\2\2\u036a\u0314\3\2\2\2\u036a\u0315\3\2"+
		"\2\2\u036a\u0316\3\2\2\2\u036a\u0317\3\2\2\2\u036a\u0318\3\2\2\2\u036a"+
		"\u0319\3\2\2\2\u036a\u031a\3\2\2\2\u036a\u031b\3\2\2\2\u036a\u031c\3\2"+
		"\2\2\u036a\u031d\3\2\2\2\u036a\u031e\3\2\2\2\u036a\u031f\3\2\2\2\u036a"+
		"\u0320\3\2\2\2\u036a\u0321\3\2\2\2\u036a\u0322\3\2\2\2\u036a\u0323\3\2"+
		"\2\2\u036a\u0324\3\2\2\2\u036a\u0325\3\2\2\2\u036a\u0326\3\2\2\2\u036a"+
		"\u0327\3\2\2\2\u036a\u0328\3\2\2\2\u036a\u0329\3\2\2\2\u036a\u032a\3\2"+
		"\2\2\u036a\u032b\3\2\2\2\u036a\u032c\3\2\2\2\u036a\u032d\3\2\2\2\u036a"+
		"\u032e\3\2\2\2\u036a\u032f\3\2\2\2\u036a\u0330\3\2\2\2\u036a\u0331\3\2"+
		"\2\2\u036a\u0332\3\2\2\2\u036a\u0333\3\2\2\2\u036a\u0334\3\2\2\2\u036a"+
		"\u0335\3\2\2\2\u036a\u0336\3\2\2\2\u036a\u0337\3\2\2\2\u036a\u0338\3\2"+
		"\2\2\u036a\u0339\3\2\2\2\u036a\u033a\3\2\2\2\u036a\u033b\3\2\2\2\u036a"+
		"\u033c\3\2\2\2\u036a\u033d\3\2\2\2\u036a\u033e\3\2\2\2\u036a\u033f\3\2"+
		"\2\2\u036a\u0340\3\2\2\2\u036a\u0341\3\2\2\2\u036a\u0342\3\2\2\2\u036a"+
		"\u0343\3\2\2\2\u036a\u0344\3\2\2\2\u036a\u0345\3\2\2\2\u036a\u0346\3\2"+
		"\2\2\u036a\u0347\3\2\2\2\u036a\u0348\3\2\2\2\u036a\u0349\3\2\2\2\u036a"+
		"\u034a\3\2\2\2\u036a\u034b\3\2\2\2\u036a\u034c\3\2\2\2\u036a\u034d\3\2"+
		"\2\2\u036a\u034e\3\2\2\2\u036a\u034f\3\2\2\2\u036a\u0350\3\2\2\2\u036a"+
		"\u0351\3\2\2\2\u036a\u0352\3\2\2\2\u036a\u0353\3\2\2\2\u036a\u0354\3\2"+
		"\2\2\u036a\u0355\3\2\2\2\u036a\u0356\3\2\2\2\u036a\u0357\3\2\2\2\u036a"+
		"\u0358\3\2\2\2\u036a\u0359\3\2\2\2\u036a\u035a\3\2\2\2\u036a\u035b\3\2"+
		"\2\2\u036a\u035c\3\2\2\2\u036a\u035d\3\2\2\2\u036a\u035e\3\2\2\2\u036a"+
		"\u035f\3\2\2\2\u036a\u0360\3\2\2\2\u036a\u0361\3\2\2\2\u036a\u0362\3\2"+
		"\2\2\u036a\u0363\3\2\2\2\u036a\u0364\3\2\2\2\u036a\u0365\3\2\2\2\u036a"+
		"\u0366\3\2\2\2\u036a\u0367\3\2\2\2\u036a\u0368\3\2\2\2\u036a\u0369\3\2"+
		"\2\2\u036b\5\3\2\2\2\u036c\u036d\7\u00a5\2\2\u036d\u036e\7\u009a\2\2\u036e"+
		"\u036f\7\u01c3\2\2\u036f\u0370\7_\2\2\u0370\u037c\5\u0240\u0121\2\u0371"+
		"\u0372\7\62\2\2\u0372\u0373\7\27\2\2\u0373\u0375\5\u023e\u0120\2\u0374"+
		"\u0376\5\u0208\u0105\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u037d"+
		"\3\2\2\2\u0377\u0378\7\62\2\2\u0378\u037a\7\u01f6\2\2\u0379\u037b\5\u01f6"+
		"\u00fc\2\u037a\u0379\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d\3\2\2\2\u037c"+
		"\u0371\3\2\2\2\u037c\u0377\3\2\2\2\u037d\u0383\3\2\2\2\u037e\u0384\5\u02b2"+
		"\u015a\2\u037f\u0380\7\u00d9\2\2\u0380\u0381\7\u0085\2\2\u0381\u0382\7"+
		"y\2\2\u0382\u0384\5\u0240\u0121\2\u0383\u037e\3\2\2\2\u0383\u037f\3\2"+
		"\2\2\u0383\u0384\3\2\2\2\u0384\7\3\2\2\2\u0385\u0386\7\u00a5\2\2\u0386"+
		"\u0387\7\u00ae\2\2\u0387\u039b\5\u02a6\u0154\2\u0388\u039c\5\u02b2\u015a"+
		"\2\u0389\u0393\7\u016b\2\2\u038a\u038f\7\u0145\2\2\u038b\u038d\7\u0191"+
		"\2\2\u038c\u038b\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\3\2\2\2\u038e"+
		"\u0390\7\u0231\2\2\u038f\u038c\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391"+
		"\3\2\2\2\u0391\u0393\5\u02b6\u015c\2\u0392\u0389\3\2\2\2\u0392\u038a\3"+
		"\2\2\2\u0393\u039c\3\2\2\2\u0394\u039c\5\u0202\u0102\2\u0395\u0396\7\u0181"+
		"\2\2\u0396\u039c\5\u02a2\u0152\2\u0397\u0398\7\u020a\2\2\u0398\u039c\5"+
		"\u0234\u011b\2\u0399\u039a\7\u01cc\2\2\u039a\u039c\5\u0298\u014d\2\u039b"+
		"\u0388\3\2\2\2\u039b\u0392\3\2\2\2\u039b\u0394\3\2\2\2\u039b\u0395\3\2"+
		"\2\2\u039b\u0397\3\2\2\2\u039b\u0399\3\2\2\2\u039c\t\3\2\2\2\u039d\u039e"+
		"\7\u00a5\2\2\u039e\u039f\7\u00e6\2\2\u039f\u03b3\5\u025c\u012f\2\u03a0"+
		"\u03a1\7\u0105\2\2\u03a1\u03a2\7\3\2\2\u03a2\u03a3\7\u0120\2\2\u03a3\u03b4"+
		"\7\67\2\2\u03a4\u03a5\7\u011d\2\2\u03a5\u03a6\7_\2\2\u03a6\u03b4\5\u029c"+
		"\u014f\2\u03a7\u03a8\7\u01e9\2\2\u03a8\u03b4\7\u0219\2\2\u03a9\u03ab\7"+
		"\u020a\2\2\u03aa\u03ac\7\u01aa\2\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2"+
		"\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03b4\5\u0234\u011b\2\u03ae\u03b0\7\u00cb"+
		"\2\2\u03af\u03b1\7\u01aa\2\2\u03b0\u03af\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1"+
		"\u03b2\3\2\2\2\u03b2\u03b4\5\u0282\u0142\2\u03b3\u03a0\3\2\2\2\u03b3\u03a4"+
		"\3\2\2\2\u03b3\u03a7\3\2\2\2\u03b3\u03a9\3\2\2\2\u03b3\u03ae\3\2\2\2\u03b4"+
		"\13\3\2\2\2\u03b5\u03b6\7\u00a5\2\2\u03b6\u03b7\7\u0120\2\2\u03b7\u03b8"+
		"\7\67\2\2\u03b8\u03c8\5\u02a4\u0153\2\u03b9\u03ba\7\u00a0\2\2\u03ba\u03bb"+
		"\7\u0194\2\2\u03bb\u03c9\5\u028c\u0147\2\u03bc\u03bd\7\u0105\2\2\u03bd"+
		"\u03be\7\u0194\2\2\u03be\u03c9\5\u028c\u0147\2\u03bf\u03c0\7\u00a0\2\2"+
		"\u03c0\u03c1\7\u0120\2\2\u03c1\u03c2\7\67\2\2\u03c2\u03c9\5\u02b0\u0159"+
		"\2\u03c3\u03c4\7\u0105\2\2\u03c4\u03c5\7\u0120\2\2\u03c5\u03c6\7\67\2"+
		"\2\u03c6\u03c9\5\u02b0\u0159\2\u03c7\u03c9\5\u0202\u0102\2\u03c8\u03b9"+
		"\3\2\2\2\u03c8\u03bc\3\2\2\2\u03c8\u03bf\3\2\2\2\u03c8\u03c3\3\2\2\2\u03c8"+
		"\u03c7\3\2\2\2\u03c9\r\3\2\2\2\u03ca\u03cb\7\u00a5\2\2\u03cb\u03cc\7\u012f"+
		"\2\2\u03cc\u03ce\5\u0250\u0129\2\u03cd\u03cf\5\u00aaV\2\u03ce\u03cd\3"+
		"\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d6\3\2\2\2\u03d0\u03d7\5\u0200\u0101"+
		"\2\u03d1\u03d7\5\u0202\u0102\2\u03d2\u03d7\5\u0204\u0103\2\u03d3\u03d4"+
		"\7\u020a\2\2\u03d4\u03d5\7\u0121\2\2\u03d5\u03d7\5\u02c4\u0163\2\u03d6"+
		"\u03d0\3\2\2\2\u03d6\u03d1\3\2\2\2\u03d6\u03d2\3\2\2\2\u03d6\u03d3\3\2"+
		"\2\2\u03d7\17\3\2\2\2\u03d8\u03d9\7\u00a5\2\2\u03d9\u03da\7\u013a\2\2"+
		"\u03da\u03db\7p\2\2\u03db\u03dc\5\u027e\u0140\2\u03dc\u03de\7\u020a\2"+
		"\2\u03dd\u03df\5\u0098M\2\u03de\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0"+
		"\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\21\3\2\2\2\u03e2\u03e3\7\u00a5"+
		"\2\2\u03e3\u03e4\7\u0168\2\2\u03e4\u03eb\5\u0252\u012a\2\u03e5\u03e6\7"+
		"\u00f7\2\2\u03e6\u03e9\5\u02b0\u0159\2\u03e7\u03e8\7\u0162\2\2\u03e8\u03ea"+
		"\5\u027a\u013e\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec\3"+
		"\2\2\2\u03eb\u03e5\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed"+
		"\u03ee\5\u0230\u0119\2\u03ee\23\3\2\2\2\u03ef\u03f0\7\u00a5\2\2\u03f0"+
		"\u03f1\7\u0188\2\2\u03f1\u03f5\5\u0256\u012c\2\u03f2\u03f6\5\u0200\u0101"+
		"\2\u03f3\u03f6\5\u0202\u0102\2\u03f4\u03f6\5\u0204\u0103\2\u03f5\u03f2"+
		"\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f5\u03f4\3\2\2\2\u03f6\25\3\2\2\2\u03f7"+
		"\u03f8\7\u00a5\2\2\u03f8\u03f9\7\u018f\2\2\u03f9\u03fa\7\u015a\2\2\u03fa"+
		"\u03fb\5\u02aa\u0156\2\u03fb\u03fc\5\u0202\u0102\2\u03fc\27\3\2\2\2\u03fd"+
		"\u03fe\7\u00a5\2\2\u03fe\u03ff\7\u0194\2\2\u03ff\u0417\5\u028c\u0147\2"+
		"\u0400\u0401\7\u011d\2\2\u0401\u0402\7_\2\2\u0402\u0418\5\u028c\u0147"+
		"\2\u0403\u0405\7E\2\2\u0404\u0403\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406"+
		"\3\2\2\2\u0406\u0418\5\u02b0\u0159\2\u0407\u040a\7\u01e8\2\2\u0408\u0409"+
		"\7\u0096\2\2\u0409\u040b\5\u02b0\u0159\2\u040a\u0408\3\2\2\2\u040a\u040b"+
		"\3\2\2\2\u040b\u0418\3\2\2\2\u040c\u0418\7\u01e9\2\2\u040d\u040f\7\u020a"+
		"\2\2\u040e\u0410\7\u01aa\2\2\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410"+
		"\u0411\3\2\2\2\u0411\u0418\5\u0234\u011b\2\u0412\u0414\7\u00cb\2\2\u0413"+
		"\u0415\7\u01aa\2\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416"+
		"\3\2\2\2\u0416\u0418\5\u0282\u0142\2\u0417\u0400\3\2\2\2\u0417\u0404\3"+
		"\2\2\2\u0417\u0407\3\2\2\2\u0417\u040c\3\2\2\2\u0417\u040d\3\2\2\2\u0417"+
		"\u0412\3\2\2\2\u0418\31\3\2\2\2\u0419\u041a\7\u00a5\2\2\u041a\u041b\7"+
		"\u0197\2\2\u041b\u041f\5\u0266\u0134\2\u041c\u041e\5\34\17\2\u041d\u041c"+
		"\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420"+
		"\33\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0424\7\u0191\2\2\u0423\u0422\3"+
		"\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\7\25\2\2\u0426"+
		"\u0432\7\u00d2\2\2\u0427\u0432\5\u02b2\u015a\2\u0428\u0429\7\u0149\2\2"+
		"\u0429\u042a\7\u00bc\2\2\u042a\u0432\5\u02b0\u0159\2\u042b\u042c\7\u0178"+
		"\2\2\u042c\u0432\5\u02b0\u0159\2\u042d\u042e\7\u0179\2\2\u042e\u0432\5"+
		"\u02b0\u0159\2\u042f\u0430\7\u01ab\2\2\u0430\u0432\5\u02b0\u0159\2\u0431"+
		"\u0423\3\2\2\2\u0431\u0427\3\2\2\2\u0431\u0428\3\2\2\2\u0431\u042b\3\2"+
		"\2\2\u0431\u042d\3\2\2\2\u0431\u042f\3\2\2\2\u0432\35\3\2\2\2\u0433\u0434"+
		"\7\u00a5\2\2\u0434\u0435\7\u01d1\2\2\u0435\u0436\5\u024a\u0126\2\u0436"+
		"\u0437\5\u0202\u0102\2\u0437\37\3\2\2\2\u0438\u0439\7\u00a5\2\2\u0439"+
		"\u043a\7\u01d0\2\2\u043a\u043b\5\u02ac\u0157\2\u043b\u043d\7M\2\2\u043c"+
		"\u043e\5\u02ba\u015e\2\u043d\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u043d"+
		"\3\2\2\2\u043f\u0440\3\2\2\2\u0440!\3\2\2\2\u0441\u0442\7\u00a5\2\2\u0442"+
		"\u0443\7\u01d0\2\2\u0443\u0444\5\u02ac\u0157\2\u0444\u0445\5\u0202\u0102"+
		"\2\u0445#\3\2\2\2\u0446\u0447\7\u00a5\2\2\u0447\u0448\7\u01ea\2\2\u0448"+
		"\u0449\7\u01c4\2\2\u0449\u044b\5\u027c\u013f\2\u044a\u044c\5&\24\2\u044b"+
		"\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044b\3\2\2\2\u044d\u044e\3\2"+
		"\2\2\u044e%\3\2\2\2\u044f\u0450\7\u00c3\2\2\u0450\u0451\7\u0085\2\2\u0451"+
		"\u0491\5\u02b0\u0159\2\u0452\u0453\7\u00da\2\2\u0453\u0491\t\2\2\2\u0454"+
		"\u045f\7\u00db\2\2\u0455\u0460\7V\2\2\u0456\u0457\5\u02b0\u0159\2\u0457"+
		"\u0458\7\u0293\2\2\u0458\u0459\5\u02b0\u0159\2\u0459\u0460\3\2\2\2\u045a"+
		"\u045b\5\u02b0\u0159\2\u045b\u045c\7\u0294\2\2\u045c\u045d\5\u02b0\u0159"+
		"\2\u045d\u0460\3\2\2\2\u045e\u0460\5\u0296\u014c\2\u045f\u0455\3\2\2\2"+
		"\u045f\u0456\3\2\2\2\u045f\u045a\3\2\2\2\u045f\u045e\3\2\2\2\u0460\u0491"+
		"\3\2\2\2\u0461\u0464\7\u011a\2\2\u0462\u0465\5\u0296\u014c\2\u0463\u0465"+
		"\7\u00af\2\2\u0464\u0462\3\2\2\2\u0464\u0463\3\2\2\2\u0465\u0491\3\2\2"+
		"\2\u0466\u0469\7\u0175\2\2\u0467\u046a\5\u0296\u014c\2\u0468\u046a\7V"+
		"\2\2\u0469\u0467\3\2\2\2\u0469\u0468\3\2\2\2\u046a\u0491\3\2\2\2\u046b"+
		"\u046e\7\u0178\2\2\u046c\u046f\5\u0296\u014c\2\u046d\u046f\7V\2\2\u046e"+
		"\u046c\3\2\2\2\u046e\u046d\3\2\2\2\u046f\u0491\3\2\2\2\u0470\u0473\7\u017a"+
		"\2\2\u0471\u0474\5\u0296\u014c\2\u0472\u0474\7V\2\2\u0473\u0471\3\2\2"+
		"\2\u0473\u0472\3\2\2\2\u0474\u0491\3\2\2\2\u0475\u0476\7\u017e\2\2\u0476"+
		"\u0491\5\u0296\u014c\2\u0477\u047a\7\u01c2\2\2\u0478\u047b\5\u0296\u014c"+
		"\2\u0479\u047b\7\u00af\2\2\u047a\u0478\3\2\2\2\u047a\u0479\3\2\2\2\u047b"+
		"\u0491\3\2\2\2\u047c\u047f\7\u01cc\2\2\u047d\u0480\5\u0298\u014d\2\u047e"+
		"\u0480\7\u0144\2\2\u047f\u047d\3\2\2\2\u047f\u047e\3\2\2\2\u0480\u0491"+
		"\3\2\2\2\u0481\u0484\7\u01d5\2\2\u0482\u0485\5\u0296\u014c\2\u0483\u0485"+
		"\7V\2\2\u0484\u0482\3\2\2\2\u0484\u0483\3\2\2\2\u0485\u0491\3\2\2\2\u0486"+
		"\u0489\7\u01f8\2\2\u0487\u048a\5\u02b0\u0159\2\u0488\u048a\7V\2\2\u0489"+
		"\u0487\3\2\2\2\u0489\u0488\3\2\2\2\u048a\u0491\3\2\2\2\u048b\u048c\7\u01f9"+
		"\2\2\u048c\u0491\t\3\2\2\u048d\u048e\7\u01fa\2\2\u048e\u0491\5\u0296\u014c"+
		"\2\u048f\u0491\7\u0211\2\2\u0490\u044f\3\2\2\2\u0490\u0452\3\2\2\2\u0490"+
		"\u0454\3\2\2\2\u0490\u0461\3\2\2\2\u0490\u0466\3\2\2\2\u0490\u046b\3\2"+
		"\2\2\u0490\u0470\3\2\2\2\u0490\u0475\3\2\2\2\u0490\u0477\3\2\2\2\u0490"+
		"\u047c\3\2\2\2\u0490\u0481\3\2\2\2\u0490\u0486\3\2\2\2\u0490\u048b\3\2"+
		"\2\2\u0490\u048d\3\2\2\2\u0490\u048f\3\2\2\2\u0491\'\3\2\2\2\u0492\u0493"+
		"\7\u00a5\2\2\u0493\u0494\7\u01f2\2\2\u0494\u0495\5\u0278\u013d\2\u0495"+
		"\u0496\5\u0202\u0102\2\u0496)\3\2\2\2\u0497\u0498\7\u00a5\2\2\u0498\u04ae"+
		"\7p\2\2\u0499\u04a2\5\u025a\u012e\2\u049a\u049b\7&\2\2\u049b\u04a3\5\u00d4"+
		"k\2\u049c\u049d\7\u01a9\2\2\u049d\u049e\7\u0085\2\2\u049e\u04a0\5\u02a0"+
		"\u0151\2\u049f\u04a1\7\u00c3\2\2\u04a0\u049f\3\2\2\2\u04a0\u04a1\3\2\2"+
		"\2\u04a1\u04a3\3\2\2\2\u04a2\u049a\3\2\2\2\u04a2\u049c\3\2\2\2\u04a3\u04af"+
		"\3\2\2\2\u04a4\u04a9\5\u025a\u012e\2\u04a5\u04a6\7\u0293\2\2\u04a6\u04a8"+
		"\5\u025a\u012e\2\u04a7\u04a5\3\2\2\2\u04a8\u04ab\3\2\2\2\u04a9\u04a7\3"+
		"\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ac\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac"+
		"\u04ad\5\u0202\u0102\2\u04ad\u04af\3\2\2\2\u04ae\u0499\3\2\2\2\u04ae\u04a4"+
		"\3\2\2\2\u04af+\3\2\2\2\u04b0\u04b1\7\u00a5\2\2\u04b1\u04b2\7\u0206\2"+
		"\2\u04b2\u04b9\5\u0254\u012b\2\u04b3\u04ba\5.\30\2\u04b4\u04b8\5\u0202"+
		"\u0102\2\u04b5\u04b8\5\u0204\u0103\2\u04b6\u04b8\5\u0200\u0101\2\u04b7"+
		"\u04b4\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7\u04b6\3\2\2\2\u04b8\u04ba\3\2"+
		"\2\2\u04b9\u04b3\3\2\2\2\u04b9\u04b7\3\2\2\2\u04ba-\3\2\2\2\u04bb\u04bc"+
		"\7\u0153\2\2\u04bc\u04bd\7\u00bc\2\2\u04bd\u04bf\7\u02b8\2\2\u04be\u04bb"+
		"\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c4\3\2\2\2\u04c0\u04c1\7\u0186\2"+
		"\2\u04c1\u04c5\7\u02b8\2\2\u04c2\u04c3\7\u0191\2\2\u04c3\u04c5\7\u0186"+
		"\2\2\u04c4\u04c0\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5"+
		"\u04ca\3\2\2\2\u04c6\u04c7\7\u017b\2\2\u04c7\u04cb\7\u02b8\2\2\u04c8\u04c9"+
		"\7\u0191\2\2\u04c9\u04cb\7\u017b\2\2\u04ca\u04c6\3\2\2\2\u04ca\u04c8\3"+
		"\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cf\3\2\2\2\u04cc\u04cd\7\u01eb\2\2"+
		"\u04cd\u04ce\7\u0096\2\2\u04ce\u04d0\7\u02b8\2\2\u04cf\u04cc\3\2\2\2\u04cf"+
		"\u04d0\3\2\2\2\u04d0\u04db\3\2\2\2\u04d1\u04d2\7\u00c1\2\2\u04d2\u04dc"+
		"\7\u02b8\2\2\u04d3\u04d4\7\u0191\2\2\u04d4\u04d5\7\u00c1\2\2\u04d5\u04d9"+
		"\3\2\2\2\u04d6\u04da\7\u00e4\2\2\u04d7\u04d8\7\u0191\2\2\u04d8\u04da\7"+
		"\u00e4\2\2\u04d9\u04d6\3\2\2\2\u04d9\u04d7\3\2\2\2\u04da\u04dc\3\2\2\2"+
		"\u04db\u04d1\3\2\2\2\u04db\u04d3\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc/\3"+
		"\2\2\2\u04dd\u04de\7\u00a5\2\2\u04de\u04f7\7\u0209\2\2\u04df\u04e1\7\u020a"+
		"\2\2\u04e0\u04e2\7\u01aa\2\2\u04e1\u04e0\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2"+
		"\u04e3\3\2\2\2\u04e3\u04f8\5\u0234\u011b\2\u04e4\u04e6\7\u00cb\2\2\u04e5"+
		"\u04e7\7\u01aa\2\2\u04e6\u04e5\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8"+
		"\3\2\2\2\u04e8\u04f8\5\u0282\u0142\2\u04e9\u04ea\7\u020a\2\2\u04ea\u04ed"+
		"\7\u023d\2\2\u04eb\u04ec\7\62\2\2\u04ec\u04ee\5\u0286\u0144\2\u04ed\u04eb"+
		"\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f8\5\u0234\u011b"+
		"\2\u04f0\u04f1\7\u00cb\2\2\u04f1\u04f4\7\u023d\2\2\u04f2\u04f3\7\62\2"+
		"\2\u04f3\u04f5\5\u0286\u0144\2\u04f4\u04f2\3\2\2\2\u04f4\u04f5\3\2\2\2"+
		"\u04f5\u04f6\3\2\2\2\u04f6\u04f8\5\u0282\u0142\2\u04f7\u04df\3\2\2\2\u04f7"+
		"\u04e4\3\2\2\2\u04f7\u04e9\3\2\2\2\u04f7\u04f0\3\2\2\2\u04f8\61\3\2\2"+
		"\2\u04f9\u04fa\7\u00a5\2\2\u04fa\u04fb\7\u0224\2\2\u04fb\u04fc\5\u029c"+
		"\u014f\2\u04fc\u04fd\5\u0202\u0102\2\u04fd\63\3\2\2\2\u04fe\u04ff\7\u00a5"+
		"\2\2\u04ff\u0500\7y\2\2\u0500\u0505\5\u0240\u0121\2\u0501\u0502\7\u0293"+
		"\2\2\u0502\u0504\5\u0240\u0121\2\u0503\u0501\3\2\2\2\u0504\u0507\3\2\2"+
		"\2\u0505\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0508\3\2\2\2\u0507\u0505"+
		"\3\2\2\2\u0508\u0509\5\u0202\u0102\2\u0509\65\3\2\2\2\u050a\u050b\7\u00a5"+
		"\2\2\u050b\u050c\7y\2\2\u050c\u050d\5\u0240\u0121\2\u050d\u0511\58\35"+
		"\2\u050e\u0510\58\35\2\u050f\u050e\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f"+
		"\3\2\2\2\u0511\u0512\3\2\2\2\u0512\67\3\2\2\2\u0513\u0511\3\2\2\2\u0514"+
		"\u0515\7\u00a0\2\2\u0515\u0517\7\27\2\2\u0516\u0518\5\u00b4[\2\u0517\u0516"+
		"\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u051a\5\u023e\u0120"+
		"\2\u051a\u0524\5\u02c6\u0164\2\u051b\u051d\7\30\2\2\u051c\u051e\5\u02ae"+
		"\u0158\2\u051d\u051c\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f"+
		"\u0521\5\u02b4\u015b\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0525"+
		"\3\2\2\2\u0522\u0523\7&\2\2\u0523\u0525\5\u0218\u010d\2\u0524\u051b\3"+
		"\2\2\2\u0524\u0522\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0527\3\2\2\2\u0526"+
		"\u0528\5\u01fe\u0100\2\u0527\u0526\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0535"+
		"\3\2\2\2\u0529\u052a\7\u01d2\2\2\u052a\u052b\7\u0298\2\2\u052b\u0530\5"+
		"\u024a\u0126\2\u052c\u052d\7\u0293\2\2\u052d\u052f\5\u024a\u0126\2\u052e"+
		"\u052c\3\2\2\2\u052f\u0532\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2"+
		"\2\2\u0531\u0533\3\2\2\2\u0532\u0530\3\2\2\2\u0533\u0534\7\u0299\2\2\u0534"+
		"\u0536\3\2\2\2\u0535\u0529\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u058d\3\2"+
		"\2\2\u0537\u0538\7\u00a0\2\2\u0538\u058d\5\u00e4s\2\u0539\u053a\7\u00a5"+
		"\2\2\u053a\u053b\7\27\2\2\u053b\u0554\5\u023e\u0120\2\u053c\u053d\7\u020a"+
		"\2\2\u053d\u053e\7&\2\2\u053e\u0555\5\u0218\u010d\2\u053f\u0540\7\u0105"+
		"\2\2\u0540\u0555\7&\2\2\u0541\u0542\7\u020a\2\2\u0542\u0543\7\u008e\2"+
		"\2\u0543\u0555\5\u0218\u010d\2\u0544\u0545\7\u0105\2\2\u0545\u0546\7\u020a"+
		"\2\2\u0546\u0555\7\u008e\2\2\u0547\u0548\7\u020a\2\2\u0548\u0549\7&\2"+
		"\2\u0549\u054a\7\u008e\2\2\u054a\u0555\5\u0218\u010d\2\u054b\u054c\7\u0105"+
		"\2\2\u054c\u054d\7&\2\2\u054d\u054e\7\u008e\2\2\u054e\u0555\5\u0218\u010d"+
		"\2\u054f\u0550\7\u020a\2\2\u0550\u0555\5\u02b4\u015b\2\u0551\u0552\7\u020a"+
		"\2\2\u0552\u0553\7\u028b\2\2\u0553\u0555\5\u02c6\u0164\2\u0554\u053c\3"+
		"\2\2\2\u0554\u053f\3\2\2\2\u0554\u0541\3\2\2\2\u0554\u0544\3\2\2\2\u0554"+
		"\u0547\3\2\2\2\u0554\u054b\3\2\2\2\u0554\u054f\3\2\2\2\u0554\u0551\3\2"+
		"\2\2\u0555\u058d\3\2\2\2\u0556\u0557\7\u00a5\2\2\u0557\u0558\7\30\2\2"+
		"\u0558\u0559\5\u02a8\u0155\2\u0559\u055a\5\u02b2\u015a\2\u055a\u058d\3"+
		"\2\2\2\u055b\u055c\7\u0105\2\2\u055c\u055d\7\30\2\2\u055d\u055f\5\u02a8"+
		"\u0155\2\u055e\u0560\t\4\2\2\u055f\u055e\3\2\2\2\u055f\u0560\3\2\2\2\u0560"+
		"\u058d\3\2\2\2\u0561\u0563\7\u0105\2\2\u0562\u0564\7\27\2\2\u0563\u0562"+
		"\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0567\3\2\2\2\u0565\u0566\7\u014c\2"+
		"\2\u0566\u0568\7.\2\2\u0567\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0569"+
		"\3\2\2\2\u0569\u056b\5\u023e\u0120\2\u056a\u056c\t\4\2\2\u056b\u056a\3"+
		"\2\2\2\u056b\u056c\3\2\2\2\u056c\u058d\3\2\2\2\u056d\u056e\7\u012b\2\2"+
		"\u056e\u056f\7d\2\2\u056f\u058d\5\u0296\u014c\2\u0570\u058d\5\u00d4k\2"+
		"\u0571\u0572\7\u01a9\2\2\u0572\u0573\7\u0085\2\2\u0573\u058d\5\u02a0\u0151"+
		"\2\u0574\u0576\5\u01fc\u00ff\2\u0575\u0577\7\u01e6\2\2\u0576\u0575\3\2"+
		"\2\2\u0576\u0577\3\2\2\2\u0577\u058d\3\2\2\2\u0578\u0579\7\u01e4\2\2\u0579"+
		"\u058d\7\u01b0\2\2\u057a\u057c\7\u01e5\2\2\u057b\u057d\7\27\2\2\u057c"+
		"\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\5\u0290"+
		"\u0149\2\u057f\u0580\7\u0085\2\2\u0580\u0581\5\u0290\u0149\2\u0581\u058d"+
		"\3\2\2\2\u0582\u058d\7\u01e6\2\2\u0583\u0584\7\u020a\2\2\u0584\u0585\7"+
		"\u009f\2\2\u0585\u058d\5\u0218\u010d\2\u0586\u0587\7\u020a\2\2\u0587\u0588"+
		"\7p\2\2\u0588\u058d\5\u027e\u0140\2\u0589\u058a\7\u020a\2\2\u058a\u058b"+
		"\7\u0220\2\2\u058b\u058d\5\u00ecw\2\u058c\u0514\3\2\2\2\u058c\u0537";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u058c\u0539\3\2\2\2\u058c\u0556\3\2\2\2\u058c\u055b\3\2\2\2\u058c"+
		"\u0561\3\2\2\2\u058c\u056d\3\2\2\2\u058c\u0570\3\2\2\2\u058c\u0571\3\2"+
		"\2\2\u058c\u0574\3\2\2\2\u058c\u0578\3\2\2\2\u058c\u057a\3\2\2\2\u058c"+
		"\u0582\3\2\2\2\u058c\u0583\3\2\2\2\u058c\u0586\3\2\2\2\u058c\u0589\3\2"+
		"\2\2\u058d9\3\2\2\2\u058e\u058f\7\u00a5\2\2\u058f\u0590\7\u008d\2\2\u0590"+
		"\u0592\5\u029e\u0150\2\u0591\u0593\5<\37\2\u0592\u0591\3\2\2\2\u0593\u0594"+
		"\3\2\2\2\u0594\u0592\3\2\2\2\u0594\u0595\3\2\2\2\u0595;\3\2\2\2\u0596"+
		"\u0597\7&\2\2\u0597\u05ac\7\u01f2\2\2\u0598\u05ad\7V\2\2\u0599\u059e\5"+
		"\u0278\u013d\2\u059a\u059b\7\u0293\2\2\u059b\u059d\5\u0278\u013d\2\u059c"+
		"\u059a\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059c\3\2\2\2\u059e\u059f\3\2"+
		"\2\2\u059f\u05ad\3\2\2\2\u05a0\u059e\3\2\2\2\u05a1\u05ad\7\3\2\2\u05a2"+
		"\u05a3\7\3\2\2\u05a3\u05a4\7-\2\2\u05a4\u05a9\5\u0278\u013d\2\u05a5\u05a6"+
		"\7\u0293\2\2\u05a6\u05a8\5\u0278\u013d\2\u05a7\u05a5\3\2\2\2\u05a8\u05ab"+
		"\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ad\3\2\2\2\u05ab"+
		"\u05a9\3\2\2\2\u05ac\u0598\3\2\2\2\u05ac\u0599\3\2\2\2\u05ac\u05a1\3\2"+
		"\2\2\u05ac\u05a2\3\2\2\2\u05ad\u05b2\3\2\2\2\u05ae\u05af\7\u01e5\2\2\u05af"+
		"\u05b0\7\u0085\2\2\u05b0\u05b2\5\u02b0\u0159\2\u05b1\u0596\3\2\2\2\u05b1"+
		"\u05ae\3\2\2\2\u05b2\u05f8\3\2\2\2\u05b3\u05b4\7\u009c\2\2\u05b4\u05f6"+
		"\t\5\2\2\u05b5\u05b8\7\u0134\2\2\u05b6\u05b9\7V\2\2\u05b7\u05b9\5\u02b0"+
		"\u0159\2\u05b8\u05b6\3\2\2\2\u05b8\u05b7\3\2\2\2\u05b9\u05f6\3\2\2\2\u05ba"+
		"\u05bb\7\u0149\2\2\u05bb\u05bc\7\u00bc\2\2\u05bc\u05bf\5\u0292\u014a\2"+
		"\u05bd\u05be\7\u01e8\2\2\u05be\u05c0\5\u0292\u014a\2\u05bf\u05bd\3\2\2"+
		"\2\u05bf\u05c0\3\2\2\2\u05c0\u05f6\3\2\2\2\u05c1\u05c4\7\u014b\2\2\u05c2"+
		"\u05c5\7V\2\2\u05c3\u05c5\5\u02b0\u0159\2\u05c4\u05c2\3\2\2\2\u05c4\u05c3"+
		"\3\2\2\2\u05c5\u05f6\3\2\2\2\u05c6\u05cc\7\u0177\2\2\u05c7\u05cd\7V\2"+
		"\2\u05c8\u05c9\5\u0296\u014c\2\u05c9\u05ca\7_\2\2\u05ca\u05cb\t\6\2\2"+
		"\u05cb\u05cd\3\2\2\2\u05cc\u05c7\3\2\2\2\u05cc\u05c8\3\2\2\2\u05cd\u05f6"+
		"\3\2\2\2\u05ce\u05d1\7\u017d\2\2\u05cf\u05d2\7V\2\2\u05d0\u05d2\5\u0292"+
		"\u014a\2\u05d1\u05cf\3\2\2\2\u05d1\u05d0\3\2\2\2\u05d2\u05f6\3\2\2\2\u05d3"+
		"\u05d4\7\u01b1\2\2\u05d4\u05f6\7\u011b\2\2\u05d5\u05d8\7\u01d0\2\2\u05d6"+
		"\u05d9\7&\2\2\u05d7\u05d9\5\u0292\u014a\2\u05d8\u05d6\3\2\2\2\u05d8\u05d7"+
		"\3\2\2\2\u05d9\u05f6\3\2\2\2\u05da\u05db\7\u01ea\2\2\u05db\u05dc\7\u01c4"+
		"\2\2\u05dc\u05f6\5\u0292\u014a\2\u05dd\u05e0\7\u01f8\2\2\u05de\u05e1\7"+
		"V\2\2\u05df\u05e1\5\u0292\u014a\2\u05e0\u05de\3\2\2\2\u05e0\u05df\3\2"+
		"\2\2\u05e1\u05f6\3\2\2\2\u05e2\u05ec\7\u01fe\2\2\u05e3\u05ed\7&\2\2\u05e4"+
		"\u05e9\5\u027e\u0140\2\u05e5\u05e6\7\u0293\2\2\u05e6\u05e8\5\u027e\u0140"+
		"\2\u05e7\u05e5\3\2\2\2\u05e8\u05eb\3\2\2\2\u05e9\u05e7\3\2\2\2\u05e9\u05ea"+
		"\3\2\2\2\u05ea\u05ed\3\2\2\2\u05eb\u05e9\3\2\2\2\u05ec\u05e3\3\2\2\2\u05ec"+
		"\u05e4\3\2\2\2\u05ed\u05f6\3\2\2\2\u05ee\u05ef\7\u0202\2\2\u05ef\u05f6"+
		"\5\u0292\u014a\2\u05f0\u05f3\7\u022d\2\2\u05f1\u05f4\7V\2\2\u05f2\u05f4"+
		"\5\u02b0\u0159\2\u05f3\u05f1\3\2\2\2\u05f3\u05f2\3\2\2\2\u05f4\u05f6\3"+
		"\2\2\2\u05f5\u05b3\3\2\2\2\u05f5\u05b5\3\2\2\2\u05f5\u05ba\3\2\2\2\u05f5"+
		"\u05c1\3\2\2\2\u05f5\u05c6\3\2\2\2\u05f5\u05ce\3\2\2\2\u05f5\u05d3\3\2"+
		"\2\2\u05f5\u05d5\3\2\2\2\u05f5\u05da\3\2\2\2\u05f5\u05dd\3\2\2\2\u05f5"+
		"\u05e2\3\2\2\2\u05f5\u05ee\3\2\2\2\u05f5\u05f0\3\2\2\2\u05f6\u05f8\3\2"+
		"\2\2\u05f7\u05b1\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8=\3\2\2\2\u05f9\u05fa"+
		"\7\u00a5\2\2\u05fa\u05fb\7\u0253\2\2\u05fb\u0603\5\u0242\u0122\2\u05fc"+
		"\u05fd\7\u01a9\2\2\u05fd\u05fe\7\u0085\2\2\u05fe\u0604\5\u02a0\u0151\2"+
		"\u05ff\u0600\7\u020a\2\2\u0600\u0601\7p\2\2\u0601\u0604\5\u027e\u0140"+
		"\2\u0602\u0604\5\u00d4k\2\u0603\u05fc\3\2\2\2\u0603\u05ff\3\2\2\2\u0603"+
		"\u0602\3\2\2\2\u0604\u0610\3\2\2\2\u0605\u0606\7\u0293\2\2\u0606\u0608"+
		"\5\u0242\u0122\2\u0607\u0605\3\2\2\2\u0608\u060b\3\2\2\2\u0609\u0607\3"+
		"\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c\3\2\2\2\u060b\u0609\3\2\2\2\u060c"+
		"\u060d\7\u01e5\2\2\u060d\u060e\7\u0085\2\2\u060e\u0610\5\u0236\u011c\2"+
		"\u060f\u05f9\3\2\2\2\u060f\u0609\3\2\2\2\u0610?\3\2\2\2\u0611\u0613\5"+
		"\u02ae\u0158\2\u0612\u0611\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0612\3\2"+
		"\2\2\u0614\u0615\3\2\2\2\u0615A\3\2\2\2\u0616\u0617\7\u00b6\2\2\u0617"+
		"\u0618\t\7\2\2\u0618\u0619\7\u015d\2\2\u0619\u061a\7\u0167\2\2\u061a\u061b"+
		"\5\u02c0\u0161\2\u061b\u061c\5\u02c2\u0162\2\u061cC\3\2\2\2\u061d\u0629"+
		"\5F$\2\u061e\u0629\5H%\2\u061f\u0629\5J&\2\u0620\u0629\5L\'\2\u0621\u0629"+
		"\5N(\2\u0622\u0629\5P)\2\u0623\u0629\5R*\2\u0624\u0629\5T+\2\u0625\u0629"+
		"\5V,\2\u0626\u0629\5X-\2\u0627\u0629\5Z.\2\u0628\u061d\3\2\2\2\u0628\u061e"+
		"\3\2\2\2\u0628\u061f\3\2\2\2\u0628\u0620\3\2\2\2\u0628\u0621\3\2\2\2\u0628"+
		"\u0622\3\2\2\2\u0628\u0623\3\2\2\2\u0628\u0624\3\2\2\2\u0628\u0625\3\2"+
		"\2\2\u0628\u0626\3\2\2\2\u0628\u0627\3\2\2\2\u0629E\3\2\2\2\u062a\u062b"+
		"\7\u00d0\2\2\u062b\u062c\7_\2\2\u062c\u062d\7\27\2\2\u062d\u062e\5\u024a"+
		"\u0126\2\u062e\u062f\7\u029a\2\2\u062f\u0630\5\u0290\u0149\2\u0630\u0631"+
		"\5\\/\2\u0631G\3\2\2\2\u0632\u0633\7\u00d0\2\2\u0633\u0634\7_\2\2\u0634"+
		"\u0635\7\30\2\2\u0635\u0636\5\u02a8\u0155\2\u0636\u0637\7_\2\2\u0637\u0638"+
		"\5\u0240\u0121\2\u0638\u0639\5\\/\2\u0639I\3\2\2\2\u063a\u063b\7\u00d0"+
		"\2\2\u063b\u063c\7_\2\2\u063c\u063d\7\u012f\2\2\u063d\u063e\5\u0250\u0129"+
		"\2\u063e\u063f\5\u00aaV\2\u063f\u0640\5\\/\2\u0640K\3\2\2\2\u0641\u0642"+
		"\7\u00d0\2\2\u0642\u0643\7_\2\2\u0643\u0644\7\u0236\2\2\u0644\u0645\7"+
		"\u012f\2\2\u0645\u0646\5\u0250\u0129\2\u0646\u0647\5\u00aaV\2\u0647\u0648"+
		"\5\\/\2\u0648M\3\2\2\2\u0649\u064a\7\u00d0\2\2\u064a\u064b\7_\2\2\u064b"+
		"\u064c\7\u012f\2\2\u064c\u064d\5\u0252\u012a\2\u064d\u064e\5\\/\2\u064e"+
		"O\3\2\2\2\u064f\u0650\7\u00d0\2\2\u0650\u0651\7_\2\2\u0651\u0652\7\u0194"+
		"\2\2\u0652\u0653\5\u028c\u0147\2\u0653\u0654\5\\/\2\u0654Q\3\2\2\2\u0655"+
		"\u0656\7\u00d0\2\2\u0656\u0657\7_\2\2\u0657\u0658\7p\2\2\u0658\u0659\5"+
		"\u025a\u012e\2\u0659\u065a\5\\/\2\u065aS\3\2\2\2\u065b\u065c\7\u00d0\2"+
		"\2\u065c\u065d\7_\2\2\u065d\u065e\7\u0206\2\2\u065e\u065f\5\u0254\u012b"+
		"\2\u065f\u0660\5\\/\2\u0660U\3\2\2\2\u0661\u0662\7\u00d0\2\2\u0662\u0663"+
		"\7_\2\2\u0663\u0664\7y\2\2\u0664\u0665\5\u0240\u0121\2\u0665\u0666\5\\"+
		"/\2\u0666W\3\2\2\2\u0667\u0668\7\u00d0\2\2\u0668\u0669\7_\2\2\u0669\u066a"+
		"\7\u0253\2\2\u066a\u066b\5\u0242\u0122\2\u066b\u066c\5\\/\2\u066cY\3\2"+
		"\2\2\u066d\u066e\7\u00d0\2\2\u066e\u066f\7_\2\2\u066f\u0670\7\u01d1\2"+
		"\2\u0670\u0671\5\u024a\u0126\2\u0671\u0672\5\\/\2\u0672[\3\2\2\2\u0673"+
		"\u0676\7E\2\2\u0674\u0677\5\u02b0\u0159\2\u0675\u0677\7Y\2\2\u0676\u0674"+
		"\3\2\2\2\u0676\u0675\3\2\2\2\u0677]\3\2\2\2\u0678\u067a\7\u00d1\2\2\u0679"+
		"\u067b\t\7\2\2\u067a\u0679\3\2\2\2\u067a\u067b\3\2\2\2\u067b_\3\2\2\2"+
		"\u067c\u067d\7\u00d6\2\2\u067d\u067e\7\u0085\2\2\u067e\u067f\7\u0252\2"+
		"\2\u067f\u0680\5\u025c\u012f\2\u0680\u0681\7\u008d\2\2\u0681\u0682\5\u029e"+
		"\u0150\2\u0682\u0683\7\u01b1\2\2\u0683\u0684\5\u02b0\u0159\2\u0684\u0685"+
		"\7_\2\2\u0685\u0686\5\u0260\u0131\2\u0686\u0687\7\u0293\2\2\u0687\u068a"+
		"\5\u0262\u0132\2\u0688\u0689\7\u027a\2\2\u0689\u068b\7\u027b\2\2\u068a"+
		"\u0688\3\2\2\2\u068a\u068b\3\2\2\2\u068ba\3\2\2\2\u068c\u068f\5\u0290"+
		"\u0149\2\u068d\u068e\7\7\2\2\u068e\u0690\5\u0218\u010d\2\u068f\u068d\3"+
		"\2\2\2\u068f\u0690\3\2\2\2\u0690\u0696\3\2\2\2\u0691\u0693\7\u00f2\2\2"+
		"\u0692\u0694\7\7\2\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0695"+
		"\3\2\2\2\u0695\u0697\5\u02b0\u0159\2\u0696\u0691\3\2\2\2\u0696\u0697\3"+
		"\2\2\2\u0697\u069d\3\2\2\2\u0698\u069a\7\u010a\2\2\u0699\u069b\7\u00bc"+
		"\2\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c\3\2\2\2\u069c"+
		"\u069e\5\u02b0\u0159\2\u069d\u0698\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u06a0"+
		"\3\2\2\2\u069f\u06a1\7\u010d\2\2\u06a0\u069f\3\2\2\2\u06a0\u06a1\3\2\2"+
		"\2\u06a1\u06a9\3\2\2\2\u06a2\u06a4\7\u0111\2\2\u06a3\u06a5\7\7\2\2\u06a4"+
		"\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06aa\5\u02b0"+
		"\u0159\2\u06a7\u06a8\7\u0191\2\2\u06a8\u06aa\7\u0111\2\2\u06a9\u06a2\3"+
		"\2\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ad\3\2\2\2\u06ab"+
		"\u06ac\7\u0124\2\2\u06ac\u06ae\5\u02c6\u0164\2\u06ad\u06ab\3\2\2\2\u06ad"+
		"\u06ae\3\2\2\2\u06ae\u06b1\3\2\2\2\u06af\u06b0\7\u012c\2\2\u06b0\u06b2"+
		"\5\u02b0\u0159\2\u06b1\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b8\3"+
		"\2\2\2\u06b3\u06b5\7Y\2\2\u06b4\u06b6\7\7\2\2\u06b5\u06b4\3\2\2\2\u06b5"+
		"\u06b6\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b9\5\u02b0\u0159\2\u06b8\u06b3"+
		"\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bc\3\2\2\2\u06ba\u06bb\7\u0088\2"+
		"\2\u06bb\u06bd\5\u02b0\u0159\2\u06bc\u06ba\3\2\2\2\u06bc\u06bd\3\2\2\2"+
		"\u06bdc\3\2\2\2\u06be\u06c4\5\u0290\u0149\2\u06bf\u06c1\7\u00f2\2\2\u06c0"+
		"\u06c2\7\7\2\2\u06c1\u06c0\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\3\2"+
		"\2\2\u06c3\u06c5\5\u02b0\u0159\2\u06c4\u06bf\3\2\2\2\u06c4\u06c5\3\2\2"+
		"\2\u06c5\u06cb\3\2\2\2\u06c6\u06c8\7\u010a\2\2\u06c7\u06c9\7\u00bc\2\2"+
		"\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cc"+
		"\5\u02b0\u0159\2\u06cb\u06c6\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce\3"+
		"\2\2\2\u06cd\u06cf\7\u010d\2\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3\2\2\2"+
		"\u06cf\u06d7\3\2\2\2\u06d0\u06d2\7\u0111\2\2\u06d1\u06d3\7\7\2\2\u06d2"+
		"\u06d1\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d8\5\u02b0"+
		"\u0159\2\u06d5\u06d6\7\u0191\2\2\u06d6\u06d8\7\u0111\2\2\u06d7\u06d0\3"+
		"\2\2\2\u06d7\u06d5\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06db\3\2\2\2\u06d9"+
		"\u06da\7\u0124\2\2\u06da\u06dc\5\u02c6\u0164\2\u06db\u06d9\3\2\2\2\u06db"+
		"\u06dc\3\2\2\2\u06dc\u06df\3\2\2\2\u06dd\u06de\7\u012c\2\2\u06de\u06e0"+
		"\5\u02b0\u0159\2\u06df\u06dd\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e6\3"+
		"\2\2\2\u06e1\u06e3\7Y\2\2\u06e2\u06e4\7\7\2\2\u06e3\u06e2\3\2\2\2\u06e3"+
		"\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e7\5\u02b0\u0159\2\u06e6\u06e1"+
		"\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06ea\3\2\2\2\u06e8\u06e9\7\u0088\2"+
		"\2\u06e9\u06eb\5\u02b0\u0159\2\u06ea\u06e8\3\2\2\2\u06ea\u06eb\3\2\2\2"+
		"\u06ebe\3\2\2\2\u06ec\u06f1\5\u0292\u014a\2\u06ed\u06ee\7\u0293\2\2\u06ee"+
		"\u06f0\5\u0292\u014a\2\u06ef\u06ed\3\2\2\2\u06f0\u06f3\3\2\2\2\u06f1\u06ef"+
		"\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u0705\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f4"+
		"\u0703\7_\2\2\u06f5\u0704\5\u028c\u0147\2\u06f6\u06f7\7\u0298\2\2\u06f7"+
		"\u06fc\5\u028c\u0147\2\u06f8\u06f9\7\u0293\2\2\u06f9\u06fb\5\u028c\u0147"+
		"\2\u06fa\u06f8\3\2\2\2\u06fb\u06fe\3\2\2\2\u06fc\u06fa\3\2\2\2\u06fc\u06fd"+
		"\3\2\2\2\u06fd\u06ff\3\2\2\2\u06fe\u06fc\3\2\2\2\u06ff\u0700\7\u0299\2"+
		"\2\u0700\u0704\3\2\2\2\u0701\u0702\7\5\2\2\u0702\u0704\7\u0194\2\2\u0703"+
		"\u06f5\3\2\2\2\u0703\u06f6\3\2\2\2\u0703\u0701\3\2\2\2\u0704\u0706\3\2"+
		"\2\2\u0705\u06f4\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0708\3\2\2\2\u0707"+
		"\u0709\5j\66\2\u0708\u0707\3\2\2\2\u0708\u0709\3\2\2\2\u0709g\3\2\2\2"+
		"\u070a\u070d\7\u016b\2\2\u070b\u070e\7\u021d\2\2\u070c\u070e\5\u0292\u014a"+
		"\2\u070d\u070b\3\2\2\2\u070d\u070c\3\2\2\2\u070e\u0710\3\2\2\2\u070f\u0711"+
		"\5j\66\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2\2\2\u0711i\3\2\2\2\u0712"+
		"\u0713\t\b\2\2\u0713k\3\2\2\2\u0714\u0715\7\u0252\2\2\u0715\u0716\5\u0240"+
		"\u0121\2\u0716\u0717\5\u00c0a\2\u0717m\3\2\2\2\u0718\u0719\7\u0215\2\2"+
		"\u0719\u071b\5\u0264\u0133\2\u071a\u071c\5\u0234\u011b\2\u071b\u071a\3"+
		"\2\2\2\u071b\u071c\3\2\2\2\u071c\u0728\3\2\2\2\u071d\u071e\7\u0125\2\2"+
		"\u071e\u0720\5\u026a\u0136\2\u071f\u0721\5\u0234\u011b\2\u0720\u071f\3"+
		"\2\2\2\u0720\u0721\3\2\2\2\u0721\u0728\3\2\2\2\u0722\u0723\7\u01ad\2\2"+
		"\u0723\u0725\5\u026c\u0137\2\u0724\u0726\5\u0234\u011b\2\u0725\u0724\3"+
		"\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\3\2\2\2\u0727\u0718\3\2\2\2\u0727"+
		"\u071d\3\2\2\2\u0727\u0722\3\2\2\2\u0728o\3\2\2\2\u0729\u072a\7\u00d9"+
		"\2\2\u072a\u0736\5\u0240\u0121\2\u072b\u072c\7\u0298\2\2\u072c\u0731\5"+
		"b\62\2\u072d\u072e\7\u0293\2\2\u072e\u0730\5b\62\2\u072f\u072d\3\2\2\2"+
		"\u0730\u0733\3\2\2\2\u0731\u072f\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0734"+
		"\3\2\2\2\u0733\u0731\3\2\2\2\u0734\u0735\7\u0299\2\2\u0735\u0737\3\2\2"+
		"\2\u0736\u072b\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0745\3\2\2\2\u0738\u0739"+
		"\7\27\2\2\u0739\u073a\7\u01a5\2\2\u073a\u073b\7\u0298\2\2\u073b\u0740"+
		"\5d\63\2\u073c\u073d\7\u0293\2\2\u073d\u073f\5d\63\2\u073e\u073c\3\2\2"+
		"\2\u073f\u0742\3\2\2\2\u0740\u073e\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0743"+
		"\3\2\2\2\u0742\u0740\3\2\2\2\u0743\u0744\7\u0299\2\2\u0744\u0746\3\2\2"+
		"\2\u0745\u0738\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u075f\3\2\2\2\u0747\u075d"+
		"\7\64\2\2\u0748\u074a\7\u021d\2\2\u0749\u074b\5\u02b0\u0159\2\u074a\u0749"+
		"\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u075e\3\2\2\2\u074c\u0751\5f\64\2\u074d"+
		"\u074e\7\u0293\2\2\u074e\u0750\5f\64\2\u074f\u074d\3\2\2\2\u0750\u0753"+
		"\3\2\2\2\u0751\u074f\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u075e\3\2\2\2\u0753"+
		"\u0751\3\2\2\2\u0754\u0759\5h\65\2\u0755\u0756\7\u0293\2\2\u0756\u0758"+
		"\5h\65\2\u0757\u0755\3\2\2\2\u0758\u075b\3\2\2\2\u0759\u0757\3\2\2\2\u0759"+
		"\u075a\3\2\2\2\u075a\u075e\3\2\2\2\u075b\u0759\3\2\2\2\u075c\u075e\5l"+
		"\67\2\u075d\u0748\3\2\2\2\u075d\u074c\3\2\2\2\u075d\u0754\3\2\2\2\u075d"+
		"\u075c\3\2\2\2\u075e\u0760\3\2\2\2\u075f\u0747\3\2\2\2\u075f\u0760\3\2"+
		"\2\2\u0760\u076c\3\2\2\2\u0761\u0763\7\u0096\2\2\u0762\u0761\3\2\2\2\u0762"+
		"\u0763\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0765\7\u01ad\2\2\u0765\u076a"+
		"\5\u02b0\u0159\2\u0766\u0767\7\u0298\2\2\u0767\u0768\5\u0234\u011b\2\u0768"+
		"\u0769\7\u0299\2\2\u0769\u076b\3\2\2\2\u076a\u0766\3\2\2\2\u076a\u076b"+
		"\3\2\2\2\u076b\u076d\3\2\2\2\u076c\u0762\3\2\2\2\u076c\u076d\3\2\2\2\u076d"+
		"\u0776\3\2\2\2\u076e\u0770\7\u0096\2\2\u076f\u076e\3\2\2\2\u076f\u0770"+
		"\3\2\2\2\u0770\u0772\3\2\2\2\u0771\u0773\5n8\2\u0772\u0771\3\2\2\2\u0773"+
		"\u0774\3\2\2\2\u0774\u0772\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0777\3\2"+
		"\2\2\u0776\u076f\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u077d\3\2\2\2\u0778"+
		"\u077a\7\u00f2\2\2\u0779\u077b\7\7\2\2\u077a\u0779\3\2\2\2\u077a\u077b"+
		"\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077e\5\u0292\u014a\2\u077d\u0778\3"+
		"\2\2\2\u077d\u077e\3\2\2\2\u077e\u0781\3\2\2\2\u077f\u0780\7\u0086\2\2"+
		"\u0780\u0782\7\u019b\2\2\u0781\u077f\3\2\2\2\u0781\u0782\3\2\2\2\u0782"+
		"\u0788\3\2\2\2\u0783\u0785\7Y\2\2\u0784\u0786\7\7\2\2\u0785\u0784\3\2"+
		"\2\2\u0785\u0786\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0789\5\u0292\u014a"+
		"\2\u0788\u0783\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u078f\3\2\2\2\u078a\u078b"+
		"\7\u0111\2\2\u078b\u078c\7\7\2\2\u078c\u0790\5\u0292\u014a\2\u078d\u078e"+
		"\7\u0191\2\2\u078e\u0790\7\u0111\2\2\u078f\u078a\3\2\2\2\u078f\u078d\3"+
		"\2\2\2\u078f\u0790\3\2\2\2\u0790\u0796\3\2\2\2\u0791\u0793\7\u010a\2\2"+
		"\u0792\u0794\7\u00bc\2\2\u0793\u0792\3\2\2\2\u0793\u0794\3\2\2\2\u0794"+
		"\u0795\3\2\2\2\u0795\u0797\5\u0292\u014a\2\u0796\u0791\3\2\2\2\u0796\u0797"+
		"\3\2\2\2\u0797\u079b\3\2\2\2\u0798\u0799\7\u01db\2\2\u0799\u079a\7\u022e"+
		"\2\2\u079a\u079c\5\u0292\u014a\2\u079b\u0798\3\2\2\2\u079b\u079c\3\2\2"+
		"\2\u079c\u079f\3\2\2\2\u079d\u079e\7\u0214\2\2\u079e\u07a0\5\u0296\u014c"+
		"\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a4\3\2\2\2\u07a1\u07a2"+
		"\7\u0214\2\2\u07a2\u07a3\7\u00be\2\2\u07a3\u07a5\5\u0296\u014c\2\u07a4"+
		"\u07a1\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a8\3\2\2\2\u07a6\u07a7\7\u0088"+
		"\2\2\u07a7\u07a9\5\u02b0\u0159\2\u07a8\u07a6\3\2\2\2\u07a8\u07a9\3\2\2"+
		"\2\u07a9\u07ac\3\2\2\2\u07aa\u07ab\7\u01e1\2\2\u07ab\u07ad\5\u0296\u014c"+
		"\2\u07ac\u07aa\3\2\2\2\u07ac\u07ad\3\2\2\2\u07ad\u07bd\3\2\2\2\u07ae\u07af"+
		"\7\u01e0\2\2\u07af\u07bb\7\u00e5\2\2\u07b0\u07b5\5\u0292\u014a\2\u07b1"+
		"\u07b2\7_\2\2\u07b2\u07b4\5\u028c\u0147\2\u07b3\u07b1\3\2\2\2\u07b4\u07b7"+
		"\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07bc\3\2\2\2\u07b7"+
		"\u07b5\3\2\2\2\u07b8\u07b9\7\7\2\2\u07b9\u07ba\7y\2\2\u07ba\u07bc\5\u02ae"+
		"\u0158\2\u07bb\u07b0\3\2\2\2\u07bb\u07b8\3\2\2\2\u07bc\u07be\3\2\2\2\u07bd"+
		"\u07ae\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07c8\3\2\2\2\u07bf\u07c0\7\u0115"+
		"\2\2\u07c0\u07c5\5\u0292\u014a\2\u07c1\u07c2\7_\2\2\u07c2\u07c4\5\u028c"+
		"\u0147\2\u07c3\u07c1\3\2\2\2\u07c4\u07c7\3\2\2\2\u07c5\u07c3\3\2\2\2\u07c5"+
		"\u07c6\3\2\2\2\u07c6\u07c9\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c8\u07bf\3\2"+
		"\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07cb\3\2\2\2\u07ca\u07cc\7\u010d\2\2\u07cb"+
		"\u07ca\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cf\3\2\2\2\u07cd\u07ce\7\u0110"+
		"\2\2\u07ce\u07d0\7\u0234\2\2\u07cf\u07cd\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0"+
		"\u07d4\3\2\2\2\u07d1\u07d2\7\u0098\2\2\u07d2\u07d3\7_\2\2\u07d3\u07d5"+
		"\7\u0110\2\2\u07d4\u07d1\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07da\3\2\2"+
		"\2\u07d6\u07d8\7\u0220\2\2\u07d7\u07d6\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8"+
		"\u07d9\3\2\2\2\u07d9\u07db\5\u00ecw\2\u07da\u07d7\3\2\2\2\u07da\u07db"+
		"\3\2\2\2\u07db\u07df\3\2\2\2\u07dc\u07dd\7\u0221\2\2\u07dd\u07de\7\u018c"+
		"\2\2\u07de\u07e0\5\u02b0\u0159\2\u07df\u07dc\3\2\2\2\u07df\u07e0\3\2\2"+
		"\2\u07e0\u07e3\3\2\2\2\u07e1\u07e2\7\u0191\2\2\u07e2\u07e4\7\u00d1\2\2"+
		"\u07e3\u07e1\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4q\3\2\2\2\u07e5\u07e6\5"+
		"p9\2\u07e6s\3\2\2\2\u07e7\u07e8\7\u00d9\2\2\u07e8\u07ea\5\u0240\u0121"+
		"\2\u07e9\u07eb\5\u00c0a\2\u07ea\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb"+
		"\u07ec\3\2\2\2\u07ec\u07ed\7\64\2\2\u07ed\u07ee\7\u0252\2\2\u07ee\u07f0"+
		"\5\u0240\u0121\2\u07ef\u07f1\5\u00c0a\2\u07f0\u07ef\3\2\2\2\u07f0\u07f1"+
		"\3\2\2\2\u07f1\u07f3\3\2\2\2\u07f2\u07f4\5\u00ecw\2\u07f3\u07f2\3\2\2"+
		"\2\u07f3\u07f4\3\2\2\2\u07f4\u07f8\3\2\2\2\u07f5\u07f6\7\u0221\2\2\u07f6"+
		"\u07f7\7\u018c\2\2\u07f7\u07f9\5\u02ae\u0158\2\u07f8\u07f5\3\2\2\2\u07f8"+
		"\u07f9\3\2\2\2\u07f9\u07fc\3\2\2\2\u07fa\u07fb\7\u0191\2\2\u07fb\u07fd"+
		"\7\u00d1\2\2\u07fc\u07fa\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fdu\3\2\2\2\u07fe"+
		"\u07ff\7\32\2\2\u07ff\u0800\7\u009a\2\2\u0800\u0801\7\u01c3\2\2\u0801"+
		"\u0802\7_\2\2\u0802\u080c\5\u0240\u0121\2\u0803\u0804\7\62\2\2\u0804\u0805"+
		"\7\27\2\2\u0805\u0806\5\u0290\u0149\2\u0806\u0807\5\u0214\u010b\2\u0807"+
		"\u080d\3\2\2\2\u0808\u0809\7\62\2\2\u0809\u080a\7\u01f6\2\2\u080a\u080b"+
		"\7\u0094\2\2\u080b\u080d\5\u0214\u010b\2\u080c\u0803\3\2\2\2\u080c\u0808"+
		"\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u080f\t\t\2\2\u080fw\3\2\2\2\u0810"+
		"\u0811\7\32\2\2\u0811\u0812\7\u00ae\2\2\u0812\u0813\5\u02a6\u0154\2\u0813"+
		"\u0814\7\u0181\2\2\u0814\u081e\5\u02a6\u0154\2\u0815\u081f\7\u016b\2\2"+
		"\u0816\u081b\7\u0145\2\2\u0817\u0819\7\u0191\2\2\u0818\u0817\3\2\2\2\u0818"+
		"\u0819\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081c\7\u0231\2\2\u081b\u0818"+
		"\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081f\5\u02b6\u015c"+
		"\2\u081e\u0815\3\2\2\2\u081e\u0816\3\2\2\2\u081fy\3\2\2\2\u0820\u0821"+
		"\7\32\2\2\u0821\u0822\7\u00e5\2\2\u0822\u0823\7\u014f\2\2\u0823\u0824"+
		"\7\u028a\2\2\u0824\u0829\5\u0276\u013c\2\u0825\u0826\7\u0293\2\2\u0826"+
		"\u0828\5\u0276\u013c\2\u0827\u0825\3\2\2\2\u0828\u082b\3\2\2\2\u0829\u0827"+
		"\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082e\3\2\2\2\u082b\u0829\3\2\2\2\u082c"+
		"\u082d\7K\2\2\u082d\u082f\5\u02b0\u0159\2\u082e\u082c\3\2\2\2\u082e\u082f"+
		"\3\2\2\2\u082f{\3\2\2\2\u0830\u0831\7\32\2\2\u0831\u0832\7\u011e\2\2\u0832"+
		"\u0836\7y\2\2\u0833\u0834\7\u014c\2\2\u0834\u0835\7W\2\2\u0835\u0837\7"+
		".\2\2\u0836\u0833\3\2\2\2\u0836\u0837\3\2\2\2\u0837\u0838\3\2\2\2\u0838"+
		"\u0839\5\u0240\u0121\2\u0839\u083a\7\u0298\2\2\u083a\u083b\5\u00e6t\2"+
		"\u083b\u083d\7\u0299\2\2\u083c\u083e\5\u00d4k\2\u083d\u083c\3\2\2\2\u083d"+
		"\u083e\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0840\7\7\2\2\u0840\u084c\7\u00d9"+
		"\2\2\u0841\u0842\7\u0298\2\2\u0842\u0847\5b\62\2\u0843\u0844\7\u0293\2"+
		"\2\u0844\u0846\5b\62\2\u0845\u0843\3\2\2\2\u0846\u0849\3\2\2\2\u0847\u0845"+
		"\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084a\3\2\2\2\u0849\u0847\3\2\2\2\u084a"+
		"\u084b\7\u0299\2\2\u084b\u084d\3\2\2\2\u084c\u0841\3\2\2\2\u084c\u084d"+
		"\3\2\2\2\u084d\u085b\3\2\2\2\u084e\u084f\7\27\2\2\u084f\u0850\7\u01a5"+
		"\2\2\u0850\u0851\7\u0298\2\2\u0851\u0856\5d\63\2\u0852\u0853\7\u0293\2"+
		"\2\u0853\u0855\5d\63\2\u0854\u0852\3\2\2\2\u0855\u0858\3\2\2\2\u0856\u0854"+
		"\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0859\3\2\2\2\u0858\u0856\3\2\2\2\u0859"+
		"\u085a\7\u0299\2\2\u085a\u085c\3\2\2\2\u085b\u084e\3\2\2\2\u085b\u085c"+
		"\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u086b\7\64\2\2\u085e\u086c\5f\64\2"+
		"\u085f\u086c\3\2\2\2\u0860\u0862\7\u0096\2\2\u0861\u0860\3\2\2\2\u0861"+
		"\u0862\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0864\7\u0215\2\2\u0864\u0869"+
		"\5\u0264\u0133\2\u0865\u0866\7\u0298\2\2\u0866\u0867\5\u0234\u011b\2\u0867"+
		"\u0868\7\u0299\2\2\u0868\u086a\3\2\2\2\u0869\u0865\3\2\2\2\u0869\u086a"+
		"\3\2\2\2\u086a\u086c\3\2\2\2\u086b\u085e\3\2\2\2\u086b\u085f\3\2\2\2\u086b"+
		"\u0861\3\2\2\2\u086c\u086e\3\2\2\2\u086d\u086f\5j\66\2\u086e\u086d\3\2"+
		"\2\2\u086e\u086f\3\2\2\2\u086f\u0884\3\2\2\2\u0870\u0885\7\u018e\2\2\u0871"+
		"\u0872\7\u0127\2\2\u0872\u0873\7\u00ce\2\2\u0873\u0874\7\u0298\2\2\u0874"+
		"\u0875\5\u0298\u014d\2\u0875\u087d\7\u0299\2\2\u0876\u0877\7\u0293\2\2"+
		"\u0877\u0878\7\u0298\2\2\u0878\u0879\5\u0298\u014d\2\u0879\u087a\7\u0299"+
		"\2\2\u087a\u087c\3\2\2\2\u087b\u0876\3\2\2\2\u087c\u087f\3\2\2\2\u087d"+
		"\u087b\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u0885\3\2\2\2\u087f\u087d\3\2"+
		"\2\2\u0880\u0881\7\u018e\2\2\u0881\u0885\7\u0091\2\2\u0882\u0885\7\u01a7"+
		"\2\2\u0883\u0885\7\u01ac\2\2\u0884\u0870\3\2\2\2\u0884\u0871\3\2\2\2\u0884"+
		"\u0880\3\2\2\2\u0884\u0882\3\2\2\2\u0884\u0883\3\2\2\2\u0884\u0885\3\2"+
		"\2\2\u0885\u0889\3\2\2\2\u0886\u0887\7\u0098\2\2\u0887\u0888\7_\2\2\u0888"+
		"\u088a\7\u0110\2\2\u0889\u0886\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088b"+
		"\3\2\2\2\u088b\u088d\7\u00f2\2\2\u088c\u088e\7\7\2\2\u088d\u088c\3\2\2"+
		"\2\u088d\u088e\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u0890\5\u0294\u014b\2"+
		"\u0890\u0897\3\2\2\2\u0891\u0892\7\u010a\2\2\u0892\u0893\7\u00bc\2\2\u0893"+
		"\u0894\5\u0294\u014b\2\u0894\u0895\7\4\2\2\u0895\u0896\5\u0294\u014b\2"+
		"\u0896\u0898\3\2\2\2\u0897\u0891\3\2\2\2\u0897\u0898\3\2\2\2\u0898\u089a"+
		"\3\2\2\2\u0899\u089b\7\u010d\2\2\u089a\u0899\3\2\2\2\u089a\u089b\3\2\2"+
		"\2\u089b\u089e\3\2\2\2\u089c\u089d\7\u0110\2\2\u089d\u089f\7\u0234\2\2"+
		"\u089e\u089c\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u08a5\3\2\2\2\u08a0\u08a1"+
		"\7\u0111\2\2\u08a1\u08a2\7\7\2\2\u08a2\u08a6\5\u0294\u014b\2\u08a3\u08a4"+
		"\7\u0191\2\2\u08a4\u08a6\7\u0111\2\2\u08a5\u08a0\3\2\2\2\u08a5\u08a3\3"+
		"\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08b5\3\2\2\2\u08a7\u08a8\7\u0115\2\2"+
		"\u08a8\u08ab\5f\64\2\u08a9\u08aa\7_\2\2\u08aa\u08ac\5\u028c\u0147\2\u08ab"+
		"\u08a9\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08b2\3\2\2\2\u08ad\u08ae\7\u0293"+
		"\2\2\u08ae\u08af\7_\2\2\u08af\u08b1\5\u028c\u0147\2\u08b0\u08ad\3\2\2"+
		"\2\u08b1\u08b4\3\2\2\2\u08b2\u08b0\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b6"+
		"\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b5\u08a7\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6"+
		"\u08c2\3\2\2\2\u08b7\u08b9\7\u0096\2\2\u08b8\u08b7\3\2\2\2\u08b8\u08b9"+
		"\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bb\7\u0125\2\2\u08bb\u08bc\5\u026a"+
		"\u0136\2\u08bc\u08be\7\u0298\2\2\u08bd\u08bf\5\u0234\u011b\2\u08be\u08bd"+
		"\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08c1\7\u0299\2"+
		"\2\u08c1\u08c3\3\2\2\2\u08c2\u08b8\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3\u08c9"+
		"\3\2\2\2\u08c4\u08c6\7Y\2\2\u08c5\u08c7\7\7\2\2\u08c6\u08c5\3\2\2\2\u08c6"+
		"\u08c7\3\2\2\2\u08c7\u08c8\3\2\2\2\u08c8\u08ca\5\u0292\u014a\2\u08c9\u08c4"+
		"\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08d6\3\2\2\2\u08cb\u08cd\7\u0096\2"+
		"\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08cf"+
		"\7\u01ad\2\2\u08cf\u08d0\5\u026c\u0137\2\u08d0\u08d2\7\u0298\2\2\u08d1"+
		"\u08d3\5\u0234\u011b\2\u08d2\u08d1\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4"+
		"\3\2\2\2\u08d4\u08d5\7\u0299\2\2\u08d5\u08d7\3\2\2\2\u08d6\u08cc\3\2\2"+
		"\2\u08d6\u08d7\3\2\2\2\u08d7\u08db\3\2\2\2\u08d8\u08d9\7\u01db\2\2\u08d9"+
		"\u08da\7\u022e\2\2\u08da\u08dc\5\u0292\u014a\2\u08db\u08d8\3\2\2\2\u08db"+
		"\u08dc\3\2\2\2\u08dc\u08ec\3\2\2\2\u08dd\u08de\7\u01e0\2\2\u08de\u08df"+
		"\7\u00e5\2\2\u08df\u08e2\5f\64\2\u08e0\u08e1\7_\2\2\u08e1\u08e3\5\u028c"+
		"\u0147\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e9\3\2\2\2\u08e4"+
		"\u08e5\7\u0293\2\2\u08e5\u08e6\7_\2\2\u08e6\u08e8\5\u028c\u0147\2\u08e7"+
		"\u08e4\3\2\2\2\u08e8\u08eb\3\2\2\2\u08e9\u08e7\3\2\2\2\u08e9\u08ea\3\2"+
		"\2\2\u08ea\u08ed\3\2\2\2\u08eb\u08e9\3\2\2\2\u08ec\u08dd\3\2\2\2\u08ec"+
		"\u08ed\3\2\2\2\u08ed\u08f0\3\2\2\2\u08ee\u08ef\7\u01e1\2\2\u08ef\u08f1"+
		"\5\u0298\u014d\2\u08f0\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f4\3"+
		"\2\2\2\u08f2\u08f3\7\u0214\2\2\u08f3\u08f5\5\u0298\u014d\2\u08f4\u08f2"+
		"\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f9\3\2\2\2\u08f6\u08f7\7\u0214\2"+
		"\2\u08f7\u08f8\7\u00be\2\2\u08f8\u08fa\5\u0298\u014d\2\u08f9\u08f6\3\2"+
		"\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fd\3\2\2\2\u08fb\u08fc\7\u0086\2\2\u08fc"+
		"\u08fe\7\u019b\2\2\u08fd\u08fb\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u0901"+
		"\3\2\2\2\u08ff\u0900\7\u0088\2\2\u0900\u0902\5\u0294\u014b\2\u0901\u08ff"+
		"\3\2\2\2\u0901\u0902\3\2\2\2\u0902}\3\2\2\2\u0903\u0904\7\32\2\2\u0904"+
		"\u0905\7\u0120\2\2\u0905\u0906\7\67\2\2\u0906\u0907\5\u02ae\u0158\2\u0907"+
		"\177\3\2\2\2\u0908\u0909\7\32\2\2\u0909\u090a\t\n\2\2\u090a\u090e\7y\2"+
		"\2\u090b\u090c\7\u014c\2\2\u090c\u090d\7W\2\2\u090d\u090f\7.\2\2\u090e"+
		"\u090b\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0916\5\u0240"+
		"\u0121\2\u0911\u0912\7\u0298\2\2\u0912\u0913\5\u00e6t\2\u0913\u0914\7"+
		"\u0299\2\2\u0914\u0917\3\2\2\2\u0915\u0917\5\u00d8m\2\u0916\u0911\3\2"+
		"\2\2\u0916\u0915\3\2\2\2\u0917\u0919\3\2\2\2\u0918\u091a\5\u00d4k\2\u0919"+
		"\u0918\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u091d\5\u01f8"+
		"\u00fd\2\u091c\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091f\3\2\2\2\u091e"+
		"\u0920\5\u00f6|\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0922"+
		"\3\2\2\2\u0921\u0923\5\u00eex\2\u0922\u0921\3\2\2\2\u0922\u0923\3\2\2"+
		"\2\u0923\u0925\3\2\2\2\u0924\u0926\5\u00b2Z\2\u0925\u0924\3\2\2\2\u0925"+
		"\u0926\3\2\2\2\u0926\u0928\3\2\2\2\u0927\u0929\5\u01fc\u00ff\2\u0928\u0927"+
		"\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092c\3\2\2\2\u092a\u092b\7\7\2\2\u092b"+
		"\u092d\5\u01a8\u00d5\2\u092c\u092a\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u0081"+
		"\3\2\2\2\u092e\u092f\7\32\2\2\u092f\u0930\t\n\2\2\u0930\u0931\7\u011e"+
		"\2\2\u0931\u0933\7y\2\2\u0932\u0934\5\u00b4[\2\u0933\u0932\3\2\2\2\u0933"+
		"\u0934\3\2\2\2\u0934\u0935\3\2\2\2\u0935\u0936\5\u0240\u0121\2\u0936\u0937"+
		"\7\u0298\2\2\u0937\u0938\5\u00e6t\2\u0938\u093a\7\u0299\2\2\u0939\u093b"+
		"\5\u00d4k\2\u093a\u0939\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093c\3\2\2"+
		"\2\u093c\u093d\7\7\2\2\u093d\u0949\7\u00d9\2\2\u093e\u093f\7\u0298\2\2"+
		"\u093f\u0944\5b\62\2\u0940\u0941\7\u0293\2\2\u0941\u0943\5b\62\2\u0942"+
		"\u0940\3\2\2\2\u0943\u0946\3\2\2\2\u0944\u0942\3\2\2\2\u0944\u0945\3\2"+
		"\2\2\u0945\u0947\3\2\2\2\u0946\u0944\3\2\2\2\u0947\u0948\7\u0299\2\2\u0948"+
		"\u094a\3\2\2\2\u0949\u093e\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u09d6\3\2"+
		"\2\2\u094b\u094c\7\64\2\2\u094c\u0955\5f\64\2\u094d\u0952\5\u02b8\u015d"+
		"\2\u094e\u094f\7\u0293\2\2\u094f\u0951\5\u02b8\u015d\2\u0950\u094e\3\2"+
		"\2\2\u0951\u0954\3\2\2\2\u0952\u0950\3\2\2\2\u0952\u0953\3\2\2\2\u0953"+
		"\u0956\3\2\2\2\u0954\u0952\3\2\2\2\u0955\u094d\3\2\2\2\u0955\u0956\3\2"+
		"\2\2\u0956\u0958\3\2\2\2\u0957\u0959\7\u0096\2\2\u0958\u0957\3\2\2\2\u0958"+
		"\u0959\3\2\2\2\u0959\u0960\3\2\2\2\u095a\u095b\7\u0215\2\2\u095b\u095c"+
		"\5\u0264\u0133\2\u095c\u095d\7\u0298\2\2\u095d\u095e\5\u0234\u011b\2\u095e"+
		"\u095f\7\u0299\2\2\u095f\u0961\3\2\2\2\u0960\u095a\3\2\2\2\u0960\u0961"+
		"\3\2\2\2\u0961\u0968\3\2\2\2\u0962\u0963\7\u0125\2\2\u0963\u0964\5\u026a"+
		"\u0136\2\u0964\u0965\7\u0298\2\2\u0965\u0966\5\u0234\u011b\2\u0966\u0967"+
		"\7\u0299\2\2\u0967\u0969\3\2\2\2\u0968\u0962\3\2\2\2\u0968\u0969\3\2\2"+
		"\2\u0969\u096e\3\2\2\2\u096a\u096b\7\u01ad\2\2\u096b\u096c\5\u026c\u0137"+
		"\2\u096c\u096d\5\u0234\u011b\2\u096d\u096f\3\2\2\2\u096e\u096a\3\2\2\2"+
		"\u096e\u096f\3\2\2\2\u096f\u0975\3\2\2\2\u0970\u0972\7\u00f2\2\2\u0971"+
		"\u0973\7\7\2\2\u0972\u0971\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0974\3\2"+
		"\2\2\u0974\u0976\5\u0294\u014b\2\u0975\u0970\3\2\2\2\u0975\u0976\3\2\2"+
		"\2\u0976\u0979\3\2\2\2\u0977\u0978\7\u0086\2\2\u0978\u097a\7\u019b\2\2"+
		"\u0979\u0977\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u0980\3\2\2\2\u097b\u097d"+
		"\7Y\2\2\u097c\u097e\7\7\2\2\u097d\u097c\3\2\2\2\u097d\u097e\3\2\2\2\u097e"+
		"\u097f\3\2\2\2\u097f\u0981\5\u0292\u014a\2\u0980\u097b\3\2\2\2\u0980\u0981"+
		"\3\2\2\2\u0981\u0989\3\2\2\2\u0982\u0984\7\u0111\2\2\u0983\u0985\7\7\2"+
		"\2\u0984\u0983\3\2\2\2\u0984\u0985\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u098a"+
		"\5\u0294\u014b\2\u0987\u0988\7\u0191\2\2\u0988\u098a\7\u0111\2\2\u0989"+
		"\u0982\3\2\2\2\u0989\u0987\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u0990\3\2"+
		"\2\2\u098b\u098d\7\u010a\2\2\u098c\u098e\7\u00bc\2\2\u098d\u098c\3\2\2"+
		"\2\u098d\u098e\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0991\5\u0294\u014b\2"+
		"\u0990\u098b\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0995\3\2\2\2\u0992\u0993"+
		"\7\u01db\2\2\u0993\u0994\7\u022e\2\2\u0994\u0996\5\u0292\u014a\2\u0995"+
		"\u0992\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0999\3\2\2\2\u0997\u0998\7\u0214"+
		"\2\2\u0998\u099a\5\u0298\u014d\2\u0999\u0997\3\2\2\2\u0999\u099a\3\2\2"+
		"\2\u099a\u099e\3\2\2\2\u099b\u099c\7\u0214\2\2\u099c\u099d\7\u00be\2\2"+
		"\u099d\u099f\5\u0298\u014d\2\u099e\u099b\3\2\2\2\u099e\u099f\3\2\2\2\u099f"+
		"\u09a2\3\2\2\2\u09a0\u09a1\7\u0088\2\2\u09a1\u09a3\5\u0294\u014b\2\u09a2"+
		"\u09a0\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a6\3\2\2\2\u09a4\u09a5\7\u01e1"+
		"\2\2\u09a5\u09a7\5\u0298\u014d\2\u09a6\u09a4\3\2\2\2\u09a6\u09a7\3\2\2"+
		"\2\u09a7\u09b8\3\2\2\2\u09a8\u09a9\7\u0115\2\2\u09a9\u09aa\5\u0292\u014a"+
		"\2\u09aa\u09ab\7_\2\2\u09ab\u09ac\5\u028c\u0147\2\u09ac\u09ad\3\2\2\2"+
		"\u09ad\u09b5\7\u0293\2\2\u09ae\u09af\7\u0115\2\2\u09af\u09b0\5\u0292\u014a"+
		"\2\u09b0\u09b1\7_\2\2\u09b1\u09b2\5\u028c\u0147\2\u09b2\u09b4\3\2\2\2"+
		"\u09b3\u09ae\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b3\3\2\2\2\u09b5\u09b6"+
		"\3\2\2\2\u09b6\u09b9\3\2\2\2\u09b7\u09b5\3\2\2\2\u09b8\u09a8\3\2\2\2\u09b8"+
		"\u09b9\3\2\2\2\u09b9\u09cc\3\2\2\2\u09ba\u09bb\7\u01e0\2\2\u09bb\u09bc"+
		"\7\u00e5\2\2\u09bc\u09bd\5\u0292\u014a\2\u09bd\u09be\7_\2\2\u09be\u09bf"+
		"\5\u028c\u0147\2\u09bf\u09c0\3\2\2\2\u09c0\u09c9\7\u0293\2\2\u09c1\u09c2"+
		"\7\u01e0\2\2\u09c2\u09c3\7\u00e5\2\2\u09c3\u09c4\5\u0292\u014a\2\u09c4"+
		"\u09c5\7_\2\2\u09c5\u09c6\5\u028c\u0147\2\u09c6\u09c8\3\2\2\2\u09c7\u09c1"+
		"\3\2\2\2\u09c8\u09cb\3\2\2\2\u09c9\u09c7\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca"+
		"\u09cd\3\2\2\2\u09cb\u09c9\3\2\2\2\u09cc\u09ba\3\2\2\2\u09cc\u09cd\3\2"+
		"\2\2\u09cd\u09cf\3\2\2\2\u09ce\u09d0\7\u010d\2\2\u09cf\u09ce\3\2\2\2\u09cf"+
		"\u09d0\3\2\2\2\u09d0\u09d4\3\2\2\2\u09d1\u09d2\7\u0098\2\2\u09d2\u09d3"+
		"\7_\2\2\u09d3\u09d5\7\u0110\2\2\u09d4\u09d1\3\2\2\2\u09d4\u09d5\3\2\2"+
		"\2\u09d5\u09d7\3\2\2\2\u09d6\u094b\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u0083"+
		"\3\2\2\2\u09d8\u09e1\5\u0094K\2\u09d9\u09e1\5\u0092J\2\u09da\u09e1\5\u0090"+
		"I\2\u09db\u09e1\5\u008eH\2\u09dc\u09e1\5\u008cG\2\u09dd\u09e1\5\u008a"+
		"F\2\u09de\u09e1\5\u0088E\2\u09df\u09e1\5\u0086D\2\u09e0\u09d8\3\2\2\2"+
		"\u09e0\u09d9\3\2\2\2\u09e0\u09da\3\2\2\2\u09e0\u09db\3\2\2\2\u09e0\u09dc"+
		"\3\2\2\2\u09e0\u09dd\3\2\2\2\u09e0\u09de\3\2\2\2\u09e0\u09df\3\2\2\2\u09e1"+
		"\u0085\3\2\2\2\u09e2\u09e5\7\32\2\2\u09e3\u09e4\7a\2\2\u09e4\u09e6\7\u01e8"+
		"\2\2\u09e5\u09e3\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7"+
		"\u09e8\7\u0236\2\2\u09e8\u09e9\7\u012f\2\2\u09e9\u09ea\5\u0288\u0145\2"+
		"\u09ea\u09ed\7\7\2\2\u09eb\u09ec\7\u0162\2\2\u09ec\u09ee\5\u027a\u013e"+
		"\2\u09ed\u09eb\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f0"+
		"\7\u018c\2\2\u09f0\u09f1\5\u02ae\u0158\2\u09f1\u09f2\7\u0168\2\2\u09f2"+
		"\u09f6\5\u0286\u0144\2\u09f3\u09f7\7\u0121\2\2\u09f4\u09f5\7W\2\2\u09f5"+
		"\u09f7\7\u0121\2\2\u09f6\u09f3\3\2\2\2\u09f6\u09f4\3\2\2\2\u09f6\u09f7"+
		"\3\2\2\2\u09f7\u0087\3\2\2\2\u09f8\u09fb\7\32\2\2\u09f9\u09fa\7a\2\2\u09fa"+
		"\u09fc\7\u01e8\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd"+
		"\3\2\2\2\u09fd\u09fe\7\u0215\2\2\u09fe\u09ff\5\u0250\u0129\2\u09ff\u0a00"+
		"\7\7\2\2\u0a00\u0a01\7\u0162\2\2\u0a01\u0a02\5\u027a\u013e\2\u0a02\u0a03"+
		"\7\u018c\2\2\u0a03\u0a04\5\u02ae\u0158\2\u0a04\u0a05\7\u0168\2\2\u0a05"+
		"\u0a09\5\u0286\u0144\2\u0a06\u0a0a\7\u0121\2\2\u0a07\u0a08\7W\2\2\u0a08"+
		"\u0a0a\7\u0121\2\2\u0a09\u0a06\3\2\2\2\u0a09\u0a07\3\2\2\2\u0a09\u0a0a"+
		"\3\2\2\2\u0a0a\u0089\3\2\2\2\u0a0b\u0a0e\7\32\2\2\u0a0c\u0a0d\7a\2\2\u0a0d"+
		"\u0a0f\7\u01e8\2\2\u0a0e\u0a0c\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u0a10"+
		"\3\2\2\2\u0a10\u0a11\7\u01ad\2\2\u0a11\u0a12\5\u0250\u0129\2\u0a12\u0a15"+
		"\7\7\2\2\u0a13\u0a14\7\u0162\2\2\u0a14\u0a16\5\u027a\u013e\2\u0a15\u0a13"+
		"\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a18\7\u018c\2"+
		"\2\u0a18\u0a19\5\u02ae\u0158\2\u0a19\u0a1a\7\u0168\2\2\u0a1a\u0a1e\5\u0286"+
		"\u0144\2\u0a1b\u0a1f\7\u0121\2\2\u0a1c\u0a1d\7W\2\2\u0a1d\u0a1f\7\u0121"+
		"\2\2\u0a1e\u0a1b\3\2\2\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f"+
		"\u008b\3\2\2\2\u0a20\u0a23\7\32\2\2\u0a21\u0a22\7a\2\2\u0a22\u0a24\7\u01e8"+
		"\2\2\u0a23\u0a21\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25"+
		"\u0a26\7\u012f\2\2\u0a26\u0a27\5\u0250\u0129\2\u0a27\u0a2a\7\7\2\2\u0a28"+
		"\u0a29\7\u0162\2\2\u0a29\u0a2b\5\u027a\u013e\2\u0a2a\u0a28\3\2\2\2\u0a2a"+
		"\u0a2b\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a2d\7\u018c\2\2\u0a2d\u0a2e"+
		"\5\u02ae\u0158\2\u0a2e\u0a2f\7\u0168\2\2\u0a2f\u0a33\5\u0286\u0144\2\u0a30"+
		"\u0a34\7\u0121\2\2\u0a31\u0a32\7W\2\2\u0a32\u0a34\7\u0121\2\2\u0a33\u0a30"+
		"\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u008d\3\2\2\2\u0a35"+
		"\u0a38\7\32\2\2\u0a36\u0a37\7a\2\2\u0a37\u0a39\7\u01e8\2\2\u0a38\u0a36"+
		"\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\7\u012f\2"+
		"\2\u0a3b\u0a3c\5\u0250\u0129\2\u0a3c\u0a3d\5\u00aaV\2\u0a3d\u0a3e\7\u01ee"+
		"\2\2\u0a3e\u0a3f\5\u02c6\u0164\2\u0a3f\u0a40\7\7\2\2\u0a40\u0a41\7\u00b6"+
		"\2\2\u0a41\u0a42\7\u01ee\2\2\u0a42\u0a43\5\u0218\u010d\2\u0a43\u0a44\7"+
		",\2\2\u0a44\u008f\3\2\2\2\u0a45\u0a48\7\32\2\2\u0a46\u0a47\7a\2\2\u0a47"+
		"\u0a49\7\u01e8\2\2\u0a48\u0a46\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a4a"+
		"\3\2\2\2\u0a4a\u0a4b\7\u0125\2\2\u0a4b\u0a4c\5\u0250\u0129\2\u0a4c\u0a4f"+
		"\7\7\2\2\u0a4d\u0a4e\7\u0162\2\2\u0a4e\u0a50\5\u027a\u013e\2\u0a4f\u0a4d"+
		"\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a52\7\u018c\2"+
		"\2\u0a52\u0a53\5\u02ae\u0158\2\u0a53\u0a54\7\u0168\2\2\u0a54\u0a59\5\u0286"+
		"\u0144\2\u0a55\u0a57\7W\2\2\u0a56\u0a55\3\2\2\2\u0a56\u0a57\3\2\2\2\u0a57"+
		"\u0a58\3\2\2\2\u0a58\u0a5a\7\u0121\2\2\u0a59\u0a56\3\2\2\2\u0a59\u0a5a"+
		"\3\2\2\2\u0a5a\u0091\3\2\2\2\u0a5b\u0a5e\7\32\2\2\u0a5c\u0a5d\7a\2\2\u0a5d"+
		"\u0a5f\7\u01e8\2\2\u0a5e\u0a5c\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a60"+
		"\3\2\2\2\u0a60\u0a61\7\u00a7\2\2\u0a61\u0a62\7\u012f\2\2\u0a62\u0a63\5"+
		"\u0288\u0145\2\u0a63\u0a66\7\7\2\2\u0a64\u0a65\7\u0162\2\2\u0a65\u0a67"+
		"\5\u027a\u013e\2\u0a66\u0a64\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\3"+
		"\2\2\2\u0a68\u0a69\7\u018c\2\2\u0a69\u0a6a\5\u02ae\u0158\2\u0a6a\u0a6b"+
		"\7\u0168\2\2\u0a6b\u0a6f\5\u0286\u0144\2\u0a6c\u0a70\7\u0121\2\2\u0a6d"+
		"\u0a6e\7W\2\2\u0a6e\u0a70\7\u0121\2\2\u0a6f\u0a6c\3\2\2\2\u0a6f\u0a6d"+
		"\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0093\3\2\2\2\u0a71\u0a74\7\32\2\2"+
		"\u0a72\u0a73\7a\2\2\u0a73\u0a75\7\u01e8\2\2\u0a74\u0a72\3\2\2\2\u0a74"+
		"\u0a75\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\7\u00a3\2\2\u0a77\u0a78"+
		"\7\u012f\2\2\u0a78\u0a79\5\u0250\u0129\2\u0a79\u0a7c\7\7\2\2\u0a7a\u0a7b"+
		"\7\u0162\2\2\u0a7b\u0a7d\5\u027a\u013e\2\u0a7c\u0a7a\3\2\2\2\u0a7c\u0a7d"+
		"\3\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a7f\7\u018c\2\2\u0a7f\u0a80\5\u02ae"+
		"\u0158\2\u0a80\u0a81\7\u0168\2\2\u0a81\u0a82\5\u0286\u0144\2\u0a82\u0095"+
		"\3\2\2\2\u0a83\u0a84\7\32\2\2\u0a84\u0a85\7\u013a\2\2\u0a85\u0a87\7p\2"+
		"\2\u0a86\u0a88\5\u00b4[\2\u0a87\u0a86\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88"+
		"\u0a89\3\2\2\2\u0a89\u0a8c\5\u027e\u0140\2\u0a8a\u0a8b\7\t\2\2\u0a8b\u0a8d"+
		"\5\u02ae\u0158\2\u0a8c\u0a8a\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a94\3"+
		"\2\2\2\u0a8e\u0a90\7\u0096\2\2\u0a8f\u0a91\5\u0098M\2\u0a90\u0a8f\3\2"+
		"\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93"+
		"\u0a95\3\2\2\2\u0a94\u0a8e\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0097\3\2"+
		"\2\2\u0a96\u0a97\t\13\2\2\u0a97\u0a98\7\u02a3\2\2\u0a98\u0a99\5\u02b0"+
		"\u0159\2\u0a99\u0099\3\2\2\2\u0a9a\u0a9d\7\32\2\2\u0a9b\u0a9c\7a\2\2\u0a9c"+
		"\u0a9e\7\u01e8\2\2\u0a9d\u0a9b\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f"+
		"\3\2\2\2\u0a9f\u0aa0\7\u0168\2\2\u0aa0\u0aa1\5\u0252\u012a\2\u0aa1\u0aa4"+
		"\5\u0230\u0119\2\u0aa2\u0aa3\7\u00f7\2\2\u0aa3\u0aa5\5\u02ae\u0158\2\u0aa4"+
		"\u0aa2\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa8\3\2\2\2\u0aa6\u0aa7\7\u0162"+
		"\2\2\u0aa7\u0aa9\5\u027a\u013e\2\u0aa8\u0aa6\3\2\2\2\u0aa8\u0aa9\3\2\2"+
		"\2\u0aa9\u009b\3\2\2\2\u0aaa\u0aab\7\32\2\2\u0aab\u0aac\7\u016a\2\2\u0aac"+
		"\u0aad\7\u0282\2\2\u0aad\u0aae\7\67\2\2\u0aae\u0aaf\5\u0270\u0139\2\u0aaf"+
		"\u0ac6\7\u0096\2\2\u0ab0\u0ab1\7\u0281\2\2\u0ab1\u0ab6\5\u0272\u013a\2"+
		"\u0ab2\u0ab3\7\u0293\2\2\u0ab3\u0ab5\5\u0272\u013a\2\u0ab4\u0ab2\3\2\2"+
		"\2\u0ab5\u0ab8\3\2\2\2\u0ab6\u0ab4\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ac7"+
		"\3\2\2\2\u0ab8\u0ab6\3\2\2\2\u0ab9\u0aba\7\u0120\2\2\u0aba\u0abb\7\67"+
		"\2\2\u0abb\u0ac0\5\u02a4\u0153\2\u0abc\u0abd\7\u0293\2\2\u0abd\u0abf\5"+
		"\u02a4\u0153\2\u0abe\u0abc\3\2\2\2\u0abf\u0ac2\3\2\2\2\u0ac0\u0abe\3\2"+
		"\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac3\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac3"+
		"\u0ac4\7\u0125\2\2\u0ac4\u0ac5\5\u02b6\u015c\2\u0ac5\u0ac7\3\2\2\2\u0ac6"+
		"\u0ab0\3\2\2\2\u0ac6\u0ab9\3\2\2\2\u0ac7\u0aca\3\2\2\2\u0ac8\u0ac9\7\u01c3"+
		"\2\2\u0ac9\u0acb\5\u02b0\u0159\2\u0aca\u0ac8\3\2\2\2\u0aca\u0acb\3\2\2"+
		"\2\u0acb\u009d\3\2\2\2\u0acc\u0acd\7\32\2\2\u0acd\u0ace\7a\2\2\u0ace\u0acf"+
		"\7\u01e8\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u0ad1\7\u016b\2\2\u0ad1\u0ad2\t"+
		"\f\2\2\u0ad2\u0ad3\7\u0253\2\2\u0ad3\u0ad5\5\u0242\u0122\2\u0ad4\u0ad6"+
		"\5\u00c0a\2\u0ad5\u0ad4\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad7\3\2\2"+
		"\2\u0ad7\u0ad8\7\7\2\2\u0ad8\u0ad9\5\u01de\u00f0\2\u0ad9\u009f\3\2\2\2"+
		"\u0ada\u0adb\7\32\2\2\u0adb\u0adc\7\u016c\2\2\u0adc\u0ae1\5\u0292\u014a"+
		"\2\u0add\u0ade\7\u0194\2\2\u0ade\u0ae2\5\u028c\u0147\2\u0adf\u0ae0\7\3"+
		"\2\2\u0ae0\u0ae2\7\u0195\2\2\u0ae1\u0add\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae1"+
		"\u0ae2\3\2\2\2\u0ae2\u0ae4\3\2\2\2\u0ae3\u0ae5\7\u020e\2\2\u0ae4\u0ae3"+
		"\3\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u0ae8\3\2\2\2\u0ae6\u0ae7\7\u0249\2"+
		"\2\u0ae7\u0ae9\5\u0292\u014a\2\u0ae8\u0ae6\3\2\2\2\u0ae8\u0ae9\3\2\2\2"+
		"\u0ae9\u0aec\3\2\2\2\u0aea\u0aeb\7\u0160\2\2\u0aeb\u0aed\5\u0292\u014a"+
		"\2\u0aec\u0aea\3\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u0af0\3\2\2\2\u0aee\u0aef"+
		"\7M\2\2\u0aef\u0af1\5\u0292\u014a\2\u0af0\u0aee\3\2\2\2\u0af0\u0af1\3"+
		"\2\2\2\u0af1\u00a1\3\2\2\2\u0af2\u0af3\7\32\2\2\u0af3\u0af4\7\u018f\2"+
		"\2\u0af4\u0af5\7\u0281\2\2\u0af5\u0af6\5\u0272\u013a\2\u0af6\u0af7\7_"+
		"\2\2\u0af7\u0af8\5\u028c\u0147\2\u0af8\u0af9\7\u0096\2\2\u0af9\u0afa\5"+
		"\u02b6\u015c\2\u0afa\u00a3\3\2\2\2\u0afb\u0afc\7\32\2\2\u0afc\u0afd\7"+
		"\u018f\2\2\u0afd\u0afe\7\u015a\2\2\u0afe\u0aff\5\u02aa\u0156\2\u0aff\u0b00"+
		"\7_\2\2\u0b00\u0b01\5\u028c\u0147\2\u0b01\u0b02\7\u0096\2\2\u0b02\u0b03"+
		"\5\u02b6\u015c\2\u0b03\u00a5\3\2\2\2\u0b04\u0b05\7\32\2\2\u0b05\u0b06"+
		"\7\u0197\2\2\u0b06\u0b07\5\u0266\u0134\2\u0b07\u0b08\7\u009d\2\2\u0b08"+
		"\u0b0c\5\u02b0\u0159\2\u0b09\u0b0b\5\34\17\2\u0b0a\u0b09\3\2\2\2\u0b0b"+
		"\u0b0e\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u00a7\3\2"+
		"\2\2\u0b0e\u0b0c\3\2\2\2\u0b0f\u0b10\7\32\2\2\u0b10\u0b11\7\u01cf\2\2"+
		"\u0b11\u0b12\5\u024c\u0127\2\u0b12\u0b13\5\u00aaV\2\u0b13\u0b14\7\7\2"+
		"\2\u0b14\u0b15\5\u02b0\u0159\2\u0b15\u0b16\7\u0162\2\2\u0b16\u0b17\5\u027a"+
		"\u013e\2\u0b17\u0b18\7\u008d\2\2\u0b18\u0b19\5\u029e\u0150\2\u0b19\u00a9"+
		"\3\2\2\2\u0b1a\u0b1c\7\u0298\2\2\u0b1b\u0b1d\5\u00acW\2\u0b1c\u0b1b\3"+
		"\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b22\3\2\2\2\u0b1e\u0b1f\7\u0293\2\2"+
		"\u0b1f\u0b21\5\u00acW\2\u0b20\u0b1e\3\2\2\2\u0b21\u0b24\3\2\2\2\u0b22"+
		"\u0b20\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b22\3\2"+
		"\2\2\u0b25\u0b26\7\u0299\2\2\u0b26\u00ab\3\2\2\2\u0b27\u0b29\5\u02ae\u0158"+
		"\2\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2b"+
		"\5\u02c6\u0164\2\u0b2b\u00ad\3\2\2\2\u0b2c\u0b2d\7\32\2\2\u0b2d\u0b2e"+
		"\7\u01d0\2\2\u0b2e\u0b2f\5\u02ac\u0157\2\u0b2f\u0b31\7M\2\2\u0b30\u0b32"+
		"\5\u02ba\u015e\2\u0b31\u0b30\3\2\2\2\u0b32\u0b33\3\2\2\2\u0b33\u0b31\3"+
		"\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u00af\3\2\2\2\u0b35\u0b38\5\u023e\u0120"+
		"\2\u0b36\u0b38\5\u00dep\2\u0b37\u0b35\3\2\2\2\u0b37\u0b36\3\2\2\2\u0b38"+
		"\u0b3a\3\2\2\2\u0b39\u0b3b\5\u01fe\u0100\2\u0b3a\u0b39\3\2\2\2\u0b3a\u0b3b"+
		"\3\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c\u0b3e\5\u00dco\2\u0b3d\u0b3c\3\2\2"+
		"\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u00b1\3\2\2\2\u0b3f\u0b41\7H\2\2\u0b40\u0b42"+
		"\5\u0298\u014d\2\u0b41\u0b40\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u00b3\3"+
		"\2\2\2\u0b43\u0b45\7\u014c\2\2\u0b44\u0b46\7W\2\2\u0b45\u0b44\3\2\2\2"+
		"\u0b45\u0b46\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b48\7.\2\2\u0b48\u00b5"+
		"\3\2\2\2\u0b49\u0b4a\7\32\2\2\u0b4a\u0b4c\7\u01d1\2\2\u0b4b\u0b4d\5\u00b4"+
		"[\2\u0b4c\u0b4b\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e"+
		"\u0b5a\5\u024a\u0126\2\u0b4f\u0b50\7\u0298\2\2\u0b50\u0b55\5\u00b0Y\2"+
		"\u0b51\u0b52\7\u0293\2\2\u0b52\u0b54\5\u00b0Y\2\u0b53\u0b51\3\2\2\2\u0b54"+
		"\u0b57\3\2\2\2\u0b55\u0b53\3\2\2\2\u0b55\u0b56\3\2\2\2\u0b56\u0b58\3\2"+
		"\2\2\u0b57\u0b55\3\2\2\2\u0b58\u0b59\7\u0299\2\2\u0b59\u0b5b\3\2\2\2\u0b5a"+
		"\u0b4f\3\2\2\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u0b5d\7\7"+
		"\2\2\u0b5d\u0b5f\5\u01dc\u00ef\2\u0b5e\u0b60\5\u0230\u0119\2\u0b5f\u0b5e"+
		"\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b62\3\2\2\2\u0b61\u0b63\5\u01f8\u00fd"+
		"\2\u0b62\u0b61\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b65\3\2\2\2\u0b64\u0b66"+
		"\5\u00eex\2\u0b65\u0b64\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u0b68\3\2\2"+
		"\2\u0b67\u0b69\5\u00b2Z\2\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69"+
		"\u00b7\3\2\2\2\u0b6a\u0b6d\5\u00ba^\2\u0b6b\u0b6d\5\u00bc_\2\u0b6c\u0b6a"+
		"\3\2\2\2\u0b6c\u0b6b\3\2\2\2\u0b6d\u00b9\3\2\2\2\u0b6e\u0b6f\7\32\2\2"+
		"\u0b6f\u0b71\7\u01d1\2\2\u0b70\u0b72\5\u00b4[\2\u0b71\u0b70\3\2\2\2\u0b71"+
		"\u0b72\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b7f\5\u024a\u0126\2\u0b74\u0b75"+
		"\7\u0298\2\2\u0b75\u0b7a\5\u00b0Y\2\u0b76\u0b77\7\u0293\2\2\u0b77\u0b79"+
		"\5\u00b0Y\2\u0b78\u0b76\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a\u0b78\3\2\2"+
		"\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7d\u0b7e"+
		"\7\u0299\2\2\u0b7e\u0b80\3\2\2\2\u0b7f\u0b74\3\2\2\2\u0b7f\u0b80\3\2\2"+
		"\2\u0b80\u0b81\3\2\2\2\u0b81\u0b82\7\7\2\2\u0b82\u0b84\5\u01dc\u00ef\2"+
		"\u0b83\u0b85\5\u0230\u0119\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85"+
		"\u0b86\3\2\2\2\u0b86\u0b88\5\u01f2\u00fa\2\u0b87\u0b89\5\u00b2Z\2\u0b88"+
		"\u0b87\3\2\2\2\u0b88\u0b89\3\2\2\2\u0b89\u00bb\3\2\2\2\u0b8a\u0b8b\7\32"+
		"\2\2\u0b8b\u0b8d\7\u01d1\2\2\u0b8c\u0b8e\5\u00b4[\2\u0b8d\u0b8c\3\2\2"+
		"\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b9b\5\u024a\u0126\2"+
		"\u0b90\u0b91\7\u0298\2\2\u0b91\u0b96\5\u00b0Y\2\u0b92\u0b93\7\u0293\2"+
		"\2\u0b93\u0b95\5\u00b0Y\2\u0b94\u0b92\3\2\2\2\u0b95\u0b98\3\2\2\2\u0b96"+
		"\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b99\3\2\2\2\u0b98\u0b96\3\2"+
		"\2\2\u0b99\u0b9a\7\u0299\2\2\u0b9a\u0b9c\3\2\2\2\u0b9b\u0b90\3\2\2\2\u0b9b"+
		"\u0b9c\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9e\7\7\2\2\u0b9e\u0ba0\5\u01dc"+
		"\u00ef\2\u0b9f\u0ba1\5\u0230\u0119\2\u0ba0\u0b9f\3\2\2\2\u0ba0\u0ba1\3"+
		"\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba3\5\u01e2\u00f2\2\u0ba3\u0ba5\5\u01f0"+
		"\u00f9\2\u0ba4\u0ba6\5\u00b2Z\2\u0ba5\u0ba4\3\2\2\2\u0ba5\u0ba6\3\2\2"+
		"\2\u0ba6\u00bd\3\2\2\2\u0ba7\u0ba8\7\32\2\2\u0ba8\u0baa\7\u01d1\2\2\u0ba9"+
		"\u0bab\5\u00b4[\2\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac"+
		"\3\2\2\2\u0bac\u0bb8\5\u024a\u0126\2\u0bad\u0bae\7\u0298\2\2\u0bae\u0bb3"+
		"\5\u00b0Y\2\u0baf\u0bb0\7\u0293\2\2\u0bb0\u0bb2\5\u00b0Y\2\u0bb1\u0baf"+
		"\3\2\2\2\u0bb2\u0bb5\3\2\2\2\u0bb3\u0bb1\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4"+
		"\u0bb6\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb6\u0bb7\7\u0299\2\2\u0bb7\u0bb9"+
		"\3\2\2\2\u0bb8\u0bad\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba"+
		"\u0bc5\7\7\2\2\u0bbb\u0bbc\5\u00c2b\2\u0bbc\u0bc2\7\64\2\2\u0bbd\u0bc3"+
		"\5\u00c4c\2\u0bbe\u0bc0\5\u0240\u0121\2\u0bbf\u0bc1\5\u0230\u0119\2\u0bc0"+
		"\u0bbf\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc3\3\2\2\2\u0bc2\u0bbd\3\2"+
		"\2\2\u0bc2\u0bbe\3\2\2\2\u0bc3\u0bc6\3\2\2\2\u0bc4\u0bc6\5\u00c4c\2\u0bc5"+
		"\u0bbb\3\2\2\2\u0bc5\u0bc4\3\2\2\2\u0bc6\u00bf\3\2\2\2\u0bc7\u0bc9\7\u0298"+
		"\2\2\u0bc8\u0bca\5\u023e\u0120\2\u0bc9\u0bc8\3\2\2\2\u0bc9\u0bca\3\2\2"+
		"\2\u0bca\u0bcf\3\2\2\2\u0bcb\u0bcc\7\u0293\2\2\u0bcc\u0bce\5\u023e\u0120"+
		"\2\u0bcd\u0bcb\3\2\2\2\u0bce\u0bd1\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bcf\u0bd0"+
		"\3\2\2\2\u0bd0\u0bd2\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd2\u0bdc\7\u0299\2"+
		"\2\u0bd3\u0bd8\5\u023e\u0120\2\u0bd4\u0bd5\7\u0293\2\2\u0bd5\u0bd7\5\u023e"+
		"\u0120\2\u0bd6\u0bd4\3\2\2\2\u0bd7\u0bda\3\2\2\2\u0bd8\u0bd6\3\2\2\2\u0bd8"+
		"\u0bd9\3\2\2\2\u0bd9\u0bdc\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bdb\u0bc7\3\2"+
		"\2\2\u0bdb\u0bd3\3\2\2\2\u0bdc\u00c1\3\2\2\2\u0bdd\u0bde\7q\2\2\u0bde"+
		"\u0bdf\5\u0210\u0109\2\u0bdf\u0be0\7\u0293\2\2\u0be0\u0be1\5\u0232\u011a"+
		"\2\u0be1\u0be2\7e\2\2\u0be2\u0be3\7\u0298\2\2\u0be3\u0be4\7\u01af\2\2"+
		"\u0be4\u0be5\7\u00b4\2\2\u0be5\u0be6\7\u00bc\2\2\u0be6\u0be7\5\u0210\u0109"+
		"\2\u0be7\u0bea\7\u0299\2\2\u0be8\u0be9\7\7\2\2\u0be9\u0beb\5\u00c0a\2"+
		"\u0bea\u0be8\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u00c3\3\2\2\2\u0bec\u0bed"+
		"\7q\2\2\u0bed\u0bee\5\u0210\u0109\2\u0bee\u0bef\7\u0293\2\2\u0bef\u0bf0"+
		"\5\u0232\u011a\2\u0bf0\u0bf1\7e\2\2\u0bf1\u0bf2\7\u0298\2\2\u0bf2\u0bf3"+
		"\7\u01af\2\2\u0bf3\u0bf4\7\u00b4\2\2\u0bf4\u0bf5\7\u00bc\2\2\u0bf5\u0bf6"+
		"\5\u0210\u0109\2\u0bf6\u0bf9\7\u0299\2\2\u0bf7\u0bf8\7\7\2\2\u0bf8\u0bfa"+
		"\5\u00c0a\2\u0bf9\u0bf7\3\2\2\2\u0bf9\u0bfa\3\2\2\2\u0bfa\u0bfb\3\2\2"+
		"\2\u0bfb\u0bfc\7\64\2\2\u0bfc\u0bfd\5\u0240\u0121\2\u0bfd\u00c5\3\2\2"+
		"\2\u0bfe\u0bff\7\32\2\2\u0bff\u0c00\7\u01ea\2\2\u0c00\u0c01\7\u01c4\2"+
		"\2\u0c01\u0c03\5\u027c\u013f\2\u0c02\u0c04\5&\24\2\u0c03\u0c02\3\2\2\2"+
		"\u0c04\u0c05\3\2\2\2\u0c05\u0c03\3\2\2\2\u0c05\u0c06\3\2\2\2\u0c06\u00c7"+
		"\3\2\2\2\u0c07\u0c08\7\32\2\2\u0c08\u0c09\7\u01f2\2\2\u0c09\u0c0a\5\u0278"+
		"\u013d\2\u0c0a\u00c9\3\2\2\2\u0c0b\u0c0c\7\32\2\2\u0c0c\u0c0d\7\u0269"+
		"\2\2\u0c0d\u0c0e\7\u01f7\2\2\u0c0e\u0c0f\5\u0274\u013b\2\u0c0f\u0c10\7"+
		"\u0268\2\2\u0c10\u0c11\5\u02b6\u015c\2\u0c11\u0c12\7\u0085\2\2\u0c12\u0c13"+
		"\5\u02b0\u0159\2\u0c13\u00cb\3\2\2\2\u0c14\u0c15\7\32\2\2\u0c15\u0c17"+
		"\7p\2\2\u0c16\u0c18\5\u00b4[\2\u0c17\u0c16\3\2\2\2\u0c17\u0c18\3\2\2\2"+
		"\u0c18\u0c19\3\2\2\2\u0c19\u0c1c\5\u025a\u012e\2\u0c1a\u0c1b\7\t\2\2\u0c1b"+
		"\u0c1d\5\u0292\u014a\2\u0c1c\u0c1a\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c20"+
		"\3\2\2\2\u0c1e\u0c1f\7&\2\2\u0c1f\u0c21\5\u00d4k\2\u0c20\u0c1e\3\2\2\2"+
		"\u0c20\u0c21\3\2\2\2\u0c21\u00cd\3\2\2\2\u0c22\u0c23\7\32\2\2\u0c23\u0c25"+
		"\7\u0206\2\2\u0c24\u0c26\5\u00b4[\2\u0c25\u0c24\3\2\2\2\u0c25\u0c26\3"+
		"\2\2\2\u0c26\u0c27\3\2\2\2\u0c27\u0c2b\5\u0254\u012b\2\u0c28\u0c29\7\u0153"+
		"\2\2\u0c29\u0c2a\7\u00bc\2\2\u0c2a\u0c2c\7\u02b8\2\2\u0c2b\u0c28\3\2\2"+
		"\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0c31\3\2\2\2\u0c2d\u0c2e\7\u0186\2\2\u0c2e"+
		"\u0c32\7\u02b8\2\2\u0c2f\u0c30\7\u0191\2\2\u0c30\u0c32\7\u0186\2\2\u0c31"+
		"\u0c2d\3\2\2\2\u0c31\u0c2f\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c37\3\2"+
		"\2\2\u0c33\u0c34\7\u017b\2\2\u0c34\u0c38\7\u02b8\2\2\u0c35\u0c36\7\u0191"+
		"\2\2\u0c36\u0c38\7\u017b\2\2\u0c37\u0c33\3\2\2\2\u0c37\u0c35\3\2\2\2\u0c37"+
		"\u0c38\3\2\2\2\u0c38\u0c3c\3\2\2\2\u0c39\u0c3a\7\u01eb\2\2\u0c3a\u0c3b"+
		"\7\u0096\2\2\u0c3b\u0c3d\7\u02b8\2\2\u0c3c\u0c39\3\2\2\2\u0c3c\u0c3d\3"+
		"\2\2\2\u0c3d\u0c48\3\2\2\2\u0c3e\u0c3f\7\u00c1\2\2\u0c3f\u0c49\7\u02b8"+
		"\2\2\u0c40\u0c41\7\u0191\2\2\u0c41\u0c42\7\u00c1\2\2\u0c42\u0c46\3\2\2"+
		"\2\u0c43\u0c47\7\u00e4\2\2\u0c44\u0c45\7\u0191\2\2\u0c45\u0c47\7\u00e4"+
		"\2\2\u0c46\u0c43\3\2\2\2\u0c46\u0c44\3\2\2\2\u0c47\u0c49\3\2\2\2\u0c48"+
		"\u0c3e\3\2\2\2\u0c48\u0c40\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u00cf\3\2"+
		"\2\2\u0c4a\u0c4b\7\32\2\2\u0c4b\u0c4c\7\u0224\2\2\u0c4c\u0c4d\5\u029c"+
		"\u014f\2\u0c4d\u0c4e\7\u0096\2\2\u0c4e\u0c4f\5\u0292\u014a\2\u0c4f\u00d1"+
		"\3\2\2\2\u0c50\u0c54\5\u00e2r\2\u0c51\u0c54\5\u00d6l\2\u0c52\u0c54\5\u00e0"+
		"q\2\u0c53\u0c50\3\2\2\2\u0c53\u0c51\3\2\2\2\u0c53\u0c52\3\2\2\2\u0c54"+
		"\u00d3\3\2\2\2\u0c55\u0c57\t\r\2\2\u0c56\u0c58\7p\2\2\u0c57\u0c56\3\2"+
		"\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0c5a\3\2\2\2\u0c59\u0c5b\7W\2\2\u0c5a"+
		"\u0c59\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0c5d\7\u01cd"+
		"\2\2\u0c5d\u00d5\3\2\2\2\u0c5e\u0c5f\7\32\2\2\u0c5f\u0c61\7y\2\2\u0c60"+
		"\u0c62\5\u00b4[\2\u0c61\u0c60\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c63"+
		"\3\2\2\2\u0c63\u0c65\5\u0240\u0121\2\u0c64\u0c66\5\u00d8m\2\u0c65\u0c64"+
		"\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c68\3\2\2\2\u0c67\u0c69\5\u00d4k"+
		"\2\u0c68\u0c67\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6c"+
		"\7\7\2\2\u0c6b\u0c6d\5\u023a\u011e\2\u0c6c\u0c6b\3\2\2\2\u0c6c\u0c6d\3"+
		"\2\2\2\u0c6d\u0c6f\3\2\2\2\u0c6e\u0c70\5\u01a6\u00d4\2\u0c6f\u0c6e\3\2"+
		"\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c73\5\u01de\u00f0"+
		"\2\u0c72\u0c74\5\u00f6|\2\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74"+
		"\u00d7\3\2\2\2\u0c75\u0c76\7\u0298\2\2\u0c76\u0c7b\5\u00dan\2\u0c77\u0c78"+
		"\7\u0293\2\2\u0c78\u0c7a\5\u00dan\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c7d\3"+
		"\2\2\2\u0c7b\u0c79\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c7e\3\2\2\2\u0c7d"+
		"\u0c7b\3\2\2\2\u0c7e\u0c7f\7\u0299\2\2\u0c7f\u00d9\3\2\2\2\u0c80\u0c82"+
		"\5\u0290\u0149\2\u0c81\u0c83\5\u01fe\u0100\2\u0c82\u0c81\3\2\2\2\u0c82"+
		"\u0c83\3\2\2\2\u0c83\u0c85\3\2\2\2\u0c84\u0c86\5\u00dco\2\u0c85\u0c84"+
		"\3\2\2\2\u0c85\u0c86\3\2\2\2\u0c86\u0c88\3\2\2\2\u0c87\u0c89\5\u00dep"+
		"\2\u0c88\u0c87\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u00db\3\2\2\2\u0c8a\u0c8b"+
		"\7\u009b\2\2\u0c8b\u0c8c\5\u0296\u014c\2\u0c8c\u00dd\3\2\2\2\u0c8d\u0c8e"+
		"\7\u0135\2\2\u0c8e\u0c8f\5\u00c0a\2\u0c8f\u00df\3\2\2\2\u0c90\u0c91\7"+
		"\32\2\2\u0c91\u0c93\7y\2\2\u0c92\u0c94\5\u00b4[\2\u0c93\u0c92\3\2\2\2"+
		"\u0c93\u0c94\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c96\5\u0240\u0121\2\u0c96"+
		"\u0c97\7K\2\2\u0c97\u0c99\5\u0240\u0121\2\u0c98\u0c9a\5\u00d4k\2\u0c99"+
		"\u0c98\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9c\3\2\2\2\u0c9b\u0c9d\5\u00ec"+
		"w\2\u0c9c\u0c9b\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9f\3\2\2\2\u0c9e"+
		"\u0ca0\5\u00d4k\2\u0c9f\u0ca0\3\2\2\2\u0c9f\u0c9e\3\2\2\2\u0ca0\u00e1"+
		"\3\2\2\2\u0ca1\u0ca2\7\32\2\2\u0ca2\u0ca4\7y\2\2\u0ca3\u0ca5\5\u00b4["+
		"\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca7"+
		"\5\u0240\u0121\2\u0ca7\u0ca8\7\u0298\2\2\u0ca8\u0cb2\5\u00e6t\2\u0ca9"+
		"\u0caa\7\u0293\2\2\u0caa\u0caf\5\u00e4s\2\u0cab\u0cac\7\u0293\2\2\u0cac"+
		"\u0cae\5\u00e4s\2\u0cad\u0cab\3\2\2\2\u0cae\u0cb1\3\2\2\2\u0caf\u0cad"+
		"\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cb3\3\2\2\2\u0cb1\u0caf\3\2\2\2\u0cb2"+
		"\u0ca9\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb6\7\u0299"+
		"\2\2\u0cb5\u0cb7\5\u00ecw\2\u0cb6\u0cb5\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7"+
		"\u0cb9\3\2\2\2\u0cb8\u0cba\5\u01f8\u00fd\2\u0cb9\u0cb8\3\2\2\2\u0cb9\u0cba"+
		"\3\2\2\2\u0cba\u0cbc\3\2\2\2\u0cbb\u0cbd\5\u00eex\2\u0cbc\u0cbb\3\2\2"+
		"\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cbf\3\2\2\2\u0cbe\u0cc0\5\u00b2Z\2\u0cbf"+
		"\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cc2\3\2\2\2\u0cc1\u0cc3\5\u01fc"+
		"\u00ff\2\u0cc2\u0cc1\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc5\3\2\2\2\u0cc4"+
		"\u0cc6\5\u00d4k\2\u0cc5\u0cc4\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u00e3"+
		"\3\2\2\2\u0cc7\u0cc8\7\30\2\2\u0cc8\u0ce3\5\u02a8\u0155\2\u0cc9\u0cca"+
		"\7k\2\2\u0cca\u0ccb\7\u015f\2\2\u0ccb\u0ccd\5\u00c0a\2\u0ccc\u0cce\5\u02b2"+
		"\u015a\2\u0ccd\u0ccc\3\2\2\2\u0ccd\u0cce\3\2\2\2\u0cce\u0ce4\3\2\2\2\u0ccf"+
		"\u0cd0\7\63\2\2\u0cd0\u0cd1\7\u015f\2\2\u0cd1\u0cd2\5\u00c0a\2\u0cd2\u0cd3"+
		"\7m\2\2\u0cd3\u0cd5\5\u0240\u0121\2\u0cd4\u0cd6\5\u00c0a\2\u0cd5\u0cd4"+
		"\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u0ce4\3\2\2\2\u0cd7\u0cd8\7\u008c\2"+
		"\2\u0cd8\u0cda\5\u00c0a\2\u0cd9\u0cdb\5\u02b2\u015a\2\u0cda\u0cd9\3\2"+
		"\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0ce4\3\2\2\2\u0cdc\u0cdd\7\25\2\2\u0cdd"+
		"\u0cde\7\u0298\2\2\u0cde\u0cdf\5\u0218\u010d\2\u0cdf\u0ce1\7\u0299\2\2"+
		"\u0ce0\u0ce2\5\u02b2\u015a\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2"+
		"\u0ce4\3\2\2\2\u0ce3\u0cc9\3\2\2\2\u0ce3\u0ccf\3\2\2\2\u0ce3\u0cd7\3\2"+
		"\2\2\u0ce3\u0cdc\3\2\2\2\u0ce4\u00e5\3\2\2\2\u0ce5\u0cea\5\u00e8u\2\u0ce6"+
		"\u0ce7\7\u0293\2\2\u0ce7\u0ce9\5\u00e8u\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u0cec"+
		"\3\2\2\2\u0cea\u0ce8\3\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb\u00e7\3\2\2\2\u0cec"+
		"\u0cea\3\2\2\2\u0ced\u0cee\5\u0290\u0149\2\u0cee\u0cf2\5\u02c6\u0164\2"+
		"\u0cef\u0cf1\5\u00eav\2\u0cf0\u0cef\3\2\2\2\u0cf1\u0cf4\3\2\2\2\u0cf2"+
		"\u0cf0\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u0cf6\3\2\2\2\u0cf4\u0cf2\3\2"+
		"\2\2\u0cf5\u0cf7\5\u01fe\u0100\2\u0cf6\u0cf5\3\2\2\2\u0cf6\u0cf7\3\2\2"+
		"\2\u0cf7\u0cf9\3\2\2\2\u0cf8\u0cfa\5\u00dco\2\u0cf9\u0cf8\3\2\2\2\u0cf9"+
		"\u0cfa\3\2\2\2\u0cfa\u00e9\3\2\2\2\u0cfb\u0d07\t\16\2\2\u0cfc\u0cfd\7"+
		"\u0298\2\2\u0cfd\u0d02\5\u02b0\u0159\2\u0cfe\u0cff\7\u0293\2\2\u0cff\u0d01"+
		"\5\u02b0\u0159\2\u0d00\u0cfe\3\2\2\2\u0d01\u0d04\3\2\2\2\u0d02\u0d00\3"+
		"\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d05\3\2\2\2\u0d04\u0d02\3\2\2\2\u0d05"+
		"\u0d06\7\u0299\2\2\u0d06\u0d08\3\2\2\2\u0d07\u0cfc\3\2\2\2\u0d07\u0d08"+
		"\3\2\2\2\u0d08\u0d30\3\2\2\2\u0d09\u0d0a\7\30\2\2\u0d0a\u0d30\5\u02ae"+
		"\u0158\2\u0d0b\u0d0c\7\25\2\2\u0d0c\u0d0d\7\u0298\2\2\u0d0d\u0d0e\5\u0218"+
		"\u010d\2\u0d0e\u0d10\7\u0299\2\2\u0d0f\u0d11\5\u02b2\u015a\2\u0d10\u0d0f"+
		"\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d30\3\2\2\2\u0d12\u0d13\7&\2\2\u0d13"+
		"\u0d14\7\u008e\2\2\u0d14\u0d1c\5\u0218\u010d\2\u0d15\u0d16\7\u020a\2\2"+
		"\u0d16\u0d17\7\u008e\2\2\u0d17\u0d1c\5\u0218\u010d\2\u0d18\u0d19\7&\2"+
		"\2\u0d19\u0d1a\7\u008e\2\2\u0d1a\u0d1c\5\u0218\u010d\2\u0d1b\u0d12\3\2"+
		"\2\2\u0d1b\u0d15\3\2\2\2\u0d1b\u0d18\3\2\2\2\u0d1c\u0d30\3\2\2\2\u0d1d"+
		"\u0d30\5\u02b4\u015b\2\u0d1e\u0d1f\7k\2\2\u0d1f\u0d21\7\u015f\2\2\u0d20"+
		"\u0d22\5\u02b2\u015a\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u0d28"+
		"\3\2\2\2\u0d23\u0d24\7m\2\2\u0d24\u0d25\5\u0240\u0121\2\u0d25\u0d26\5"+
		"\u00c0a\2\u0d26\u0d28\3\2\2\2\u0d27\u0d1e\3\2\2\2\u0d27\u0d23\3\2\2\2"+
		"\u0d28\u0d30\3\2\2\2\u0d29\u0d2b\7\u008c\2\2\u0d2a\u0d2c\5\u02b2\u015a"+
		"\2\u0d2b\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d30\3\2\2\2\u0d2d\u0d2e"+
		"\7&\2\2\u0d2e\u0d30\5\u0218\u010d\2\u0d2f\u0cfb\3\2\2\2\u0d2f\u0d09\3"+
		"\2\2\2\u0d2f\u0d0b\3\2\2\2\u0d2f\u0d1b\3\2\2\2\u0d2f\u0d1d\3\2\2\2\u0d2f"+
		"\u0d27\3\2\2\2\u0d2f\u0d29\3\2\2\2\u0d2f\u0d2d\3\2\2\2\u0d30\u00eb\3\2"+
		"\2\2\u0d31\u0d32\t\17\2\2\u0d32\u00ed\3\2\2\2\u0d33\u0d38\7\u0247\2\2"+
		"\u0d34\u0d35\7\u0194\2\2\u0d35\u0d39\5\u028c\u0147\2\u0d36\u0d37\7\3\2"+
		"\2\u0d37\u0d39\7\u0195\2\2\u0d38\u0d34\3\2\2\2\u0d38\u0d36\3\2\2\2\u0d39"+
		"\u0d4e\3\2\2\2\u0d3a\u0d3b\7\u0203\2\2\u0d3b\u0d3c\7\u00bc\2\2\u0d3c\u0d4b"+
		"\5\u0218\u010d\2\u0d3d\u0d3e\7\3\2\2\u0d3e\u0d40\7\u0195\2\2\u0d3f\u0d41"+
		"\5\u01e0\u00f1\2\u0d40\u0d3f\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d4c\3"+
		"\2\2\2\u0d42\u0d43\7\u0195\2\2\u0d43\u0d48\5\u028c\u0147\2\u0d44\u0d45"+
		"\7\u0293\2\2\u0d45\u0d47\5\u028c\u0147\2\u0d46\u0d44\3\2\2\2\u0d47\u0d4a"+
		"\3\2\2\2\u0d48\u0d46\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4c\3\2\2\2\u0d4a"+
		"\u0d48\3\2\2\2\u0d4b\u0d3d\3\2\2\2\u0d4b\u0d42\3\2\2\2\u0d4c\u0d4e\3\2"+
		"\2\2\u0d4d\u0d33\3\2\2\2\u0d4d\u0d3a\3\2\2\2\u0d4e\u00ef\3\2\2\2\u0d4f"+
		"\u0d52\5\u00f2z\2\u0d50\u0d52\5\u00f4{\2\u0d51\u0d4f\3\2\2\2\u0d51\u0d50"+
		"\3\2\2\2\u0d52\u00f1\3\2\2\2\u0d53\u0d55\7\32\2\2\u0d54\u0d56\t\20\2\2"+
		"\u0d55\u0d54\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d58"+
		"\t\f\2\2\u0d58\u0d5a\7y\2\2\u0d59\u0d5b\5\u00b4[\2\u0d5a\u0d59\3\2\2\2"+
		"\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d5d\5\u0240\u0121\2\u0d5d"+
		"\u0d5e\7\u0298\2\2\u0d5e\u0d5f\5\u00e6t\2\u0d5f\u0d61\7\u0299\2\2\u0d60"+
		"\u0d62\5\u00e4s\2\u0d61\u0d60\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62\u0d67"+
		"\3\2\2\2\u0d63\u0d64\7_\2\2\u0d64\u0d65\7\u00d1\2\2\u0d65\u0d66\t\21\2"+
		"\2\u0d66\u0d68\7\u01f6\2\2\u0d67\u0d63\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68"+
		"\u0d6a\3\2\2\2\u0d69\u0d6b\5\u00ecw\2\u0d6a\u0d69\3\2\2\2\u0d6a\u0d6b"+
		"\3\2\2\2\u0d6b\u0d6e\3\2\2\2\u0d6c\u0d6d\7\u0191\2\2\u0d6d\u0d6f\7\u01d1"+
		"\2\2\u0d6e\u0d6c\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d71\3\2\2\2\u0d70"+
		"\u0d72\5\u01f8\u00fd\2\u0d71\u0d70\3\2\2\2\u0d71\u0d72\3\2\2\2\u0d72\u0d74"+
		"\3\2\2\2\u0d73\u0d75\5\u00eex\2\u0d74\u0d73\3\2\2\2\u0d74\u0d75\3\2\2"+
		"\2\u0d75\u0d77\3\2\2\2\u0d76\u0d78\5\u00b2Z\2\u0d77\u0d76\3\2\2\2\u0d77"+
		"\u0d78\3\2\2\2\u0d78\u0d7a\3\2\2\2\u0d79\u0d7b\5\u00d4k\2\u0d7a\u0d79"+
		"\3\2\2\2\u0d7a\u0d7b\3\2\2\2\u0d7b\u00f3\3\2\2\2\u0d7c\u0d7d\7\32\2\2"+
		"\u0d7d\u0d7e\t\f\2\2\u0d7e\u0d80\7y\2\2\u0d7f\u0d81\5\u00b4[\2\u0d80\u0d7f"+
		"\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d84\5\u0240\u0121"+
		"\2\u0d83\u0d85\5\u00d8m\2\u0d84\u0d83\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85"+
		"\u0d8a\3\2\2\2\u0d86\u0d87\7_\2\2\u0d87\u0d88\7\u00d1\2\2\u0d88\u0d89"+
		"\t\21\2\2\u0d89\u0d8b\7\u01f6\2\2\u0d8a\u0d86\3\2\2\2\u0d8a\u0d8b\3\2"+
		"\2\2\u0d8b\u0d8d\3\2\2\2\u0d8c\u0d8e\5\u00ecw\2\u0d8d\u0d8c\3\2\2\2\u0d8d"+
		"\u0d8e\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d91\7\7\2\2\u0d90\u0d92\5\u023a"+
		"\u011e\2\u0d91\u0d90\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0d94\3\2\2\2\u0d93"+
		"\u0d95\5\u01a6\u00d4\2\u0d94\u0d93\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d96"+
		"\3\2\2\2\u0d96\u0d98\5\u01de\u00f0\2\u0d97\u0d99\5\u00f6|\2\u0d98\u0d97"+
		"\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u00f5\3\2\2\2\u0d9a\u0d9b\7+\2\2\u0d9b"+
		"\u0d9c\7\u00bc\2\2\u0d9c\u0da1\5\u00f8}\2\u0d9d\u0d9e\7\u0293\2\2\u0d9e"+
		"\u0da0\5\u00f8}\2\u0d9f\u0d9d\3\2\2\2\u0da0\u0da3\3\2\2\2\u0da1\u0d9f"+
		"\3\2\2\2\u0da1\u0da2\3\2\2\2\u0da2\u00f7\3\2\2\2\u0da3\u0da1\3\2\2\2\u0da4"+
		"\u0da6\5\u023e\u0120\2\u0da5\u0da7\5\u00dco\2\u0da6\u0da5\3\2\2\2\u0da6"+
		"\u0da7\3\2\2\2\u0da7\u0da9\3\2\2\2\u0da8\u0daa\5\u01fe\u0100\2\u0da9\u0da8"+
		"\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u00f9\3\2\2\2\u0dab\u0dac\7\32\2\2"+
		"\u0dac\u0dad\7z\2\2\u0dad\u0dae\7\u0154\2\2\u0dae\u0daf\5\u0258\u012d"+
		"\2\u0daf\u0db0\7_\2\2\u0db0\u0db1\5\u0240\u0121\2\u0db1\u0db2\7\u0298"+
		"\2\2\u0db2\u0db3\5\u02ae\u0158\2\u0db3\u0db4\7\u0293\2\2\u0db4\u0db7\5"+
		"\u02c6\u0164\2\u0db5\u0db6\7\u0293\2\2\u0db6\u0db8\5\u00c0a\2\u0db7\u0db5"+
		"\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dc3\7\u0299\2"+
		"\2\u0dba\u0dc1\7\u021f\2\2\u0dbb\u0dbc\5\u02ae\u0158\2\u0dbc\u0dbd\7\u0298"+
		"\2\2\u0dbd\u0dbe\5\u02c6\u0164\2\u0dbe\u0dbf\7\u0299\2\2\u0dbf\u0dc2\3"+
		"\2\2\2\u0dc0\u0dc2\7V\2\2\u0dc1\u0dbb\3\2\2\2\u0dc1\u0dc0\3\2\2\2\u0dc2"+
		"\u0dc4\3\2\2\2\u0dc3\u0dba\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dcb\3\2"+
		"\2\2\u0dc5\u0dc6\7\u0233\2\2\u0dc6\u0dc7\5\u02ae\u0158\2\u0dc7\u0dc8\7"+
		"\u0298\2\2\u0dc8\u0dc9\5\u02c6\u0164\2\u0dc9\u0dca\7\u0299\2\2\u0dca\u0dcc"+
		"\3\2\2\2\u0dcb\u0dc5\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u00fb\3\2\2\2\u0dcd"+
		"\u0dce\7\32\2\2\u0dce\u0dcf\7\u008d\2\2\u0dcf\u0dd3\5\u029e\u0150\2\u0dd0"+
		"\u0dd2\5<\37\2\u0dd1\u0dd0\3\2\2\2\u0dd2\u0dd5\3\2\2\2\u0dd3\u0dd1\3\2"+
		"\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u00fd\3\2\2\2\u0dd5\u0dd3\3\2\2\2\u0dd6"+
		"\u0dd9\7\32\2\2\u0dd7\u0dd8\7a\2\2\u0dd8\u0dda\7\u01e8\2\2\u0dd9\u0dd7"+
		"\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddc\7\u0253\2"+
		"\2\u0ddc\u0ddd\5\u0242\u0122\2\u0ddd\u0ddf\5\u00c0a\2\u0dde\u0de0\5\u00d4"+
		"k\2\u0ddf\u0dde\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1"+
		"\u0de2\7\7\2\2\u0de2\u0de3\5\u01a8\u00d5\2\u0de3\u00ff\3\2\2\2\u0de4\u0de6"+
		"\7\u00f1\2\2\u0de5\u0de7\5\u023a\u011e\2\u0de6\u0de5\3\2\2\2\u0de6\u0de7"+
		"\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0de9\7\64\2\2\u0de9\u0deb\5\u0240"+
		"\u0121\2\u0dea\u0dec\5\u01f6\u00fc\2\u0deb\u0dea\3\2\2\2\u0deb\u0dec\3"+
		"\2\2\2\u0dec\u0101\3\2\2\2\u0ded\u0df4\5\u0104\u0083\2\u0dee\u0df4\5\u0104"+
		"\u0083\2\u0def\u0df4\5\u0108\u0085\2\u0df0\u0df4\5\u010a\u0086\2\u0df1"+
		"\u0df4\5\u010c\u0087\2\u0df2\u0df4\5\u010e\u0088\2\u0df3\u0ded\3\2\2\2"+
		"\u0df3\u0dee\3\2\2\2\u0df3\u0def\3\2\2\2\u0df3\u0df0\3\2\2\2\u0df3\u0df1"+
		"\3\2\2\2\u0df3\u0df2\3\2\2\2\u0df4\u0103\3\2\2\2\u0df5\u0df6\7\u009e\2"+
		"\2\u0df6\u0df7\7\u00fb\2\2\u0df7\u0df8\7\u01d4\2\2\u0df8\u0df9\5\u02ae"+
		"\u0158\2\u0df9\u0105\3\2\2\2\u0dfa\u0dfb\7\32\2\2\u0dfb\u0dfc\7\u00fb"+
		"\2\2\u0dfc\u0dfd\7\u01d4\2\2\u0dfd\u0dfe\t\22\2\2\u0dfe\u0e01\5\u02ae"+
		"\u0158\2\u0dff\u0e00\7\u00d0\2\2\u0e00\u0e02\5\u0292\u014a\2\u0e01\u0dff"+
		"\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e04\5\4\3\2\u0e04"+
		"\u0107\3\2\2\2\u0e05\u0e06\7\u00e9\2\2\u0e06\u0e07\7\u00fb\2\2\u0e07\u0e0a"+
		"\7\u01d4\2\2\u0e08\u0e0b\5\u02ae\u0158\2\u0e09\u0e0b\5\4\3\2\u0e0a\u0e08"+
		"\3\2\2\2\u0e0a\u0e09\3\2\2\2\u0e0b\u0109\3\2\2\2\u0e0c\u0e0d\7\u0105\2"+
		"\2\u0e0d\u0e0e\7\u00fb\2\2\u0e0e\u0e0f\7\u01d4\2\2\u0e0f\u0e10\5\u02ae"+
		"\u0158\2\u0e10\u010b\3\2\2\2\u0e11\u0e12\7\u0132\2\2\u0e12\u0e13\7\u00fb"+
		"\2\2\u0e13\u0e14\7\u01d4\2\2\u0e14\u0e15\5\4\3\2\u0e15\u010d\3\2\2\2\u0e16"+
		"\u0e17\7\u01fb\2\2\u0e17\u0e18\7\u01d4\2\2\u0e18\u0e19\5\4\3\2\u0e19\u010f"+
		"\3\2\2\2\u0e1a\u0e1b\7\u0100\2\2\u0e1b\u0e1c\5\u025c\u012f\2\u0e1c\u0111"+
		"\3\2\2\2\u0e1d\u0e1e\7\u0105\2\2\u0e1e\u0e1f\7\u009a\2\2\u0e1f\u0e20\7"+
		"\u01c3\2\2\u0e20\u0e21\7_\2\2\u0e21\u0e22\5\u0240\u0121\2\u0e22\u0e26"+
		"\7\62\2\2\u0e23\u0e24\7\27\2\2\u0e24\u0e27\5\u0290\u0149\2\u0e25\u0e27"+
		"\7\u01f6\2\2\u0e26\u0e23\3\2\2\2\u0e26\u0e25\3\2\2\2\u0e27\u0113\3\2\2"+
		"\2\u0e28\u0e29\7\u0105\2\2\u0e29\u0e2a\7\u00a3\2\2\u0e2a\u0e2c\7\u012f"+
		"\2\2\u0e2b\u0e2d\5\u00b4[\2\u0e2c\u0e2b\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d"+
		"\u0e2e\3\2\2\2\u0e2e\u0e2f\5\u0250\u0129\2\u0e2f\u0e30\5\u00aaV\2\u0e30"+
		"\u0115\3\2\2\2\u0e31\u0e32\7\u0105\2\2\u0e32\u0e34\7\u00ae\2\2\u0e33\u0e35"+
		"\5\u00b4[\2\u0e34\u0e33\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u0e36\3\2\2"+
		"\2\u0e36\u0e38\5\u02a6\u0154\2\u0e37\u0e39\7\u00c3\2\2\u0e38\u0e37\3\2"+
		"\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0117\3\2\2\2\u0e3a\u0e3b\7\u0105\2\2\u0e3b"+
		"\u0e3d\7\u028a\2\2\u0e3c\u0e3e\5\u00b4[\2\u0e3d\u0e3c\3\2\2\2\u0e3d\u0e3e"+
		"\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e44\5\u0276\u013c\2\u0e40\u0e41\7"+
		"\u0293\2\2\u0e41\u0e43\5\u0276\u013c\2\u0e42\u0e40\3\2\2\2\u0e43\u0e46"+
		"\3\2\2\2\u0e44\u0e42\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45\u0e48\3\2\2\2\u0e46"+
		"\u0e44\3\2\2\2\u0e47\u0e49\7\u00c3\2\2\u0e48\u0e47\3\2\2\2\u0e48\u0e49"+
		"\3\2\2\2\u0e49\u0119\3\2\2\2\u0e4a\u0e4b\7\u0105\2\2\u0e4b\u0e4c\7\u0120"+
		"\2\2\u0e4c\u0e4e\7\67\2\2\u0e4d\u0e4f\5\u00b4[\2\u0e4e\u0e4d\3\2\2\2\u0e4e"+
		"\u0e4f\3\2\2\2\u0e4f\u0e50\3\2\2\2\u0e50\u0e51\5\u02a4\u0153\2\u0e51\u011b"+
		"\3\2\2\2\u0e52\u0e53\7\u0105\2\2\u0e53\u0e55\7\u012f\2\2\u0e54\u0e56\5"+
		"\u00b4[\2\u0e55\u0e54\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e57\3\2\2\2"+
		"\u0e57\u0e58\5\u0250\u0129\2\u0e58\u0e59\5\u00aaV\2\u0e59\u011d\3\2\2"+
		"\2\u0e5a\u0e5b\7\u0105\2\2\u0e5b\u0e5c\7\u0215\2\2\u0e5c\u0e5d\5\u0244"+
		"\u0123\2\u0e5d\u0e5e\7\u0298\2\2\u0e5e\u0e5f\7\u0299\2\2\u0e5f\u011f\3"+
		"\2\2\2\u0e60\u0e61\7\u0105\2\2\u0e61\u0e62\7\u0125\2\2\u0e62\u0e63\5\u0246"+
		"\u0124\2\u0e63\u0e64\7\u0298\2\2\u0e64\u0e65\7\u0299\2\2\u0e65\u0121\3"+
		"\2\2\2\u0e66\u0e67\7\u0105\2\2\u0e67\u0e68\7\u01ad\2\2\u0e68\u0e69\5\u0248"+
		"\u0125\2\u0e69\u0e6a\7\u0298\2\2\u0e6a\u0e6b\7\u0299\2\2\u0e6b\u0123\3"+
		"\2\2\2\u0e6c\u0e6d\7\u0105\2\2\u0e6d\u0e6f\7\u0188\2\2\u0e6e\u0e70\5\u00b4"+
		"[\2\u0e6f\u0e6e\3\2\2\2\u0e6f\u0e70\3\2\2\2\u0e70\u0e71\3\2\2\2\u0e71"+
		"\u0e76\5\u0256\u012c\2\u0e72\u0e73\7\u0293\2\2\u0e73\u0e75\5\u0256\u012c"+
		"\2\u0e74\u0e72\3\2\2\2\u0e75\u0e78\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e76\u0e77"+
		"\3\2\2\2\u0e77\u0125\3\2\2\2\u0e78\u0e76\3\2\2\2\u0e79\u0e7a\7\u0105\2"+
		"\2\u0e7a\u0e7c\7\u0168\2\2\u0e7b\u0e7d\5\u00b4[\2\u0e7c\u0e7b\3\2\2\2"+
		"\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u0e80\5\u0252\u012a\2\u0e7f"+
		"\u0e81\7\u00c3\2\2\u0e80\u0e7f\3\2\2\2\u0e80\u0e81\3\2\2\2\u0e81\u0127"+
		"\3\2\2\2\u0e82\u0e83\7\u0105\2\2\u0e83\u0e84\7\u016a\2\2\u0e84\u0e85\7"+
		"\u0282\2\2\u0e85\u0e86\7\67\2\2\u0e86\u0e88\5\u0270\u0139\2\u0e87\u0e89"+
		"\7\u00c3\2\2\u0e88\u0e87\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0129\3\2\2"+
		"\2\u0e8a\u0e8b\7\u0105\2\2\u0e8b\u0e8c\7\u016a\2\2\u0e8c\u0e8d\7\u018f"+
		"\2\2\u0e8d\u0e8e\7\u0281\2\2\u0e8e\u0e90\5\u0272\u013a\2\u0e8f\u0e91\7"+
		"\u00c3\2\2\u0e90\u0e8f\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u012b\3\2\2\2"+
		"\u0e92\u0e93\7\u0105\2\2\u0e93\u0e94\7\u018f\2\2\u0e94\u0e96\7\u015a\2"+
		"\2\u0e95\u0e97\5\u00b4[\2\u0e96\u0e95\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97"+
		"\u0e98\3\2\2\2\u0e98\u0e9a\5\u02aa\u0156\2\u0e99\u0e9b\7\u00c3\2\2\u0e9a"+
		"\u0e99\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u012d\3\2\2\2\u0e9c\u0e9d\7\u0105"+
		"\2\2\u0e9d\u0e9f\7\u0197\2\2\u0e9e\u0ea0\5\u00b4[\2\u0e9f\u0e9e\3\2\2"+
		"\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea1\3\2\2\2\u0ea1\u0ea2\5\u0266\u0134\2"+
		"\u0ea2\u012f\3\2\2\2\u0ea3\u0ea4\7\u0105\2\2\u0ea4\u0ea6\7\u01cf\2\2\u0ea5"+
		"\u0ea7\5\u00b4[\2\u0ea6\u0ea5\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u0ea8"+
		"\3\2\2\2\u0ea8\u0ea9\5\u024c\u0127\2\u0ea9\u0eaa\5\u00aaV\2\u0eaa\u0131"+
		"\3\2\2\2\u0eab\u0eac\7\u0105\2\2\u0eac\u0eae\7\u01d0\2\2\u0ead\u0eaf\5"+
		"\u00b4[\2\u0eae\u0ead\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u0eb0\3\2\2\2"+
		"\u0eb0\u0eb5\5\u02ac\u0157\2\u0eb1\u0eb2\7\u0293\2\2\u0eb2\u0eb4\5\u02ac"+
		"\u0157\2\u0eb3\u0eb1\3\2\2\2\u0eb4\u0eb7\3\2\2\2\u0eb5\u0eb3\3\2\2\2\u0eb5"+
		"\u0eb6\3\2\2\2\u0eb6\u0eb9\3\2\2\2\u0eb7\u0eb5\3\2\2\2\u0eb8\u0eba\7\u00c3"+
		"\2\2\u0eb9\u0eb8\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba\u0133\3\2\2\2\u0ebb"+
		"\u0ebc\7\u0105\2\2\u0ebc\u0ebe\7\u01d1\2\2\u0ebd\u0ebf\5\u00b4[\2\u0ebe"+
		"\u0ebd\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec5\5\u024a"+
		"\u0126\2\u0ec1\u0ec2\7\u0293\2\2\u0ec2\u0ec4\5\u024a\u0126\2\u0ec3\u0ec1"+
		"\3\2\2\2\u0ec4\u0ec7\3\2\2\2\u0ec5\u0ec3\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6"+
		"\u0ec9\3\2\2\2\u0ec7\u0ec5\3\2\2\2\u0ec8\u0eca\t\4\2\2\u0ec9\u0ec8\3\2"+
		"\2\2\u0ec9\u0eca\3\2\2\2\u0eca\u0135\3\2\2\2\u0ecb\u0ecc\7\u0105\2\2\u0ecc"+
		"\u0ecd\7\u01ea\2\2\u0ecd\u0ece\7\u01c4\2\2\u0ece\u0ecf\5\u027c\u013f\2"+
		"\u0ecf\u0137\3\2\2\2\u0ed0\u0ed1\7\u0105\2\2\u0ed1\u0ed3\7\u01f2\2\2\u0ed2"+
		"\u0ed4\5\u00b4[\2\u0ed3\u0ed2\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0ed5"+
		"\3\2\2\2\u0ed5\u0eda\5\u0278\u013d\2\u0ed6\u0ed7\7\u0293\2\2\u0ed7\u0ed9"+
		"\5\u0278\u013d\2\u0ed8\u0ed6\3\2\2\2\u0ed9\u0edc\3\2\2\2\u0eda\u0ed8\3"+
		"\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0ede\3\2\2\2\u0edc\u0eda\3\2\2\2\u0edd"+
		"\u0edf\7\u00c3\2\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u0139"+
		"\3\2\2\2\u0ee0\u0ee1\7\u0105\2\2\u0ee1\u0ee2\7\u0269\2\2\u0ee2\u0ee3\7"+
		"\u01f7\2\2\u0ee3\u0ee4\5\u0274\u013b\2\u0ee4\u013b\3\2\2\2\u0ee5\u0ee6"+
		"\7\u0105\2\2\u0ee6\u0ee8\7p\2\2\u0ee7\u0ee9\5\u00b4[\2\u0ee8\u0ee7\3\2"+
		"\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eef\5\u025a\u012e"+
		"\2\u0eeb\u0eec\7\u0293\2\2\u0eec\u0eee\5\u025a\u012e\2\u0eed\u0eeb\3\2"+
		"\2\2\u0eee\u0ef1\3\2\2\2\u0eef\u0eed\3\2\2\2\u0eef\u0ef0\3\2\2\2\u0ef0"+
		"\u0ef3\3\2\2\2\u0ef1\u0eef\3\2\2\2\u0ef2\u0ef4\7\u00c3\2\2\u0ef3\u0ef2"+
		"\3\2\2\2\u0ef3\u0ef4\3\2\2\2\u0ef4\u013d\3\2\2\2\u0ef5\u0ef6\7\u0105\2"+
		"\2\u0ef6\u0ef8\7\u0206\2\2\u0ef7\u0ef9\5\u00b4[\2\u0ef8\u0ef7\3\2\2\2"+
		"\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0eff\5\u0254\u012b\2\u0efb"+
		"\u0efc\7\u0293\2\2\u0efc\u0efe\5\u0254\u012b\2\u0efd\u0efb\3\2\2\2\u0efe"+
		"\u0f01\3\2\2\2\u0eff\u0efd\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f03\3\2"+
		"\2\2\u0f01\u0eff\3\2\2\2\u0f02\u0f04\t\4\2\2\u0f03\u0f02\3\2\2\2\u0f03"+
		"\u0f04\3\2\2\2\u0f04\u013f\3\2\2\2\u0f05\u0f06\7\u0105\2\2\u0f06\u0f08"+
		"\7\u0224\2\2\u0f07\u0f09\5\u00b4[\2\u0f08\u0f07\3\2\2\2\u0f08\u0f09\3"+
		"\2\2\2\u0f09\u0f0a\3\2\2\2\u0f0a\u0f0c\5\u029c\u014f\2\u0f0b\u0f0d\7\u00c3"+
		"\2\2\u0f0c\u0f0b\3\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0141\3\2\2\2\u0f0e"+
		"\u0f0f\7\u0105\2\2\u0f0f\u0f11\7y\2\2\u0f10\u0f12\5\u00b4[\2\u0f11\u0f10"+
		"\3\2\2\2\u0f11\u0f12\3\2\2\2\u0f12\u0f13\3\2\2\2\u0f13\u0f18\5\u0240\u0121"+
		"\2\u0f14\u0f15\7\u0293\2\2\u0f15\u0f17\5\u0240\u0121\2\u0f16\u0f14\3\2"+
		"\2\2\u0f17\u0f1a\3\2\2\2\u0f18\u0f16\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19"+
		"\u0f1c\3\2\2\2\u0f1a\u0f18\3\2\2\2\u0f1b\u0f1d\7\u00c3\2\2\u0f1c\u0f1b"+
		"\3\2\2\2\u0f1c\u0f1d\3\2\2\2\u0f1d\u0143\3\2\2\2\u0f1e\u0f1f\7\u0105\2"+
		"\2\u0f1f\u0f20\7z\2\2\u0f20\u0f22\7\u0154\2\2\u0f21\u0f23\5\u00b4[\2\u0f22"+
		"\u0f21\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0f25\5\u0258"+
		"\u012d\2\u0f25\u0145\3\2\2\2\u0f26\u0f27\7\u0105\2\2\u0f27\u0f28\7\u0236"+
		"\2\2\u0f28\u0f2a\7\u012f\2\2\u0f29\u0f2b\5\u00b4[\2\u0f2a\u0f29\3\2\2"+
		"\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2d\5\u0250\u0129\2"+
		"\u0f2d\u0f2e\5\u00aaV\2\u0f2e\u0147\3\2\2\2\u0f2f\u0f30\7\u0105\2\2\u0f30"+
		"\u0f32\7\u008d\2\2\u0f31\u0f33\5\u00b4[\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33"+
		"\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f39\5\u029e\u0150\2\u0f35\u0f36\7"+
		"\u0293\2\2\u0f36\u0f38\5\u029e\u0150\2\u0f37\u0f35\3\2\2\2\u0f38\u0f3b"+
		"\3\2\2\2\u0f39\u0f37\3\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0f3d\3\2\2\2\u0f3b"+
		"\u0f39\3\2\2\2\u0f3c\u0f3e\7\u00c3\2\2\u0f3d\u0f3c\3\2\2\2\u0f3d\u0f3e"+
		"\3\2\2\2\u0f3e\u0149\3\2\2\2\u0f3f\u0f40\7\u0105\2\2\u0f40\u0f42\7\u0253"+
		"\2\2\u0f41\u0f43\5\u00b4[\2\u0f42\u0f41\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43"+
		"\u0f44\3\2\2\2\u0f44\u0f45\5\u0242\u0122\2\u0f45\u0f46\7\u0293\2\2\u0f46"+
		"\u0f47\5\u0242\u0122\2\u0f47\u014b\3\2\2\2\u0f48\u0f4a\7,\2\2\u0f49\u0f4b"+
		"\t\7\2\2\u0f4a\u0f49\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u014d\3\2\2\2\u0f4c"+
		"\u0f4e\7\u011c\2\2\u0f4d\u0f4f\5\u023a\u011e\2\u0f4e\u0f4d\3\2\2\2\u0f4e"+
		"\u0f4f\3\2\2\2\u0f4f\u0f51\3\2\2\2\u0f50\u0f52\t\23\2\2\u0f51\u0f50\3"+
		"\2\2\2\u0f51\u0f52\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u0f54\5\4\3\2\u0f54"+
		"\u014f\3\2\2\2\u0f55\u0f56\7\u011d\2\2\u0f56\u0f57\7\u0085\2\2\u0f57\u0f58"+
		"\7\u01ac\2\2\u0f58\u0f59\7\u0298\2\2\u0f59\u0f5a\7\u0261\2\2\u0f5a\u0f5b"+
		"\7\u02a3\2\2\u0f5b\u0f60\5f\64\2\u0f5c\u0f5d\7\u0293\2\2\u0f5d\u0f5e\7"+
		"\u0263\2\2\u0f5e\u0f5f\7\u02a3\2\2\u0f5f\u0f61\5\u0292\u014a\2\u0f60\u0f5c"+
		"\3\2\2\2\u0f60\u0f61\3\2\2\2\u0f61\u0f66\3\2\2\2\u0f62\u0f63\7\u0293\2"+
		"\2\u0f63\u0f64\7\u0262\2\2\u0f64\u0f65\7\u02a3\2\2\u0f65\u0f67\5\u0292"+
		"\u014a\2\u0f66\u0f62\3\2\2\2\u0f66\u0f67\3\2\2\2\u0f67\u0f6c\3\2\2\2\u0f68"+
		"\u0f69\7\u0293\2\2\u0f69\u0f6a\7\u0264\2\2\u0f6a\u0f6b\7\u02a3\2\2\u0f6b"+
		"\u0f6d\5\u0292\u014a\2\u0f6c\u0f68\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d\u0f72"+
		"\3\2\2\2\u0f6e\u0f6f\7\u0293\2\2\u0f6f\u0f70\7\u0265\2\2\u0f70\u0f71\7"+
		"\u02a3\2\2\u0f71\u0f73\5\u0292\u014a\2\u0f72\u0f6e\3\2\2\2\u0f72\u0f73"+
		"\3\2\2\2\u0f73\u0f78\3\2\2\2\u0f74\u0f75\7\u0293\2\2\u0f75\u0f76\7\u0266"+
		"\2\2\u0f76\u0f77\7\u02a3\2\2\u0f77\u0f79\5\u0292\u014a\2\u0f78\u0f74\3"+
		"\2\2\2\u0f78\u0f79\3\2\2\2\u0f79\u0f7a\3\2\2\2\u0f7a\u0f7c\7\u0299\2\2"+
		"\u0f7b\u0f7d\5\u01f0\u00f9\2\u0f7c\u0f7b\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d"+
		"\u0f7e\3\2\2\2\u0f7e\u0f7f\7\7\2\2\u0f7f\u0f80\5\u01a8\u00d5\2\u0f80\u0151"+
		"\3\2\2\2\u0f81\u0f82\7\u011d\2\2\u0f82\u0f83\7\u0085\2\2\u0f83\u0f84\7"+
		"\u0252\2\2\u0f84\u0f86\5\u0240\u0121\2\u0f85\u0f87\5\u00c0a\2\u0f86\u0f85"+
		"\3\2\2\2\u0f86\u0f87\3\2\2\2\u0f87\u0f8f\3\2\2\2\u0f88\u0f89\7\7\2\2\u0f89"+
		"\u0f90\5\u01a8\u00d5\2\u0f8a\u0f8b\7\64\2\2\u0f8b\u0f8d\5\u0240\u0121"+
		"\2\u0f8c\u0f8e\5\u00c0a\2\u0f8d\u0f8c\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e"+
		"\u0f90\3\2\2\2\u0f8f\u0f88\3\2\2\2\u0f8f\u0f8a\3\2\2\2\u0f90\u0153\3\2"+
		"\2\2\u0f91\u0f9f\5\u0170\u00b9\2\u0f92\u0f9f\5\u016e\u00b8\2\u0f93\u0f9f"+
		"\5\u016c\u00b7\2\u0f94\u0f9f\5\u016a\u00b6\2\u0f95\u0f9f\5\u0168\u00b5"+
		"\2\u0f96\u0f9f\5\u0166\u00b4\2\u0f97\u0f9f\5\u0164\u00b3\2\u0f98\u0f9f"+
		"\5\u0160\u00b1\2\u0f99\u0f9f\5\u015e\u00b0\2\u0f9a\u0f9f\5\u015c\u00af"+
		"\2\u0f9b\u0f9f\5\u015a\u00ae\2\u0f9c\u0f9f\5\u0158\u00ad\2\u0f9d\u0f9f"+
		"\5\u0156\u00ac\2\u0f9e\u0f91\3\2\2\2\u0f9e\u0f92\3\2\2\2\u0f9e\u0f93\3"+
		"\2\2\2\u0f9e\u0f94\3\2\2\2\u0f9e\u0f95\3\2\2\2\u0f9e\u0f96\3\2\2\2\u0f9e"+
		"\u0f97\3\2\2\2\u0f9e\u0f98\3\2\2\2\u0f9e\u0f99\3\2\2\2\u0f9e\u0f9a\3\2"+
		"\2\2\u0f9e\u0f9b\3\2\2\2\u0f9e\u0f9c\3\2\2\2\u0f9e\u0f9d\3\2\2\2\u0f9f"+
		"\u0155\3\2\2\2\u0fa0\u0fa3\7\66\2\2\u0fa1\u0fa4\7q\2\2\u0fa2\u0fa4\5\u00d4"+
		"k\2\u0fa3\u0fa1\3\2\2\2\u0fa3\u0fa2\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5"+
		"\u0fa6\7_\2\2\u0fa6\u0fab\5\u0240\u0121\2\u0fa7\u0fa8\7\u0293\2\2\u0fa8"+
		"\u0faa\5\u0240\u0121\2\u0fa9\u0fa7\3\2\2\2\u0faa\u0fad\3\2\2\2\u0fab\u0fa9"+
		"\3\2\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fae\3\2\2\2\u0fad\u0fab\3\2\2\2\u0fae"+
		"\u0faf\7\u0085\2\2\u0faf\u0fb1\5\u0174\u00bb\2\u0fb0\u0fb2\5\u0172\u00ba"+
		"\2\u0fb1\u0fb0\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0157\3\2\2\2\u0fb3\u0fb9"+
		"\7\66\2\2\u0fb4\u0fba\7\u0119\2\2\u0fb5\u0fb7\7\3\2\2\u0fb6\u0fb8\7\u01cd"+
		"\2\2\u0fb7\u0fb6\3\2\2\2\u0fb7\u0fb8\3\2\2\2\u0fb8\u0fba\3\2\2\2\u0fb9"+
		"\u0fb4\3\2\2\2\u0fb9\u0fb5\3\2\2\2\u0fba\u0fdf\3\2\2\2\u0fbb\u0fc6\7_"+
		"\2\2\u0fbc\u0fc7\7\u012f\2\2\u0fbd\u0fbe\7\u00a3\2\2\u0fbe\u0fc7\7\u012f"+
		"\2\2\u0fbf\u0fc0\7\u00a7\2\2\u0fc0\u0fc7\7\u012f\2\2\u0fc1\u0fc2\7\u0236"+
		"\2\2\u0fc2\u0fc7\7\u012f\2\2\u0fc3\u0fc7\7\u0125\2\2\u0fc4\u0fc7\7\u01ad"+
		"\2\2\u0fc5\u0fc7\7\u0215\2\2\u0fc6\u0fbc\3\2\2\2\u0fc6\u0fbd\3\2\2\2\u0fc6"+
		"\u0fbf\3\2\2\2\u0fc6\u0fc1\3\2\2\2\u0fc6\u0fc3\3\2\2\2\u0fc6\u0fc4\3\2"+
		"\2\2\u0fc6\u0fc5\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0fc9\5\u0250\u0129"+
		"\2\u0fc9\u0fd0\5\u00aaV\2\u0fca\u0fcb\7\u0293\2\2\u0fcb\u0fcc\5\u0250"+
		"\u0129\2\u0fcc\u0fcd\5\u00aaV\2\u0fcd\u0fcf\3\2\2\2\u0fce\u0fca\3\2\2"+
		"\2\u0fcf\u0fd2\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fe0"+
		"\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd3\u0fd4\7\3\2\2\u0fd4\u0fd5\7\u0130\2"+
		"\2\u0fd5\u0fd6\7;\2\2\u0fd6\u0fd7\7p\2\2\u0fd7\u0fdc\5\u025a\u012e\2\u0fd8"+
		"\u0fd9\7\u0293\2\2\u0fd9\u0fdb\5\u025a\u012e\2\u0fda\u0fd8\3\2\2\2\u0fdb"+
		"\u0fde\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u0fe0\3\2"+
		"\2\2\u0fde\u0fdc\3\2\2\2\u0fdf\u0fbb\3\2\2\2\u0fdf\u0fd3\3\2\2\2\u0fe0"+
		"\u0fe1\3\2\2\2\u0fe1\u0fe2\7\u0085\2\2\u0fe2\u0fe4\5\u0174\u00bb\2\u0fe3"+
		"\u0fe5\5\u0172\u00ba\2\u0fe4\u0fe3\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0159"+
		"\3\2\2\2\u0fe6\u0ff3\7\66\2\2\u0fe7\u0fec\5\u0162\u00b2\2\u0fe8\u0fe9"+
		"\7\u0293\2\2\u0fe9\u0feb\5\u0162\u00b2\2\u0fea\u0fe8\3\2\2\2\u0feb\u0fee"+
		"\3\2\2\2\u0fec\u0fea\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0ff4\3\2\2\2\u0fee"+
		"\u0fec\3\2\2\2\u0fef\u0ff1\7\3\2\2\u0ff0\u0ff2\7\u01cd\2\2\u0ff1\u0ff0"+
		"\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff4\3\2\2\2\u0ff3\u0fe7\3\2\2\2\u0ff3"+
		"\u0fef\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u100b\7_\2\2\u0ff6\u0ff7\7y\2"+
		"\2\u0ff7\u0ffc\5\u0240\u0121\2\u0ff8\u0ff9\7\u0293\2\2\u0ff9\u0ffb\5\u0240"+
		"\u0121\2\u0ffa\u0ff8\3\2\2\2\u0ffb\u0ffe\3\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffc"+
		"\u0ffd\3\2\2\2\u0ffd\u100c\3\2\2\2\u0ffe\u0ffc\3\2\2\2\u0fff\u1000\7\3"+
		"\2\2\u1000\u1001\7\u0227\2\2\u1001\u1002\7;\2\2\u1002\u1003\7p\2\2\u1003"+
		"\u1008\5\u025a\u012e\2\u1004\u1005\7\u0293\2\2\u1005\u1007\5\u025a\u012e"+
		"\2\u1006\u1004\3\2\2\2\u1007\u100a\3\2\2\2\u1008\u1006\3\2\2\2\u1008\u1009"+
		"\3\2\2\2\u1009\u100c\3\2\2\2\u100a\u1008\3\2\2\2\u100b\u0ff6\3\2\2\2\u100b"+
		"\u0fff\3\2\2\2\u100c\u100d\3\2\2\2\u100d\u100e\7\u0085\2\2\u100e\u1010"+
		"\5\u0174\u00bb\2\u100f\u1011\5\u0172\u00ba\2\u1010\u100f\3\2\2\2\u1010"+
		"\u1011\3\2\2\2\u1011\u015b\3\2\2\2\u1012\u101f\7\66\2\2\u1013\u1018\t"+
		"\24\2\2\u1014\u1015\7\u0293\2\2\u1015\u1017\t\24\2\2\u1016\u1014\3\2\2"+
		"\2\u1017\u101a\3\2\2\2\u1018\u1016\3\2\2\2\u1018\u1019\3\2\2\2\u1019\u1020"+
		"\3\2\2\2\u101a\u1018\3\2\2\2\u101b\u101d\7\3\2\2\u101c\u101e\7\u01cd\2"+
		"\2\u101d\u101c\3\2\2\2\u101d\u101e\3\2\2\2\u101e\u1020\3\2\2\2\u101f\u1013"+
		"\3\2\2\2\u101f\u101b\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1022\7_\2\2\u1022"+
		"\u1023\7\u016c\2\2\u1023\u1024\5f\64\2\u1024\u1025\7\u0085\2\2\u1025\u1027"+
		"\5\u0174\u00bb\2\u1026\u1028\5\u0172\u00ba\2\u1027\u1026\3\2\2\2\u1027"+
		"\u1028\3\2\2\2\u1028\u015d\3\2\2\2\u1029\u102f\7\66\2\2\u102a\u1030\7"+
		"q\2\2\u102b\u102d\7\3\2\2\u102c\u102e\7\u01cd\2\2\u102d\u102c\3\2\2\2"+
		"\u102d\u102e\3\2\2\2\u102e\u1030\3\2\2\2\u102f\u102a\3\2\2\2\u102f\u102b"+
		"\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1047\7_\2\2\u1032\u1033\7\u0206\2"+
		"\2\u1033\u1038\5\u0254\u012b\2\u1034\u1035\7\u0293\2\2\u1035\u1037\5\u0254"+
		"\u012b\2\u1036\u1034\3\2\2\2\u1037\u103a\3\2\2\2\u1038\u1036\3\2\2\2\u1038"+
		"\u1039\3\2\2\2\u1039\u1048\3\2\2\2\u103a\u1038\3\2\2\2\u103b\u103c\7\3"+
		"\2\2\u103c\u103d\7\u0207\2\2\u103d\u103e\7;\2\2\u103e\u103f\7p\2\2\u103f"+
		"\u1044\5\u025a\u012e\2\u1040\u1041\7\u0293\2\2\u1041\u1043\5\u025a\u012e"+
		"\2\u1042\u1040\3\2\2\2\u1043\u1046\3\2\2\2\u1044\u1042\3\2\2\2\u1044\u1045"+
		"\3\2\2\2\u1045\u1048\3\2\2\2\u1046\u1044\3\2\2\2\u1047\u1032\3\2\2\2\u1047"+
		"\u103b\3\2\2\2\u1048\u1049\3\2\2\2\u1049\u104a\7\u0085\2\2\u104a\u104c"+
		"\5\u0174\u00bb\2\u104b\u104d\5\u0172\u00ba\2\u104c\u104b\3\2\2\2\u104c"+
		"\u104d\3\2\2\2\u104d\u015f\3\2\2\2\u104e\u105b\7\66\2\2\u104f\u1054\5"+
		"\u0162\u00b2\2\u1050\u1051\7\u0293\2\2\u1051\u1053\5\u0162\u00b2\2\u1052"+
		"\u1050\3\2\2\2\u1053\u1056\3\2\2\2\u1054\u1052\3\2\2\2\u1054\u1055\3\2"+
		"\2\2\u1055\u105c\3\2\2\2\u1056\u1054\3\2\2\2\u1057\u1059\7\3\2\2\u1058"+
		"\u105a\7\u01cd\2\2\u1059\u1058\3\2\2\2\u1059\u105a\3\2\2\2\u105a\u105c"+
		"\3\2\2\2\u105b\u104f\3\2\2\2\u105b\u1057\3\2\2\2\u105c\u105d\3\2\2\2\u105d"+
		"\u105e\7_\2\2\u105e\u105f\7p\2\2\u105f\u1064\5\u025a\u012e\2\u1060\u1061"+
		"\7\u0293\2\2\u1061\u1063\5\u025a\u012e\2\u1062\u1060\3\2\2\2\u1063\u1066"+
		"\3\2\2\2\u1064\u1062\3\2\2\2\u1064\u1065\3\2\2\2\u1065\u1067\3\2\2\2\u1066"+
		"\u1064\3\2\2\2\u1067\u1068\7\u0085\2\2\u1068\u106a\5\u0174\u00bb\2\u1069"+
		"\u106b\5\u0172\u00ba\2\u106a\u1069\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u0161"+
		"\3\2\2\2\u106c\u106d\t\25\2\2\u106d\u0163\3\2\2\2\u106e\u106f\7\66\2\2"+
		"\u106f\u1074\5\u0278\u013d\2\u1070\u1071\7\u0293\2\2\u1071\u1073\5\u0278"+
		"\u013d\2\u1072\u1070\3\2\2\2\u1073\u1076\3\2\2\2\u1074\u1072\3\2\2\2\u1074"+
		"\u1075\3\2\2\2\u1075\u1077\3\2\2\2\u1076\u1074\3\2\2\2\u1077\u1078\7\u0085"+
		"\2\2\u1078\u107a\5\u0174\u00bb\2\u1079\u107b\5\u0172\u00ba\2\u107a\u1079"+
		"\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u0165\3\2\2\2\u107c\u1082\7\66\2\2"+
		"\u107d\u1083\7\u0249\2\2\u107e\u1080\7\3\2\2\u107f\u1081\7\u01cd\2\2\u1080"+
		"\u107f\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u1083\3\2\2\2\u1082\u107d\3\2"+
		"\2\2\u1082\u107e\3\2\2\2\u1083\u1084\3\2\2\2\u1084\u1085\7_\2\2\u1085"+
		"\u1086\7\u01ea\2\2\u1086\u1087\7\u01c4\2\2\u1087\u108c\5\u027c\u013f\2"+
		"\u1088\u1089\7\u0293\2\2\u1089\u108b\5\u027c\u013f\2\u108a\u1088\3\2\2"+
		"\2\u108b\u108e\3\2\2\2\u108c\u108a\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u108f"+
		"\3\2\2\2\u108e\u108c\3\2\2\2\u108f\u1090\7\u0085\2\2\u1090\u1092\5\u0174"+
		"\u00bb\2\u1091\u1093\5\u0172\u00ba\2\u1092\u1091\3\2\2\2\u1092\u1093\3"+
		"\2\2\2\u1093\u0167\3\2\2\2\u1094\u109a\7\66\2\2\u1095\u109b\7\u0119\2"+
		"\2\u1096\u1098\7\3\2\2\u1097\u1099\7\u01cd\2\2\u1098\u1097\3\2\2\2\u1098"+
		"\u1099\3\2\2\2\u1099\u109b\3\2\2\2\u109a\u1095\3\2\2\2\u109a\u1096\3\2"+
		"\2\2\u109b\u109c\3\2\2\2\u109c\u109d\7_\2\2\u109d\u109e\7\u01cf\2\2\u109e"+
		"\u109f\5\u024c\u0127\2\u109f\u10a6\5\u00aaV\2\u10a0\u10a1\7\u0293\2\2"+
		"\u10a1\u10a2\5\u024c\u0127\2\u10a2\u10a3\5\u00aaV\2\u10a3\u10a5\3\2\2"+
		"\2\u10a4\u10a0\3\2\2\2\u10a5\u10a8\3\2\2\2\u10a6\u10a4\3\2\2\2\u10a6\u10a7"+
		"\3\2\2\2\u10a7\u10a9\3\2\2\2\u10a8\u10a6\3\2\2\2\u10a9\u10aa\7\u0085\2"+
		"\2\u10aa\u10ac\5\u0174\u00bb\2\u10ab\u10ad\5\u0172\u00ba\2\u10ac\u10ab"+
		"\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u0169\3\2\2\2\u10ae\u10b4\7\66\2\2"+
		"\u10af\u10b5\7\u0249\2\2\u10b0\u10b2\7\3\2\2\u10b1\u10b3\7\u01cd\2\2\u10b2"+
		"\u10b1\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3\u10b5\3\2\2\2\u10b4\u10af\3\2"+
		"\2\2\u10b4\u10b0\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10b7\7_\2\2\u10b7"+
		"\u10b8\7\u0188\2\2\u10b8\u10bd\5\u0256\u012c\2\u10b9\u10ba\7\u0293\2\2"+
		"\u10ba\u10bc\5\u0256\u012c\2\u10bb\u10b9\3\2\2\2\u10bc\u10bf\3\2\2\2\u10bd"+
		"\u10bb\3\2\2\2\u10bd\u10be\3\2\2\2\u10be\u10c0\3\2\2\2\u10bf\u10bd\3\2"+
		"\2\2\u10c0\u10c1\7\u0085\2\2\u10c1\u10c3\5\u0174\u00bb\2\u10c2\u10c4\5"+
		"\u0172\u00ba\2\u10c3\u10c2\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4\u016b\3\2"+
		"\2\2\u10c5\u10cb\7\66\2\2\u10c6\u10cc\7\u0249\2\2\u10c7\u10c9\7\3\2\2"+
		"\u10c8\u10ca\7\u01cd\2\2\u10c9\u10c8\3\2\2\2\u10c9\u10ca\3\2\2\2\u10ca"+
		"\u10cc\3\2\2\2\u10cb\u10c6\3\2\2\2\u10cb\u10c7\3\2\2\2\u10cc\u10cd\3\2"+
		"\2\2\u10cd\u10ce\7_\2\2\u10ce\u10cf\7\u0168\2\2\u10cf\u10d4\5\u0252\u012a"+
		"\2\u10d0\u10d1\7\u0293\2\2\u10d1\u10d3\5\u0252\u012a\2\u10d2\u10d0\3\2"+
		"\2\2\u10d3\u10d6\3\2\2\2\u10d4\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5"+
		"\u10d7\3\2\2\2\u10d6\u10d4\3\2\2\2\u10d7\u10d8\7\u0085\2\2\u10d8\u10da"+
		"\5\u0174\u00bb\2\u10d9\u10db\5\u0172\u00ba\2\u10da\u10d9\3\2\2\2\u10da"+
		"\u10db\3\2\2\2\u10db\u016d\3\2\2\2\u10dc\u10e3\7\66\2\2\u10dd\u10e4\7"+
		"\32\2\2\u10de\u10e4\7\u022a\2\2\u10df\u10e1\7\3\2\2\u10e0\u10e2\7\u01cd"+
		"\2\2\u10e1\u10e0\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e4\3\2\2\2\u10e3"+
		"\u10dd\3\2\2\2\u10e3\u10de\3\2\2\2\u10e3\u10df\3\2\2\2\u10e4\u10e5\3\2"+
		"\2\2\u10e5\u10e6\7_\2\2\u10e6\u10e7\7\u00e6\2\2\u10e7\u10e8\5\u025c\u012f"+
		"\2\u10e8\u10e9\7\u0085\2\2\u10e9\u10eb\5\u0174\u00bb\2\u10ea\u10ec\5\u0172"+
		"\u00ba\2\u10eb\u10ea\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec\u016f\3\2\2\2\u10ed"+
		"\u10ee\7\66\2\2\u10ee\u10ef\7\u00ae\2\2\u10ef\u10f0\5\u02a2\u0152\2\u10f0"+
		"\u10f1\7\u0085\2\2\u10f1\u10f2\5\u0174\u00bb\2\u10f2\u0171\3\2\2\2\u10f3"+
		"\u10f4\7\u0096\2\2\u10f4\u10f5\7\66\2\2\u10f5\u10f6\7\u01a5\2\2\u10f6"+
		"\u0173\3\2\2\2\u10f7\u10fc\5\u0176\u00bc\2\u10f8\u10f9\7\u0293\2\2\u10f9"+
		"\u10fb\5\u0176\u00bc\2\u10fa\u10f8\3\2\2\2\u10fb\u10fe\3\2\2\2\u10fc\u10fa"+
		"\3\2\2\2\u10fc\u10fd\3\2\2\2\u10fd\u0175\3\2\2\2\u10fe\u10fc\3\2\2\2\u10ff"+
		"\u1102\5\u029e\u0150\2\u1100\u1102\7\u0260\2\2\u1101\u10ff\3\2\2\2\u1101"+
		"\u1100\3\2\2\2\u1102\u0177\3\2\2\2\u1103\u1104\7\66\2\2\u1104\u1105\7"+
		"\u00ae\2\2\u1105\u1106\5\u02a6\u0154\2\u1106\u1107\7\u0085\2\2\u1107\u1108"+
		"\5\u0174\u00bb\2\u1108\u0179\3\2\2\2\u1109\u110b\7\u0158\2\2\u110a\u110c"+
		"\5\u023a\u011e\2\u110b\u110a\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u110d\3"+
		"\2\2\2\u110d\u110e\7D\2\2\u110e\u1110\5\u0240\u0121\2\u110f\u1111\5\u00c0"+
		"a\2\u1110\u110f\3\2\2\2\u1110\u1111\3\2\2\2\u1111\u111a\3\2\2\2\u1112"+
		"\u1113\7&\2\2\u1113\u111b\7\u024f\2\2\u1114\u1115\7\u024f\2\2\u1115\u1116"+
		"\7\u0298\2\2\u1116\u1117\5\u0214\u010b\2\u1117\u1118\7\u0299\2\2\u1118"+
		"\u111b\3\2\2\2\u1119\u111b\5\u01a8\u00d5\2\u111a\u1112\3\2\2\2\u111a\u1114"+
		"\3\2\2\2\u111a\u1119\3\2\2\2\u111b\u017b\3\2\2\2\u111c\u111e\7\u017f\2"+
		"\2\u111d\u111f\5\u023a\u011e\2\u111e\u111d\3\2\2\2\u111e\u111f\3\2\2\2"+
		"\u111f\u1120\3\2\2\2\u1120\u1121\7D\2\2\u1121\u1123\5\u0240\u0121\2\u1122"+
		"\u1124\5\u0230\u0119\2\u1123\u1122\3\2\2\2\u1123\u1124\3\2\2\2\u1124\u1125"+
		"\3\2\2\2\u1125\u1128\7\u008e\2\2\u1126\u1129\5\u0240\u0121\2\u1127\u1129"+
		"\5\u01a8\u00d5\2\u1128\u1126\3\2\2\2\u1128\u1127\3\2\2\2\u1129\u112b\3"+
		"\2\2\2\u112a\u112c\5\u0230\u0119\2\u112b\u112a\3\2\2\2\u112b\u112c\3\2"+
		"\2\2\u112c\u112d\3\2\2\2\u112d\u112f\5\u0220\u0111\2\u112e\u1130\5\u017e"+
		"\u00c0\2\u112f\u112e\3\2\2\2\u1130\u1131\3\2\2\2\u1131\u112f\3\2\2\2\u1131"+
		"\u1132\3\2\2\2\u1132\u017d\3\2\2\2\u1133\u1134\7\u0093\2\2\u1134\u1135"+
		"\7\u0173\2\2\u1135\u1136\7{\2\2\u1136\u1139\7\u0248\2\2\u1137\u1138\7"+
		"\4\2\2\u1138\u113a\5\u0208\u0105\2\u1139\u1137\3\2\2\2\u1139\u113a\3\2"+
		"\2\2\u113a\u113b\3\2\2\2\u113b\u113c\7{\2\2\u113c\u113d\7\u0248\2\2\u113d"+
		"\u113e\7\u020a\2\2\u113e\u113f\5\u0290\u0149\2\u113f\u1140\7\u02a3\2\2"+
		"\u1140\u1141\5\u02b0\u0159\2\u1141\u1148\3\2\2\2\u1142\u1143\5\u0290\u0149"+
		"\2\u1143\u1144\7\u02a3\2\2\u1144\u1145\5\u02b0\u0159\2\u1145\u1147\3\2"+
		"\2\2\u1146\u1142\3\2\2\2\u1147\u114a\3\2\2\2\u1148\u1146\3\2\2\2\u1148"+
		"\u1149\3\2\2\2\u1149\u114c\3\2\2\2\u114a\u1148\3\2\2\2\u114b\u114d\5\u01f6"+
		"\u00fc\2\u114c\u114b\3\2\2\2\u114c\u114d\3\2\2\2\u114d\u115e\3\2\2\2\u114e"+
		"\u114f\7\u0093\2\2\u114f\u1150\7W\2\2\u1150\u1153\7\u0173\2\2\u1151\u1152"+
		"\7\4\2\2\u1152\u1154\5\u0208\u0105\2\u1153\u1151\3\2\2\2\u1153\u1154\3"+
		"\2\2\2\u1154\u1155\3\2\2\2\u1155\u1156\7{\2\2\u1156\u1157\7\u0158\2\2"+
		"\u1157\u1158\5\u00c0a\2\u1158\u1159\7\u024f\2\2\u1159\u115a\7\u0298\2"+
		"\2\u115a\u115b\5\u0236\u011c\2\u115b\u115c\7\u0299\2\2\u115c\u115e\3\2"+
		"\2\2\u115d\u1133\3\2\2\2\u115d\u114e\3\2\2\2\u115e\u017f\3\2\2\2\u115f"+
		"\u1160\7\u01d0\2\2\u1160\u1161\5\4\3\2\u1161\u0181\3\2\2\2\u1162\u1164"+
		"\7\u01e3\2\2\u1163\u1165\7\u01fc\2\2\u1164\u1163\3\2\2\2\u1164\u1165\3"+
		"\2\2\2\u1165\u1166\3\2\2\2\u1166\u1167\5\u02ae\u0158\2\u1167\u0183\3\2"+
		"\2\2\u1168\u1176\5\u019e\u00d0\2\u1169\u1176\5\u019c\u00cf\2\u116a\u1176"+
		"\5\u019a\u00ce\2\u116b\u1176\5\u0198\u00cd\2\u116c\u1176\5\u0196\u00cc"+
		"\2\u116d\u1176\5\u0194\u00cb\2\u116e\u1176\5\u0192\u00ca\2\u116f\u1176"+
		"\5\u0190\u00c9\2\u1170\u1176\5\u018e\u00c8\2\u1171\u1176\5\u018c\u00c7"+
		"\2\u1172\u1176\5\u018a\u00c6\2\u1173\u1176\5\u0188\u00c5\2\u1174\u1176"+
		"\5\u0186\u00c4\2\u1175\u1168\3\2\2\2\u1175\u1169\3\2\2\2\u1175\u116a\3"+
		"\2\2\2\u1175\u116b\3\2\2\2\u1175\u116c\3\2\2\2\u1175\u116d\3\2\2\2\u1175";
	private static final String _serializedATNSegment2 =
		"\u116e\3\2\2\2\u1175\u116f\3\2\2\2\u1175\u1170\3\2\2\2\u1175\u1171\3\2"+
		"\2\2\u1175\u1172\3\2\2\2\u1175\u1173\3\2\2\2\u1175\u1174\3\2\2\2\u1176"+
		"\u0185\3\2\2\2\u1177\u117b\7\u01f0\2\2\u1178\u1179\7\66\2\2\u1179\u117a"+
		"\7\u01a5\2\2\u117a\u117c\7\62\2\2\u117b\u1178\3\2\2\2\u117b\u117c\3\2"+
		"\2\2\u117c\u1182\3\2\2\2\u117d\u1183\7q\2\2\u117e\u1180\7\3\2\2\u117f"+
		"\u1181\7\u01cd\2\2\u1180\u117f\3\2\2\2\u1180\u1181\3\2\2\2\u1181\u1183"+
		"\3\2\2\2\u1182\u117d\3\2\2\2\u1182\u117e\3\2\2\2\u1183\u1184\3\2\2\2\u1184"+
		"\u1185\7_\2\2\u1185\u118a\5\u0240\u0121\2\u1186\u1187\7\u0293\2\2\u1187"+
		"\u1189\5\u0240\u0121\2\u1188\u1186\3\2\2\2\u1189\u118c\3\2\2\2\u118a\u1188"+
		"\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118d\3\2\2\2\u118c\u118a\3\2\2\2\u118d"+
		"\u118e\7\64\2\2\u118e\u1190\5\u0174\u00bb\2\u118f\u1191\7\u00c3\2\2\u1190"+
		"\u118f\3\2\2\2\u1190\u1191\3\2\2\2\u1191\u0187\3\2\2\2\u1192\u1196\7\u01f0"+
		"\2\2\u1193\u1194\7\66\2\2\u1194\u1195\7\u01a5\2\2\u1195\u1197\7\62\2\2"+
		"\u1196\u1193\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u119d\3\2\2\2\u1198\u119e"+
		"\7\u0119\2\2\u1199\u119b\7\3\2\2\u119a\u119c\7\u01cd\2\2\u119b\u119a\3"+
		"\2\2\2\u119b\u119c\3\2\2\2\u119c\u119e\3\2\2\2\u119d\u1198\3\2\2\2\u119d"+
		"\u1199\3\2\2\2\u119e\u11c3\3\2\2\2\u119f\u11aa\7_\2\2\u11a0\u11ab\7\u012f"+
		"\2\2\u11a1\u11a2\7\u00a3\2\2\u11a2\u11ab\7\u012f\2\2\u11a3\u11a4\7\u00a7"+
		"\2\2\u11a4\u11ab\7\u012f\2\2\u11a5\u11a6\7\u0236\2\2\u11a6\u11ab\7\u012f"+
		"\2\2\u11a7\u11ab\7\u0125\2\2\u11a8\u11ab\7\u01ad\2\2\u11a9\u11ab\7\u0215"+
		"\2\2\u11aa\u11a0\3\2\2\2\u11aa\u11a1\3\2\2\2\u11aa\u11a3\3\2\2\2\u11aa"+
		"\u11a5\3\2\2\2\u11aa\u11a7\3\2\2\2\u11aa\u11a8\3\2\2\2\u11aa\u11a9\3\2"+
		"\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11ad\5\u0250\u0129\2\u11ad\u11b4\5\u00aa"+
		"V\2\u11ae\u11af\7\u0293\2\2\u11af\u11b0\5\u0250\u0129\2\u11b0\u11b1\5"+
		"\u00aaV\2\u11b1\u11b3\3\2\2\2\u11b2\u11ae\3\2\2\2\u11b3\u11b6\3\2\2\2"+
		"\u11b4\u11b2\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11c4\3\2\2\2\u11b6\u11b4"+
		"\3\2\2\2\u11b7\u11b8\7\3\2\2\u11b8\u11b9\7\u0130\2\2\u11b9\u11ba\7;\2"+
		"\2\u11ba\u11bb\7p\2\2\u11bb\u11c0\5\u025a\u012e\2\u11bc\u11bd\7\u0293"+
		"\2\2\u11bd\u11bf\5\u025a\u012e\2\u11be\u11bc\3\2\2\2\u11bf\u11c2\3\2\2"+
		"\2\u11c0\u11be\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c4\3\2\2\2\u11c2\u11c0"+
		"\3\2\2\2\u11c3\u119f\3\2\2\2\u11c3\u11b7\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5"+
		"\u11c6\7\64\2\2\u11c6\u11c8\5\u0174\u00bb\2\u11c7\u11c9\7\u00c3\2\2\u11c8"+
		"\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u0189\3\2\2\2\u11ca\u11ce\7\u01f0"+
		"\2\2\u11cb\u11cc\7\66\2\2\u11cc\u11cd\7\u01a5\2\2\u11cd\u11cf\7\62\2\2"+
		"\u11ce\u11cb\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf\u11dc\3\2\2\2\u11d0\u11d5"+
		"\t\26\2\2\u11d1\u11d2\7\u0293\2\2\u11d2\u11d4\t\26\2\2\u11d3\u11d1\3\2"+
		"\2\2\u11d4\u11d7\3\2\2\2\u11d5\u11d3\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6"+
		"\u11dd\3\2\2\2\u11d7\u11d5\3\2\2\2\u11d8\u11da\7\3\2\2\u11d9\u11db\7\u01cd"+
		"\2\2\u11da\u11d9\3\2\2\2\u11da\u11db\3\2\2\2\u11db\u11dd\3\2\2\2\u11dc"+
		"\u11d0\3\2\2\2\u11dc\u11d8\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11f6\7_"+
		"\2\2\u11df\u11e1\7y\2\2\u11e0\u11df\3\2\2\2\u11e0\u11e1\3\2\2\2\u11e1"+
		"\u11e2\3\2\2\2\u11e2\u11e7\5\u0240\u0121\2\u11e3\u11e4\7\u0293\2\2\u11e4"+
		"\u11e6\5\u0240\u0121\2\u11e5\u11e3\3\2\2\2\u11e6\u11e9\3\2\2\2\u11e7\u11e5"+
		"\3\2\2\2\u11e7\u11e8\3\2\2\2\u11e8\u11f7\3\2\2\2\u11e9\u11e7\3\2\2\2\u11ea"+
		"\u11eb\7\3\2\2\u11eb\u11ec\7\u0227\2\2\u11ec\u11ed\7;\2\2\u11ed\u11ee"+
		"\7p\2\2\u11ee\u11f3\5\u025a\u012e\2\u11ef\u11f0\7\u0293\2\2\u11f0\u11f2"+
		"\5\u025a\u012e\2\u11f1\u11ef\3\2\2\2\u11f2\u11f5\3\2\2\2\u11f3\u11f1\3"+
		"\2\2\2\u11f3\u11f4\3\2\2\2\u11f4\u11f7\3\2\2\2\u11f5\u11f3\3\2\2\2\u11f6"+
		"\u11e0\3\2\2\2\u11f6\u11ea\3\2\2\2\u11f7\u11f8\3\2\2\2\u11f8\u11f9\7\64"+
		"\2\2\u11f9\u11fb\5\u0174\u00bb\2\u11fa\u11fc\7\u00c3\2\2\u11fb\u11fa\3"+
		"\2\2\2\u11fb\u11fc\3\2\2\2\u11fc\u018b\3\2\2\2\u11fd\u1201\7\u01f0\2\2"+
		"\u11fe\u11ff\7\66\2\2\u11ff\u1200\7\u01a5\2\2\u1200\u1202\7\62\2\2\u1201"+
		"\u11fe\3\2\2\2\u1201\u1202\3\2\2\2\u1202\u120f\3\2\2\2\u1203\u1208\t\24"+
		"\2\2\u1204\u1205\7\u0293\2\2\u1205\u1207\t\24\2\2\u1206\u1204\3\2\2\2"+
		"\u1207\u120a\3\2\2\2\u1208\u1206\3\2\2\2\u1208\u1209\3\2\2\2\u1209\u1210"+
		"\3\2\2\2\u120a\u1208\3\2\2\2\u120b\u120d\7\3\2\2\u120c\u120e\7\u01cd\2"+
		"\2\u120d\u120c\3\2\2\2\u120d\u120e\3\2\2\2\u120e\u1210\3\2\2\2\u120f\u1203"+
		"\3\2\2\2\u120f\u120b\3\2\2\2\u1210\u1211\3\2\2\2\u1211\u1212\7_\2\2\u1212"+
		"\u1213\7\u016c\2\2\u1213\u1214\5f\64\2\u1214\u1215\7\64\2\2\u1215\u1217"+
		"\5\u0174\u00bb\2\u1216\u1218\7\u00c3\2\2\u1217\u1216\3\2\2\2\u1217\u1218"+
		"\3\2\2\2\u1218\u018d\3\2\2\2\u1219\u121d\7\u01f0\2\2\u121a\u121b\7\66"+
		"\2\2\u121b\u121c\7\u01a5\2\2\u121c\u121e\7\62\2\2\u121d\u121a\3\2\2\2"+
		"\u121d\u121e\3\2\2\2\u121e\u1224\3\2\2\2\u121f\u1225\7q\2\2\u1220\u1222"+
		"\7\3\2\2\u1221\u1223\7\u01cd\2\2\u1222\u1221\3\2\2\2\u1222\u1223\3\2\2"+
		"\2\u1223\u1225\3\2\2\2\u1224\u121f\3\2\2\2\u1224\u1220\3\2\2\2\u1225\u1226"+
		"\3\2\2\2\u1226\u123c\7_\2\2\u1227\u1228\7\u0206\2\2\u1228\u122d\5\u0254"+
		"\u012b\2\u1229\u122a\7\u0293\2\2\u122a\u122c\5\u0254\u012b\2\u122b\u1229"+
		"\3\2\2\2\u122c\u122f\3\2\2\2\u122d\u122b\3\2\2\2\u122d\u122e\3\2\2\2\u122e"+
		"\u123d\3\2\2\2\u122f\u122d\3\2\2\2\u1230\u1231\7\3\2\2\u1231\u1232\7\u0207"+
		"\2\2\u1232\u1233\7;\2\2\u1233\u1234\7p\2\2\u1234\u1239\5\u025a\u012e\2"+
		"\u1235\u1236\7\u0293\2\2\u1236\u1238\5\u025a\u012e\2\u1237\u1235\3\2\2"+
		"\2\u1238\u123b\3\2\2\2\u1239\u1237\3\2\2\2\u1239\u123a\3\2\2\2\u123a\u123d"+
		"\3\2\2\2\u123b\u1239\3\2\2\2\u123c\u1227\3\2\2\2\u123c\u1230\3\2\2\2\u123d"+
		"\u123e\3\2\2\2\u123e\u123f\7\64\2\2\u123f\u1241\5\u0174\u00bb\2\u1240"+
		"\u1242\7\u00c3\2\2\u1241\u1240\3\2\2\2\u1241\u1242\3\2\2\2\u1242\u018f"+
		"\3\2\2\2\u1243\u1247\7\u01f0\2\2\u1244\u1245\7\66\2\2\u1245\u1246\7\u01a5"+
		"\2\2\u1246\u1248\7\62\2\2\u1247\u1244\3\2\2\2\u1247\u1248\3\2\2\2\u1248"+
		"\u1255\3\2\2\2\u1249\u124e\5\u0162\u00b2\2\u124a\u124b\7\u0293\2\2\u124b"+
		"\u124d\5\u0162\u00b2\2\u124c\u124a\3\2\2\2\u124d\u1250\3\2\2\2\u124e\u124c"+
		"\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1256\3\2\2\2\u1250\u124e\3\2\2\2\u1251"+
		"\u1253\7\3\2\2\u1252\u1254\7\u01cd\2\2\u1253\u1252\3\2\2\2\u1253\u1254"+
		"\3\2\2\2\u1254\u1256\3\2\2\2\u1255\u1249\3\2\2\2\u1255\u1251\3\2\2\2\u1256"+
		"\u1257\3\2\2\2\u1257\u1258\7_\2\2\u1258\u1259\7p\2\2\u1259\u125e\5\u025a"+
		"\u012e\2\u125a\u125b\7\u0293\2\2\u125b\u125d\5\u025a\u012e\2\u125c\u125a"+
		"\3\2\2\2\u125d\u1260\3\2\2\2\u125e\u125c\3\2\2\2\u125e\u125f\3\2\2\2\u125f"+
		"\u1261\3\2\2\2\u1260\u125e\3\2\2\2\u1261\u1262\7\64\2\2\u1262\u1264\5"+
		"\u0174\u00bb\2\u1263\u1265\7\u00c3\2\2\u1264\u1263\3\2\2\2\u1264\u1265"+
		"\3\2\2\2\u1265\u0191\3\2\2\2\u1266\u126a\7\u01f0\2\2\u1267\u1268\7\u00a1"+
		"\2\2\u1268\u1269\7\u01a5\2\2\u1269\u126b\7\62\2\2\u126a\u1267\3\2\2\2"+
		"\u126a\u126b\3\2\2\2\u126b\u126c\3\2\2\2\u126c\u1271\5\u0278\u013d\2\u126d"+
		"\u126e\7\u0293\2\2\u126e\u1270\5\u0278\u013d\2\u126f\u126d\3\2\2\2\u1270"+
		"\u1273\3\2\2\2\u1271\u126f\3\2\2\2\u1271\u1272\3\2\2\2\u1272\u1274\3\2"+
		"\2\2\u1273\u1271\3\2\2\2\u1274\u1275\7\64\2\2\u1275\u1277\5\u0174\u00bb"+
		"\2\u1276\u1278\7\u00c3\2\2\u1277\u1276\3\2\2\2\u1277\u1278\3\2\2\2\u1278"+
		"\u0193\3\2\2\2\u1279\u127d\7\u01f0\2\2\u127a\u127b\7\66\2\2\u127b\u127c"+
		"\7\u01a5\2\2\u127c\u127e\7\62\2\2\u127d\u127a\3\2\2\2\u127d\u127e\3\2"+
		"\2\2\u127e\u1284\3\2\2\2\u127f\u1285\7\u0249\2\2\u1280\u1282\7\3\2\2\u1281"+
		"\u1283\7\u01cd\2\2\u1282\u1281\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u1285"+
		"\3\2\2\2\u1284\u127f\3\2\2\2\u1284\u1280\3\2\2\2\u1285\u1286\3\2\2\2\u1286"+
		"\u1287\7_\2\2\u1287\u1288\7\u01ea\2\2\u1288\u1289\7\u01c4\2\2\u1289\u128e"+
		"\5\u027c\u013f\2\u128a\u128b\7\u0293\2\2\u128b\u128d\5\u027c\u013f\2\u128c"+
		"\u128a\3\2\2\2\u128d\u1290\3\2\2\2\u128e\u128c\3\2\2\2\u128e\u128f\3\2"+
		"\2\2\u128f\u1291\3\2\2\2\u1290\u128e\3\2\2\2\u1291\u1292\7\64\2\2\u1292"+
		"\u1294\5\u0174\u00bb\2\u1293\u1295\7\u00c3\2\2\u1294\u1293\3\2\2\2\u1294"+
		"\u1295\3\2\2\2\u1295\u0195\3\2\2\2\u1296\u129a\7\u01f0\2\2\u1297\u1298"+
		"\7\66\2\2\u1298\u1299\7\u01a5\2\2\u1299\u129b\7\62\2\2\u129a\u1297\3\2"+
		"\2\2\u129a\u129b\3\2\2\2\u129b\u12a1\3\2\2\2\u129c\u12a2\7\u0119\2\2\u129d"+
		"\u129f\7\3\2\2\u129e\u12a0\7\u01cd\2\2\u129f\u129e\3\2\2\2\u129f\u12a0"+
		"\3\2\2\2\u12a0\u12a2\3\2\2\2\u12a1\u129c\3\2\2\2\u12a1\u129d\3\2\2\2\u12a2"+
		"\u12a3\3\2\2\2\u12a3\u12a4\7_\2\2\u12a4\u12a5\7\u01cf\2\2\u12a5\u12a6"+
		"\5\u024c\u0127\2\u12a6\u12ad\5\u00aaV\2\u12a7\u12a8\7\u0293\2\2\u12a8"+
		"\u12a9\5\u024c\u0127\2\u12a9\u12aa\5\u00aaV\2\u12aa\u12ac\3\2\2\2\u12ab"+
		"\u12a7\3\2\2\2\u12ac\u12af\3\2\2\2\u12ad\u12ab\3\2\2\2\u12ad\u12ae\3\2"+
		"\2\2\u12ae\u12b0\3\2\2\2\u12af\u12ad\3\2\2\2\u12b0\u12b1\7\64\2\2\u12b1"+
		"\u12b3\5\u0174\u00bb\2\u12b2\u12b4\7\u00c3\2\2\u12b3\u12b2\3\2\2\2\u12b3"+
		"\u12b4\3\2\2\2\u12b4\u0197\3\2\2\2\u12b5\u12b9\7\u01f0\2\2\u12b6\u12b7"+
		"\7\66\2\2\u12b7\u12b8\7\u01a5\2\2\u12b8\u12ba\7\62\2\2\u12b9\u12b6\3\2"+
		"\2\2\u12b9\u12ba\3\2\2\2\u12ba\u12c0\3\2\2\2\u12bb\u12c1\7\u0249\2\2\u12bc"+
		"\u12be\7\3\2\2\u12bd\u12bf\7\u01cd\2\2\u12be\u12bd\3\2\2\2\u12be\u12bf"+
		"\3\2\2\2\u12bf\u12c1\3\2\2\2\u12c0\u12bb\3\2\2\2\u12c0\u12bc\3\2\2\2\u12c1"+
		"\u12c2\3\2\2\2\u12c2\u12c3\7_\2\2\u12c3\u12c4\7\u0188\2\2\u12c4\u12c9"+
		"\5\u0256\u012c\2\u12c5\u12c6\7\u0293\2\2\u12c6\u12c8\5\u0256\u012c\2\u12c7"+
		"\u12c5\3\2\2\2\u12c8\u12cb\3\2\2\2\u12c9\u12c7\3\2\2\2\u12c9\u12ca\3\2"+
		"\2\2\u12ca\u12cc\3\2\2\2\u12cb\u12c9\3\2\2\2\u12cc\u12cd\7\64\2\2\u12cd"+
		"\u12cf\5\u0174\u00bb\2\u12ce\u12d0\7\u00c3\2\2\u12cf\u12ce\3\2\2\2\u12cf"+
		"\u12d0\3\2\2\2\u12d0\u0199\3\2\2\2\u12d1\u12d5\7\u01f0\2\2\u12d2\u12d3"+
		"\7\66\2\2\u12d3\u12d4\7\u01a5\2\2\u12d4\u12d6\7\62\2\2\u12d5\u12d2\3\2"+
		"\2\2\u12d5\u12d6\3\2\2\2\u12d6\u12dc\3\2\2\2\u12d7\u12dd\7\u0249\2\2\u12d8"+
		"\u12da\7\3\2\2\u12d9\u12db\7\u01cd\2\2\u12da\u12d9\3\2\2\2\u12da\u12db"+
		"\3\2\2\2\u12db\u12dd\3\2\2\2\u12dc\u12d7\3\2\2\2\u12dc\u12d8\3\2\2\2\u12dd"+
		"\u12de\3\2\2\2\u12de\u12df\7_\2\2\u12df\u12e0\7\u0168\2\2\u12e0\u12e5"+
		"\5\u0252\u012a\2\u12e1\u12e2\7\u0293\2\2\u12e2\u12e4\5\u0252\u012a\2\u12e3"+
		"\u12e1\3\2\2\2\u12e4\u12e7\3\2\2\2\u12e5\u12e3\3\2\2\2\u12e5\u12e6\3\2"+
		"\2\2\u12e6\u12e8\3\2\2\2\u12e7\u12e5\3\2\2\2\u12e8\u12e9\7\64\2\2\u12e9"+
		"\u12eb\5\u0174\u00bb\2\u12ea\u12ec\7\u00c3\2\2\u12eb\u12ea\3\2\2\2\u12eb"+
		"\u12ec\3\2\2\2\u12ec\u019b\3\2\2\2\u12ed\u12f1\7\u01f0\2\2\u12ee\u12ef"+
		"\7\66\2\2\u12ef\u12f0\7\u01a5\2\2\u12f0\u12f2\7\62\2\2\u12f1\u12ee\3\2"+
		"\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12ff\3\2\2\2\u12f3\u12f8\t\27\2\2\u12f4"+
		"\u12f5\7\u0293\2\2\u12f5\u12f7\t\27\2\2\u12f6\u12f4\3\2\2\2\u12f7\u12fa"+
		"\3\2\2\2\u12f8\u12f6\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u1300\3\2\2\2\u12fa"+
		"\u12f8\3\2\2\2\u12fb\u12fd\7\3\2\2\u12fc\u12fe\7\u01cd\2\2\u12fd\u12fc"+
		"\3\2\2\2\u12fd\u12fe\3\2\2\2\u12fe\u1300\3\2\2\2\u12ff\u12f3\3\2\2\2\u12ff"+
		"\u12fb\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302\7_\2\2\u1302\u1303\7\u00e6"+
		"\2\2\u1303\u1304\5\u025c\u012f\2\u1304\u1305\7\64\2\2\u1305\u1307\5\u0174"+
		"\u00bb\2\u1306\u1308\7\u00c3\2\2\u1307\u1306\3\2\2\2\u1307\u1308\3\2\2"+
		"\2\u1308\u019d\3\2\2\2\u1309\u130a\7\u01f0\2\2\u130a\u130b\7\u00ae\2\2"+
		"\u130b\u130c\5\u02a6\u0154\2\u130c\u130d\7\64\2\2\u130d\u130e\5\u0174"+
		"\u00bb\2\u130e\u019f\3\2\2\2\u130f\u1311\7\u01f4\2\2\u1310\u1312\t\7\2"+
		"\2\u1311\u1310\3\2\2\2\u1311\u1312\3\2\2\2\u1312\u01a1\3\2\2\2\u1313\u1314"+
		"\7\u01f4\2\2\u1314\u1316\7\u0085\2\2\u1315\u1317\7\u01fc\2\2\u1316\u1315"+
		"\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u1319\5\u02ae\u0158"+
		"\2\u1319\u01a3\3\2\2\2\u131a\u131b\7\u01fc\2\2\u131b\u131c\5\u02ae\u0158"+
		"\2\u131c\u01a5\3\2\2\2\u131d\u131e\7\u00ad\2\2\u131e\u131f\7\u010f\2\2"+
		"\u131f\u1324\t\30\2\2\u1320\u1321\7\u00ad\2\2\u1321\u1322\7|\2\2\u1322"+
		"\u1324\5\u0292\u014a\2\u1323\u131d\3\2\2\2\u1323\u1320\3\2\2\2\u1324\u01a7"+
		"\3\2\2\2\u1325\u1327\5\u01a6\u00d4\2\u1326\u1325\3\2\2\2\u1326\u1327\3"+
		"\2\2\2\u1327\u1328\3\2\2\2\u1328\u1330\5\u01de\u00f0\2\u1329\u132b\7\u008b"+
		"\2\2\u132a\u132c\t\31\2\2\u132b\u132a\3\2\2\2\u132b\u132c\3\2\2\2\u132c"+
		"\u132d\3\2\2\2\u132d\u132f\5\u01de\u00f0\2\u132e\u1329\3\2\2\2\u132f\u1332"+
		"\3\2\2\2\u1330\u132e\3\2\2\2\u1330\u1331\3\2\2\2\u1331\u01a9\3\2\2\2\u1332"+
		"\u1330\3\2\2\2\u1333\u1334\7\u020a\2\2\u1334\u1335\7\u0273\2\2\u1335\u1342"+
		"\7\u0085\2\2\u1336\u1343\7\u0274\2\2\u1337\u1343\7\u0278\2\2\u1338\u133b"+
		"\7\u0277\2\2\u1339\u133a\7\u0293\2\2\u133a\u133c\t\32\2\2\u133b\u1339"+
		"\3\2\2\2\u133b\u133c\3\2\2\2\u133c\u1343\3\2\2\2\u133d\u1340\7\u0276\2"+
		"\2\u133e\u133f\7\u0293\2\2\u133f\u1341\t\32\2\2\u1340\u133e\3\2\2\2\u1340"+
		"\u1341\3\2\2\2\u1341\u1343\3\2\2\2\u1342\u1336\3\2\2\2\u1342\u1337\3\2"+
		"\2\2\u1342\u1338\3\2\2\2\u1342\u133d\3\2\2\2\u1343\u01ab\3\2\2\2\u1344"+
		"\u1345\7\u020a\2\2\u1345\u1346\7\u026a\2\2\u1346\u1347\7\u0085\2\2\u1347"+
		"\u1348\t\33\2\2\u1348\u01ad\3\2\2\2\u1349\u134a\7\u020a\2\2\u134a\u134b"+
		"\7\u0270\2\2\u134b\u134c\7\u0085\2\2\u134c\u134d\t\34\2\2\u134d\u01af"+
		"\3\2\2\2\u134e\u134f\7\u020a\2\2\u134f\u1350\7\u026d\2\2\u1350\u1351\7"+
		"\u0085\2\2\u1351\u1352\5\u02b0\u0159\2\u1352\u01b1\3\2\2\2\u1353\u1354"+
		"\7\u020a\2\2\u1354\u136a\7\u01f2\2\2\u1355\u135a\5\u0278\u013d\2\u1356"+
		"\u1357\7\u0293\2\2\u1357\u1359\5\u0278\u013d\2\u1358\u1356\3\2\2\2\u1359"+
		"\u135c\3\2\2\2\u135a\u1358\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u136b\3\2"+
		"\2\2\u135c\u135a\3\2\2\2\u135d\u136b\7V\2\2\u135e\u136b\7\3\2\2\u135f"+
		"\u1360\7\3\2\2\u1360\u1361\7-\2\2\u1361\u1366\5\u0278\u013d\2\u1362\u1363"+
		"\7\u0293\2\2\u1363\u1365\5\u0278\u013d\2\u1364\u1362\3\2\2\2\u1365\u1368"+
		"\3\2\2\2\u1366\u1364\3\2\2\2\u1366\u1367\3\2\2\2\u1367\u136b\3\2\2\2\u1368"+
		"\u1366\3\2\2\2\u1369\u136b\7&\2\2\u136a\u1355\3\2\2\2\u136a\u135d\3\2"+
		"\2\2\u136a\u135e\3\2\2\2\u136a\u135f\3\2\2\2\u136a\u1369\3\2\2\2\u136b"+
		"\u01b3\3\2\2\2\u136c\u136d\7\u020a\2\2\u136d\u136e\7\u01fe\2\2\u136e\u1378"+
		"\t\35\2\2\u136f\u1374\5\u027e\u0140\2\u1370\u1371\7\u0293\2\2\u1371\u1373"+
		"\5\u027e\u0140\2\u1372\u1370\3\2\2\2\u1373\u1376\3\2\2\2\u1374\u1372\3"+
		"\2\2\2\u1374\u1375\3\2\2\2\u1375\u1379\3\2\2\2\u1376\u1374\3\2\2\2\u1377"+
		"\u1379\7&\2\2\u1378\u136f\3\2\2\2\u1378\u1377\3\2\2\2\u1379\u01b5\3\2"+
		"\2\2\u137a\u137b\7\u020a\2\2\u137b\u137c\7\u0209\2\2\u137c\u137d\7\u026c"+
		"\2\2\u137d\u137e\7\u0085\2\2\u137e\u137f\t\33\2\2\u137f\u01b7\3\2\2\2"+
		"\u1380\u1381\7\u020a\2\2\u1381\u1382\7\u0209\2\2\u1382\u1383\7\u00c7\2"+
		"\2\u1383\u1384\7\7\2\2\u1384\u138d\7\u0235\2\2\u1385\u1387\7\u0293\2\2"+
		"\u1386\u1385\3\2\2\2\u1386\u1387\3\2\2\2\u1387\u1388\3\2\2\2\u1388\u138e"+
		"\5\u02c0\u0161\2\u1389\u138b\7\u0293\2\2\u138a\u1389\3\2\2\2\u138a\u138b"+
		"\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138e\5\u02c2\u0162\2\u138d\u1386\3"+
		"\2\2\2\u138d\u138a\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u138d\3\2\2\2\u138f"+
		"\u1390\3\2\2\2\u1390\u01b9\3\2\2\2\u1391\u1392\7\u020a\2\2\u1392\u1393"+
		"\7\u0209\2\2\u1393\u1398\7\u0134\2\2\u1394\u1399\5\u02b0\u0159\2\u1395"+
		"\u1399\7V\2\2\u1396\u1397\7\u02a3\2\2\u1397\u1399\7&\2\2\u1398\u1394\3"+
		"\2\2\2\u1398\u1395\3\2\2\2\u1398\u1396\3\2\2\2\u1399\u01bb\3\2\2\2\u139a"+
		"\u139b\7\u020a\2\2\u139b\u139c\7\u0209\2\2\u139c\u13a1\7\u014b\2\2\u139d"+
		"\u13a2\5\u02b0\u0159\2\u139e\u13a2\7V\2\2\u139f\u13a0\7\u02a3\2\2\u13a0"+
		"\u13a2\7&\2\2\u13a1\u139d\3\2\2\2\u13a1\u139e\3\2\2\2\u13a1\u139f\3\2"+
		"\2\2\u13a2\u01bd\3\2\2\2\u13a3\u13a4\7\u020a\2\2\u13a4\u13a5\7\u0209\2"+
		"\2\u13a5\u13aa\7\u017d\2\2\u13a6\u13ab\5\u02b0\u0159\2\u13a7\u13ab\7V"+
		"\2\2\u13a8\u13a9\7\u02a3\2\2\u13a9\u13ab\7&\2\2\u13aa\u13a6\3\2\2\2\u13aa"+
		"\u13a7\3\2\2\2\u13aa\u13a8\3\2\2\2\u13ab\u01bf\3\2\2\2\u13ac\u13ad\7\u020a"+
		"\2\2\u13ad\u13ae\7\u0209\2\2\u13ae\u13af\7\u026e\2\2\u13af\u13b0\7\u0085"+
		"\2\2\u13b0\u13b1\t\33\2\2\u13b1\u01c1\3\2\2\2\u13b2\u13b3\7\u020a\2\2"+
		"\u13b3\u13b4\7\u0209\2\2\u13b4\u13b5\7\u026f\2\2\u13b5\u13b8\7\u02a3\2"+
		"\2\u13b6\u13b9\5\u02b0\u0159\2\u13b7\u13b9\7&\2\2\u13b8\u13b6\3\2\2\2"+
		"\u13b8\u13b7\3\2\2\2\u13b9\u01c3\3\2\2\2\u13ba\u13bb\7\u020a\2\2\u13bb"+
		"\u13bc\7\u0209\2\2\u13bc\u13c1\7\u01f8\2\2\u13bd\u13c2\5\u02b0\u0159\2"+
		"\u13be\u13c2\7V\2\2\u13bf\u13c0\7\u02a3\2\2\u13c0\u13c2\7&\2\2\u13c1\u13bd"+
		"\3\2\2\2\u13c1\u13be\3\2\2\2\u13c1\u13bf\3\2\2\2\u13c2\u01c5\3\2\2\2\u13c3"+
		"\u13c4\7\u020a\2\2\u13c4\u13c5\7\u0209\2\2\u13c5\u13c8\7\u022d\2\2\u13c6"+
		"\u13c9\5\u02b0\u0159\2\u13c7\u13c9\7V\2\2\u13c8\u13c6\3\2\2\2\u13c8\u13c7"+
		"\3\2\2\2\u13c9\u01c7\3\2\2\2\u13ca\u13cb\7\u020a\2\2\u13cb\u13cc\7\u026b"+
		"\2\2\u13cc\u13cd\7\u0085\2\2\u13cd\u13ce\t\33\2\2\u13ce\u01c9\3\2\2\2"+
		"\u13cf\u13d3\7\u020a\2\2\u13d0\u13d1\7|\2\2\u13d1\u13d4\7\u025d\2\2\u13d2"+
		"\u13d4\7\u0083\2\2\u13d3\u13d0\3\2\2\2\u13d3\u13d2\3\2\2\2\u13d4\u13d5"+
		"\3\2\2\2\u13d5\u13d7\7\u0085\2\2\u13d6\u13d8\7B\2\2\u13d7\u13d6\3\2\2"+
		"\2\u13d7\u13d8\3\2\2\2\u13d8\u13d9\3\2\2\2\u13d9\u13da\5\u02b0\u0159\2"+
		"\u13da\u01cb\3\2\2\2\u13db\u13de\7\u020f\2\2\u13dc\u13df\7\3\2\2\u13dd"+
		"\u13df\5\u028a\u0146\2\u13de\u13dc\3\2\2\2\u13de\u13dd\3\2\2\2\u13df\u01cd"+
		"\3\2\2\2\u13e0\u13e1\7\u020f\2\2\u13e1\u13e4\7\u00e0\2\2\u13e2\u13e5\7"+
		"\3\2\2\u13e3\u13e5\5\u0282\u0142\2\u13e4\u13e2\3\2\2\2\u13e4\u13e3\3\2"+
		"\2\2\u13e5\u01cf\3\2\2\2\u13e6\u13e7\7\u020f\2\2\u13e7\u13e8\7\u00e6\2"+
		"\2\u13e8\u13eb\5\u025c\u012f\2\u13e9\u13ec\7\3\2\2\u13ea\u13ec\5\u0282"+
		"\u0142\2\u13eb\u13e9\3\2\2\2\u13eb\u13ea\3\2\2\2\u13ec\u01d1\3\2\2\2\u13ed"+
		"\u13ee\7\u020f\2\2\u13ee\u13ef\7\u0194\2\2\u13ef\u13f2\5\u028c\u0147\2"+
		"\u13f0\u13f3\7\3\2\2\u13f1\u13f3\5\u0282\u0142\2\u13f2\u13f0\3\2\2\2\u13f2"+
		"\u13f1\3\2\2\2\u13f3\u01d3\3\2\2\2\u13f4\u13f5\7\u020f\2\2\u13f5\u13fa"+
		"\7\u0209\2\2\u13f6\u13fb\7\3\2\2\u13f7\u13f8\7\u025e\2\2\u13f8\u13fb\7"+
		"\3\2\2\u13f9\u13fb\5\u0282\u0142\2\u13fa\u13f6\3\2\2\2\u13fa\u13f7\3\2"+
		"\2\2\u13fa\u13f9\3\2\2\2\u13fb\u01d5\3\2\2\2\u13fc\u13fd\7\u021a\2\2\u13fd"+
		"\u1403\7\u0235\2\2\u13fe\u13ff\7\u015d\2\2\u13ff\u1400\7\u0167\2\2\u1400"+
		"\u1401\5\u02c0\u0161\2\u1401\u1402\5\u02c2\u0162\2\u1402\u1404\3\2\2\2"+
		"\u1403\u13fe\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u01d7\3\2\2\2\u1405\u1406"+
		"\7\u0239\2\2\u1406\u1407\7y\2\2\u1407\u1408\5\u0240\u0121\2\u1408\u01d9"+
		"\3\2\2\2\u1409\u140b\7\u0248\2\2\u140a\u140c\5\u023a\u011e\2\u140b\u140a"+
		"\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u140d\3\2\2\2\u140d\u140f\5\u0240\u0121"+
		"\2\u140e\u1410\5\u0230\u0119\2\u140f\u140e\3\2\2\2\u140f\u1410\3\2\2\2"+
		"\u1410\u1411\3\2\2\2\u1411\u1412\7\u020a\2\2\u1412\u1414\5\u0214\u010b"+
		"\2\u1413\u1415\5\u01ea\u00f6\2\u1414\u1413\3\2\2\2\u1414\u1415\3\2\2\2"+
		"\u1415\u1417\3\2\2\2\u1416\u1418\5\u01f6\u00fc\2\u1417\u1416\3\2\2\2\u1417"+
		"\u1418\3\2\2\2\u1418\u01db\3\2\2\2\u1419\u141a\5\u01e4\u00f3\2\u141a\u141b"+
		"\5\u01ea\u00f6\2\u141b\u01dd\3\2\2\2\u141c\u141e\5\u01e4\u00f3\2\u141d"+
		"\u141f\5\u01ec\u00f7\2\u141e\u141d\3\2\2\2\u141e\u141f\3\2\2\2\u141f\u1421"+
		"\3\2\2\2\u1420\u1422\5\u01ea\u00f6\2\u1421\u1420\3\2\2\2\u1421\u1422\3"+
		"\2\2\2\u1422\u1424\3\2\2\2\u1423\u1425\5\u01f6\u00fc\2\u1424\u1423\3\2"+
		"\2\2\u1424\u1425\3\2\2\2\u1425\u1427\3\2\2\2\u1426\u1428\5\u01ee\u00f8"+
		"\2\u1427\u1426\3\2\2\2\u1427\u1428\3\2\2\2\u1428\u142a\3\2\2\2\u1429\u142b"+
		"\5\u01f2\u00fa\2\u142a\u1429\3\2\2\2\u142a\u142b\3\2\2\2\u142b\u142d\3"+
		"\2\2\2\u142c\u142e\5\u01f4\u00fb\2\u142d\u142c\3\2\2\2\u142d\u142e\3\2"+
		"\2\2\u142e\u1430\3\2\2\2\u142f\u1431\5\u01fa\u00fe\2\u1430\u142f\3\2\2"+
		"\2\u1430\u1431\3\2\2\2\u1431\u1436\3\2\2\2\u1432\u1434\7\u008b\2\2\u1433"+
		"\u1435\t\31\2\2\u1434\u1433\3\2\2\2\u1434\u1435\3\2\2\2\u1435\u1437\3"+
		"\2\2\2\u1436\u1432\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1439\3\2\2\2\u1438"+
		"\u143a\5\u01e8\u00f5\2\u1439\u1438\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143c"+
		"\3\2\2\2\u143b\u143d\5\u01e6\u00f4\2\u143c\u143b\3\2\2\2\u143c\u143d\3"+
		"\2\2\2\u143d\u143f\3\2\2\2\u143e\u1440\5\u01f8\u00fd\2\u143f\u143e\3\2"+
		"\2\2\u143f\u1440\3\2\2\2\u1440\u1442\3\2\2\2\u1441\u1443\5\u01e2\u00f2"+
		"\2\u1442\u1441\3\2\2\2\u1442\u1443\3\2\2\2\u1443\u1445\3\2\2\2\u1444\u1446"+
		"\5\u01e0\u00f1\2\u1445\u1444\3\2\2\2\u1445\u1446\3\2\2\2\u1446\u1454\3"+
		"\2\2\2\u1447\u1448\7\62\2\2\u1448\u1452\7\u0248\2\2\u1449\u144a\7\u019f"+
		"\2\2\u144a\u144f\5\u0240\u0121\2\u144b\u144c\7\u0293\2\2\u144c\u144e\5"+
		"\u0240\u0121\2\u144d\u144b\3\2\2\2\u144e\u1451\3\2\2\2\u144f\u144d\3\2"+
		"\2\2\u144f\u1450\3\2\2\2\u1450\u1453\3\2\2\2\u1451\u144f\3\2\2\2\u1452"+
		"\u1449\3\2\2\2\u1452\u1453\3\2\2\2\u1453\u1455\3\2\2\2\u1454\u1447\3\2"+
		"\2\2\u1454\u1455\3\2\2\2\u1455\u01df\3\2\2\2\u1456\u1457\7]\2\2\u1457"+
		"\u1458\5\u0298\u014d\2\u1458\u01e1\3\2\2\2\u1459\u145c\7M\2\2\u145a\u145d"+
		"\5\u0298\u014d\2\u145b\u145d\7\3\2\2\u145c\u145a\3\2\2\2\u145c\u145b\3"+
		"\2\2\2\u145d\u01e3\3\2\2\2\u145e\u1460\7q\2\2\u145f\u1461\5\u023a\u011e"+
		"\2\u1460\u145f\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1463\3\2\2\2\u1462\u1464"+
		"\t\31\2\2\u1463\u1462\3\2\2\2\u1463\u1464\3\2\2\2\u1464\u1465\3\2\2\2"+
		"\u1465\u1466\5\u0210\u0109\2\u1466\u01e5\3\2\2\2\u1467\u1468\7A\2\2\u1468"+
		"\u1469\5\u01de\u00f0\2\u1469\u01e7\3\2\2\2\u146a\u146b\7-\2\2\u146b\u146c"+
		"\5\u01de\u00f0\2\u146c\u01e9\3\2\2\2\u146d\u146e\7\64\2\2\u146e\u1475"+
		"\5\u020c\u0107\2\u146f\u1471\7\u0293\2\2\u1470\u146f\3\2\2\2\u1470\u1471"+
		"\3\2\2\2\u1471\u1472\3\2\2\2\u1472\u1474\5\u020c\u0107\2\u1473\u1470\3"+
		"\2\2\2\u1474\u1477\3\2\2\2\u1475\u1473\3\2\2\2\u1475\u1476\3\2\2\2\u1476"+
		"\u1479\3\2\2\2\u1477\u1475\3\2\2\2\u1478\u147a\5\u020a\u0106\2\u1479\u1478"+
		"\3\2\2\2\u1479\u147a\3\2\2\2\u147a\u01eb\3\2\2\2\u147b\u147d\7D\2\2\u147c"+
		"\u147e\7y\2\2\u147d\u147c\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u147f\3\2"+
		"\2\2\u147f\u1481\5\u0240\u0121\2\u1480\u1482\5\u0230\u0119\2\u1481\u1480"+
		"\3\2\2\2\u1481\u1482\3\2\2\2\u1482\u1493\3\2\2\2\u1483\u1485\7D\2\2\u1484"+
		"\u1486\t\20\2\2\u1485\u1484\3\2\2\2\u1485\u1486\3\2\2\2\u1486\u1487\3"+
		"\2\2\2\u1487\u1489\t\f\2\2\u1488\u148a\7y\2\2\u1489\u1488\3\2\2\2\u1489"+
		"\u148a\3\2\2\2\u148a\u148b\3\2\2\2\u148b\u1490\5\u0240\u0121\2\u148c\u148d"+
		"\7_\2\2\u148d\u148e\7\u00d1\2\2\u148e\u148f\t\21\2\2\u148f\u1491\7\u01f6"+
		"\2\2\u1490\u148c\3\2\2\2\u1490\u1491\3\2\2\2\u1491\u1493\3\2\2\2\u1492"+
		"\u147b\3\2\2\2\u1492\u1483\3\2\2\2\u1493\u01ed\3\2\2\2\u1494\u1495\7}"+
		"\2\2\u1495\u1496\5\u023e\u0120\2\u1496\u1497\5\u0230\u0119\2\u1497\u1498"+
		"\5\u01f0\u00f9\2\u1498\u1499\7b\2\2\u1499\u149a\7\u00bc\2\2\u149a\u149b"+
		"\5\u00c0a\2\u149b\u01ef\3\2\2\2\u149c\u149d\7e\2\2\u149d\u14a1\7\u0298"+
		"\2\2\u149e\u149f\7\u01af\2\2\u149f\u14a0\7\u00bc\2\2\u14a0\u14a2\5\u00c0"+
		"a\2\u14a1\u149e\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2\u14a4\3\2\2\2\u14a3"+
		"\u14a5\5\u01f8\u00fd\2\u14a4\u14a3\3\2\2\2\u14a4\u14a5\3\2\2\2\u14a5\u14a6"+
		"\3\2\2\2\u14a6\u14a7\7\u0299\2\2\u14a7\u01f1\3\2\2\2\u14a8\u14a9\7\67"+
		"\2\2\u14a9\u14ab\7\u00bc\2\2\u14aa\u14ac\5\u023a\u011e\2\u14ab\u14aa\3"+
		"\2\2\2\u14ab\u14ac\3\2\2\2\u14ac\u14ad\3\2\2\2\u14ad\u14ae\5\u0214\u010b"+
		"\2\u14ae\u01f3\3\2\2\2\u14af\u14b0\78\2\2\u14b0\u14b1\5\u0214\u010b\2"+
		"\u14b1\u01f5\3\2\2\2\u14b2\u14b3\7\u0094\2\2\u14b3\u14b4\5\u0208\u0105"+
		"\2\u14b4\u01f7\3\2\2\2\u14b5\u14b6\7b\2\2\u14b6\u14b7\7\u00bc\2\2\u14b7"+
		"\u14bc\5\u0206\u0104\2\u14b8\u14b9\7\u0293\2\2\u14b9\u14bb\5\u0206\u0104"+
		"\2\u14ba\u14b8\3\2\2\2\u14bb\u14be\3\2\2\2\u14bc\u14ba\3\2\2\2\u14bc\u14bd"+
		"\3\2\2\2\u14bd\u01f9\3\2\2\2\u14be\u14bc\3\2\2\2\u14bf\u14c0\7P\2\2\u14c0"+
		"\u14cb\7\u0298\2\2\u14c1\u14c2\7\u01af\2\2\u14c2\u14c3\7\u00bc\2\2\u14c3"+
		"\u14c8\5\u023e\u0120\2\u14c4\u14c5\7\u0293\2\2\u14c5\u14c7\5\u023e\u0120"+
		"\2\u14c6\u14c4\3\2\2\2\u14c7\u14ca\3\2\2\2\u14c8\u14c6\3\2\2\2\u14c8\u14c9"+
		"\3\2\2\2\u14c9\u14cc\3\2\2\2\u14ca\u14c8\3\2\2\2\u14cb\u14c1\3\2\2\2\u14cb"+
		"\u14cc\3\2\2\2\u14cc\u14cd\3\2\2\2\u14cd\u14ce\7b\2\2\u14ce\u14cf\7\u00bc"+
		"\2\2\u14cf\u14d4\5\u023e\u0120\2\u14d0\u14d1\7\u0293\2\2\u14d1\u14d3\5"+
		"\u023e\u0120\2\u14d2\u14d0\3\2\2\2\u14d3\u14d6\3\2\2\2\u14d4\u14d2\3\2"+
		"\2\2\u14d4\u14d5\3\2\2\2\u14d5\u14d7\3\2\2\2\u14d6\u14d4\3\2\2\2\u14d7"+
		"\u14d8\7\u00ef\2\2\u14d8\u14d9\5\u02ae\u0158\2\u14d9\u14dc\7\7\2\2\u14da"+
		"\u14dd\5\u0218\u010d\2\u14db\u14dd\5\u0208\u0105\2\u14dc\u14da\3\2\2\2"+
		"\u14dc\u14db\3\2\2\2\u14dd\u14e7\3\2\2\2\u14de\u14df\7\u0293\2\2\u14df"+
		"\u14e0\5\u02ae\u0158\2\u14e0\u14e3\7\7\2\2\u14e1\u14e4\5\u0218\u010d\2"+
		"\u14e2\u14e4\5\u0208\u0105\2\u14e3\u14e1\3\2\2\2\u14e3\u14e2\3\2\2\2\u14e4"+
		"\u14e6\3\2\2\2\u14e5\u14de\3\2\2\2\u14e6\u14e9\3\2\2\2\u14e7\u14e5\3\2"+
		"\2\2\u14e7\u14e8\3\2\2\2\u14e8\u14ea\3\2\2\2\u14e9\u14e7\3\2\2\2\u14ea"+
		"\u14eb\7\u01be\2\2\u14eb\u14ec\5\u02ae\u0158\2\u14ec\u14ed\7\7\2\2\u14ed"+
		"\u14ee\7\u0298\2\2\u14ee\u14ef\5\u02ae\u0158\2\u14ef\u14f9\7\u0299\2\2"+
		"\u14f0\u14f1\7\u01f6\2\2\u14f1\u14f2\7P\2\2\u14f2\u14f7\3\2\2\2\u14f3"+
		"\u14f4\7\3\2\2\u14f4\u14f8\7\u0113\2\2\u14f5\u14f6\7\u0126\2\2\u14f6\u14f8"+
		"\7\u0112\2\2\u14f7\u14f3\3\2\2\2\u14f7\u14f5\3\2\2\2\u14f8\u14fa\3\2\2"+
		"\2\u14f9\u14f0\3\2\2\2\u14f9\u14fa\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb\u14fc"+
		"\7\u0299\2\2\u14fc\u01fb\3\2\2\2\u14fd\u14fe\7\u01af\2\2\u14fe\u14ff\7"+
		"\u00bc\2\2\u14ff\u1501\5\u0218\u010d\2\u1500\u1502\5\u01f2\u00fa\2\u1501"+
		"\u1500\3\2\2\2\u1501\u1502\3\2\2\2\u1502\u1505\3\2\2\2\u1503\u1504\7\u009f"+
		"\2\2\u1504\u1506\5\u0296\u014c\2\u1505\u1503\3\2\2\2\u1505\u1506\3\2\2"+
		"\2\u1506\u01fd\3\2\2\2\u1507\u1508\7\u010b\2\2\u1508\u1509\t\36\2\2\u1509"+
		"\u01ff\3\2\2\2\u150a\u150b\7\u01a9\2\2\u150b\u150c\7\u0085\2\2\u150c\u150d"+
		"\5\u02a0\u0151\2\u150d\u0201\3\2\2\2\u150e\u150f\7\u01e5\2\2\u150f\u1510"+
		"\7\u0085\2\2\u1510\u1511\5\u0236\u011c\2\u1511\u0203\3\2\2\2\u1512\u1513"+
		"\7\u020a\2\2\u1513\u1514\7p\2\2\u1514\u1515\5\u027e\u0140\2\u1515\u0205"+
		"\3\2\2\2\u1516\u1518\5\u0218\u010d\2\u1517\u1519\t\37\2\2\u1518\u1517"+
		"\3\2\2\2\u1518\u1519\3\2\2\2\u1519\u0207\3\2\2\2\u151a\u151f\5\u021a\u010e"+
		"\2\u151b\u151c\t \2\2\u151c\u151e\5\u021a\u010e\2\u151d\u151b\3\2\2\2"+
		"\u151e\u1521\3\2\2\2\u151f\u151d\3\2\2\2\u151f\u1520\3\2\2\2\u1520\u0209"+
		"\3\2\2\2\u1521\u151f\3\2\2\2\u1522\u1523\7\u0228\2\2\u1523\u1524\7\u0298"+
		"\2\2\u1524\u1525\7\u02b6\2\2\u1525\u1526\7\u0299\2\2\u1526\u020b\3\2\2"+
		"\2\u1527\u152b\5\u0240\u0121\2\u1528\u152b\5\u01e4\u00f3\2\u1529\u152b"+
		"\5\u020e\u0108\2\u152a\u1527\3\2\2\2\u152a\u1528\3\2\2\2\u152a\u1529\3"+
		"\2\2\2\u152b\u152d\3\2\2\2\u152c\u152e\5\u0230\u0119\2\u152d\u152c\3\2"+
		"\2\2\u152d\u152e\3\2\2\2\u152e\u020d\3\2\2\2\u152f\u153f\5\u0240\u0121"+
		"\2\u1530\u1540\7=\2\2\u1531\u1533\7J\2\2\u1532\u1534\7d\2\2\u1533\u1532"+
		"\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u1540\3\2\2\2\u1535\u1537\7n\2\2\u1536"+
		"\u1538\7d\2\2\u1537\u1536\3\2\2\2\u1537\u1538\3\2\2\2\u1538\u1540\3\2"+
		"\2\2\u1539\u153b\7\65\2\2\u153a\u153c\7d\2\2\u153b\u153a\3\2\2\2\u153b"+
		"\u153c\3\2\2\2\u153c\u1540\3\2\2\2\u153d\u1540\7S\2\2\u153e\u1540\7\33"+
		"\2\2\u153f\u1530\3\2\2\2\u153f\u1531\3\2\2\2\u153f\u1535\3\2\2\2\u153f"+
		"\u1539\3\2\2\2\u153f\u153d\3\2\2\2\u153f\u153e\3\2\2\2\u153f\u1540\3\2"+
		"\2\2\u1540\u1541\3\2\2\2\u1541\u1543\7G\2\2\u1542\u1544\5\u023a\u011e"+
		"\2\u1543\u1542\3\2\2\2\u1543\u1544\3\2\2\2\u1544\u1546\3\2\2\2\u1545\u1547"+
		"\5\u020a\u0106\2\u1546\u1545\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u1549\3"+
		"\2\2\2\u1548\u154a\5\u0220\u0111\2\u1549\u1548\3\2\2\2\u1549\u154a\3\2"+
		"\2\2\u154a\u020f\3\2\2\2\u154b\u1550\5\u0212\u010a\2\u154c\u154d\7\u0293"+
		"\2\2\u154d\u154f\5\u0212\u010a\2\u154e\u154c\3\2\2\2\u154f\u1552\3\2\2"+
		"\2\u1550\u154e\3\2\2\2\u1550\u1551\3\2\2\2\u1551\u0211\3\2\2\2\u1552\u1550"+
		"\3\2\2\2\u1553\u1555\5\u0218\u010d\2\u1554\u1556\5\u0230\u0119\2\u1555"+
		"\u1554\3\2\2\2\u1555\u1556\3\2\2\2\u1556\u1559\3\2\2\2\u1557\u1559\5\u029a"+
		"\u014e\2\u1558\u1553\3\2\2\2\u1558\u1557\3\2\2\2\u1559\u0213\3\2\2\2\u155a"+
		"\u155f\5\u0218\u010d\2\u155b\u155c\7\u0293\2\2\u155c\u155e\5\u0218\u010d"+
		"\2\u155d\u155b\3\2\2\2\u155e\u1561\3\2\2\2\u155f\u155d\3\2\2\2\u155f\u1560"+
		"\3\2\2\2\u1560\u0215\3\2\2\2\u1561\u155f\3\2\2\2\u1562\u1563\7\u0297\2"+
		"\2\u1563\u1564\5\u02c6\u0164\2\u1564\u0217\3\2\2\2\u1565\u1566\7\u0298"+
		"\2\2\u1566\u156c\5\u0218\u010d\2\u1567\u1568\5\u02bc\u015f\2\u1568\u1569"+
		"\5\u0218\u010d\2\u1569\u156b\3\2\2\2\u156a\u1567\3\2\2\2\u156b\u156e\3"+
		"\2\2\2\u156c\u156a\3\2\2\2\u156c\u156d\3\2\2\2\u156d\u156f\3\2\2\2\u156e"+
		"\u156c\3\2\2\2\u156f\u1571\7\u0299\2\2\u1570\u1572\5\u0216\u010c\2\u1571"+
		"\u1570\3\2\2\2\u1571\u1572\3\2\2\2\u1572\u1586\3\2\2\2\u1573\u1579\5\u0232"+
		"\u011a\2\u1574\u1579\5\u023e\u0120\2\u1575\u1579\5\u022e\u0118\2\u1576"+
		"\u1579\5\u01de\u00f0\2\u1577\u1579\5\u02b0\u0159\2\u1578\u1573\3\2\2\2"+
		"\u1578\u1574\3\2\2\2\u1578\u1575\3\2\2\2\u1578\u1576\3\2\2\2\u1578\u1577"+
		"\3\2\2\2\u1579\u157f\3\2\2\2\u157a\u157b\5\u02bc\u015f\2\u157b\u157c\5"+
		"\u0218\u010d\2\u157c\u157e\3\2\2\2\u157d\u157a\3\2\2\2\u157e\u1581\3\2"+
		"\2\2\u157f\u157d\3\2\2\2\u157f\u1580\3\2\2\2\u1580\u1583\3\2\2\2\u1581"+
		"\u157f\3\2\2\2\u1582\u1584\5\u0216\u010c\2\u1583\u1582\3\2\2\2\u1583\u1584"+
		"\3\2\2\2\u1584\u1586\3\2\2\2\u1585\u1565\3\2\2\2\u1585\u1578\3\2\2\2\u1586"+
		"\u0219\3\2\2\2\u1587\u158f\5\u022a\u0116\2\u1588\u158f\5\u022c\u0117\2"+
		"\u1589\u158f\5\u0224\u0113\2\u158a\u158f\5\u0226\u0114\2\u158b\u158f\5"+
		"\u0222\u0112\2\u158c\u158f\5\u021e\u0110\2\u158d\u158f\5\u021c\u010f\2"+
		"\u158e\u1587\3\2\2\2\u158e\u1588\3\2\2\2\u158e\u1589\3\2\2\2\u158e\u158a"+
		"\3\2\2\2\u158e\u158b\3\2\2\2\u158e\u158c\3\2\2\2\u158e\u158d\3\2\2\2\u158f"+
		"\u021b\3\2\2\2\u1590\u1591\5\u0218\u010d\2\u1591\u1592\7E\2\2\u1592\u1593"+
		"\5\u02b4\u015b\2\u1593\u021d\3\2\2\2\u1594\u1596\5\u0218\u010d\2\u1595"+
		"\u1597\7W\2\2\u1596\u1595\3\2\2\2\u1596\u1597\3\2\2\2\u1597\u1598\3\2"+
		"\2\2\u1598\u1599\t!\2\2\u1599\u159c\5\u0218\u010d\2\u159a\u159b\7\u0111"+
		"\2\2\u159b\u159d\5\u02b0\u0159\2\u159c\u159a\3\2\2\2\u159c\u159d\3\2\2"+
		"\2\u159d\u021f\3\2\2\2\u159e\u159f\7_\2\2\u159f\u15a0\5\u023e\u0120\2"+
		"\u15a0\u15a1\5\u02be\u0160\2\u15a1\u15a9\5\u0218\u010d\2\u15a2\u15a3\t"+
		"\"\2\2\u15a3\u15a4\5\u023e\u0120\2\u15a4\u15a5\5\u02be\u0160\2\u15a5\u15a6"+
		"\5\u0218\u010d\2\u15a6\u15a8\3\2\2\2\u15a7\u15a2\3\2\2\2\u15a8\u15ab\3"+
		"\2\2\2\u15a9\u15a7\3\2\2\2\u15a9\u15aa\3\2\2\2\u15aa\u0221\3\2\2\2\u15ab"+
		"\u15a9\3\2\2\2\u15ac\u15ad\5\u023e\u0120\2\u15ad\u15ae\7\u01ca\2\2\u15ae"+
		"\u15af\7\u024e\2\2\u15af\u15b0\5\u023e\u0120\2\u15b0\u0223\3\2\2\2\u15b1"+
		"\u15b2\5\u0218\u010d\2\u15b2\u15b3\5\u02bc\u015f\2\u15b3\u15b4\5\u0218"+
		"\u010d\2\u15b4\u0225\3\2\2\2\u15b5\u15b6\5\u00c0a\2\u15b6\u15b8\7;\2\2"+
		"\u15b7\u15b9\7W\2\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15ba"+
		"\3\2\2\2\u15ba\u15bb\7\u0298\2\2\u15bb\u15bc\5\u0214\u010b\2\u15bc\u15bd"+
		"\7\u0299\2\2\u15bd\u0227\3\2\2\2\u15be\u15c4\5\u0296\u014c\2\u15bf\u15c0"+
		"\5\u0292\u014a\2\u15c0\u15c1\7E\2\2\u15c1\u15c2\5\u02b4\u015b\2\u15c2"+
		"\u15c4\3\2\2\2\u15c3\u15be\3\2\2\2\u15c3\u15bf\3\2\2\2\u15c4\u0229\3\2"+
		"\2\2\u15c5\u15c7\5\u0218\u010d\2\u15c6\u15c8\7\n\2\2\u15c7\u15c6\3\2\2"+
		"\2\u15c7\u15c8\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15ca\5\u0218\u010d\2"+
		"\u15ca\u15cb\7\4\2\2\u15cb\u15cc\5\u0218\u010d\2\u15cc\u022b\3\2\2\2\u15cd"+
		"\u15ce\5\u0218\u010d\2\u15ce\u15d0\7E\2\2\u15cf\u15d1\7W\2\2\u15d0\u15cf"+
		"\3\2\2\2\u15d0\u15d1\3\2\2\2\u15d1\u15d4\3\2\2\2\u15d2\u15d5\5\u02c4\u0163"+
		"\2\u15d3\u15d5\7\u0242\2\2\u15d4\u15d2\3\2\2\2\u15d4\u15d3\3\2\2\2\u15d5"+
		"\u022d\3\2\2\2\u15d6\u15d7\7\20\2\2\u15d7\u15d8\7\u0093\2\2\u15d8\u15d9"+
		"\5\u0218\u010d\2\u15d9\u15da\7{\2\2\u15da\u15e2\5\u0218\u010d\2\u15db"+
		"\u15dc\7\u0093\2\2\u15dc\u15dd\5\u0218\u010d\2\u15dd\u15de\7{\2\2\u15de"+
		"\u15df\5\u0218\u010d\2\u15df\u15e1\3\2\2\2\u15e0\u15db\3\2\2\2\u15e1\u15e4"+
		"\3\2\2\2\u15e2\u15e0\3\2\2\2\u15e2\u15e3\3\2\2\2\u15e3\u15e7\3\2\2\2\u15e4"+
		"\u15e2\3\2\2\2\u15e5\u15e6\7*\2\2\u15e6\u15e8\5\u0218\u010d\2\u15e7\u15e5"+
		"\3\2\2\2\u15e7\u15e8\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9\u15ea\7,\2\2\u15ea"+
		"\u022f\3\2\2\2\u15eb\u15ed\7\7\2\2\u15ec\u15eb\3\2\2\2\u15ec\u15ed\3\2"+
		"\2\2\u15ed\u15ee\3\2\2\2\u15ee\u15ef\5\u02ae\u0158\2\u15ef\u0231\3\2\2"+
		"\2\u15f0\u15f1\5\u0288\u0145\2\u15f1\u15f6\7\u0298\2\2\u15f2\u15f4\t\31"+
		"\2\2\u15f3\u15f2\3\2\2\2\u15f3\u15f4\3\2\2\2\u15f4\u15f5\3\2\2\2\u15f5"+
		"\u15f7\5\u0210\u0109\2\u15f6\u15f3\3\2\2\2\u15f6\u15f7\3\2\2\2\u15f7\u15f8"+
		"\3\2\2\2\u15f8\u15f9\7\u0299\2\2\u15f9\u0233\3\2\2\2\u15fa\u15ff\5\u0238"+
		"\u011d\2\u15fb\u15fc\7\u0293\2\2\u15fc\u15fe\5\u0238\u011d\2\u15fd\u15fb"+
		"\3\2\2\2\u15fe\u1601\3\2\2\2\u15ff\u15fd\3\2\2\2\u15ff\u1600\3\2\2\2\u1600"+
		"\u160f\3\2\2\2\u1601\u15ff\3\2\2\2\u1602\u1604\7\u0298\2\2\u1603\u1605"+
		"\5\u0238\u011d\2\u1604\u1603\3\2\2\2\u1604\u1605\3\2\2\2\u1605\u160a\3"+
		"\2\2\2\u1606\u1607\7\u0293\2\2\u1607\u1609\5\u0238\u011d\2\u1608\u1606"+
		"\3\2\2\2\u1609\u160c\3\2\2\2\u160a\u1608\3\2\2\2\u160a\u160b\3\2\2\2\u160b"+
		"\u160d\3\2\2\2\u160c\u160a\3\2\2\2\u160d\u160f\7\u0299\2\2\u160e\u15fa"+
		"\3\2\2\2\u160e\u1602\3\2\2\2\u160f\u0235\3\2\2\2\u1610\u1615\5\u02b0\u0159"+
		"\2\u1611\u1612\7\u0293\2\2\u1612\u1614\5\u02b0\u0159\2\u1613\u1611\3\2"+
		"\2\2\u1614\u1617\3\2\2\2\u1615\u1613\3\2\2\2\u1615\u1616\3\2\2\2\u1616"+
		"\u1625\3\2\2\2\u1617\u1615\3\2\2\2\u1618\u161a\7\u0298\2\2\u1619\u161b"+
		"\5\u02b0\u0159\2\u161a\u1619\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u1620\3"+
		"\2\2\2\u161c\u161d\7\u0293\2\2\u161d\u161f\5\u02b0\u0159\2\u161e\u161c"+
		"\3\2\2\2\u161f\u1622\3\2\2\2\u1620\u161e\3\2\2\2\u1620\u1621\3\2\2\2\u1621"+
		"\u1623\3\2\2\2\u1622\u1620\3\2\2\2\u1623\u1625\7\u0299\2\2\u1624\u1610"+
		"\3\2\2\2\u1624\u1618\3\2\2\2\u1625\u0237\3\2\2\2\u1626\u1627\5\u028a\u0146"+
		"\2\u1627\u1628\5\u02bc\u015f\2\u1628\u1629\5\u02b0\u0159\2\u1629\u0239"+
		"\3\2\2\2\u162a\u162b\7\u02b1\2\2\u162b\u1630\5\u023c\u011f\2\u162c\u162d"+
		"\7\u0293\2\2\u162d\u162f\5\u023c\u011f\2\u162e\u162c\3\2\2\2\u162f\u1632"+
		"\3\2\2\2\u1630\u162e\3\2\2\2\u1630\u1631\3\2\2\2\u1631\u1633\3\2\2\2\u1632"+
		"\u1630\3\2\2\2\u1633\u1634\7\u02b2\2\2\u1634\u023b\3\2\2\2\u1635\u1678"+
		"\7\u025f\2\2\u1636\u1637\7\u0283\2\2\u1637\u1678\t#\2\2\u1638\u1678\7"+
		"\u0287\2\2\u1639\u1678\7\u0288\2\2\u163a\u1678\7\u00f9\2\2\u163b\u163c"+
		"\7\u0160\2\2\u163c\u163d\7\u0298\2\2\u163d\u163e\5\u02b0\u0159\2\u163e"+
		"\u163f\7\u0299\2\2\u163f\u1640\3\2\2\2\u1640\u1641\7\u0286\2\2\u1641\u1678"+
		"\3\2\2\2\u1642\u1678\7\u0289\2\2\u1643\u1644\7\u0290\2\2\u1644\u1645\7"+
		"\u0298\2\2\u1645\u164a\5\u02b0\u0159\2\u1646\u1647\7\u0293\2\2\u1647\u1649"+
		"\5\u02b0\u0159\2\u1648\u1646\3\2\2\2\u1649\u164c\3\2\2\2\u164a\u1648\3"+
		"\2\2\2\u164a\u164b\3\2\2\2\u164b\u164d\3\2\2\2\u164c\u164a\3\2\2\2\u164d"+
		"\u164e\7\u0299\2\2\u164e\u1678\3\2\2\2\u164f\u1650\7\u028f\2\2\u1650\u1651"+
		"\7\u0298\2\2\u1651\u1652\5\u02b0\u0159\2\u1652\u1653\7\u0299\2\2\u1653"+
		"\u1678\3\2\2\2\u1654\u1655\7\u028e\2\2\u1655\u1656\7\u0298\2\2\u1656\u1657"+
		"\5\u02b0\u0159\2\u1657\u1658\7\u0299\2\2\u1658\u1678\3\2\2\2\u1659\u165a"+
		"\7\u0291\2\2\u165a\u165b\7\u0298\2\2\u165b\u1660\5\u024a\u0126\2\u165c"+
		"\u165d\7\u0293\2\2\u165d\u165f\5\u024a\u0126\2\u165e\u165c\3\2\2\2\u165f"+
		"\u1662\3\2\2\2\u1660\u165e\3\2\2\2\u1660\u1661\3\2\2\2\u1661\u1663\3\2"+
		"\2\2\u1662\u1660\3\2\2\2\u1663\u1664\7\u0299\2\2\u1664\u1678\3\2\2\2\u1665"+
		"\u1666\7\u0292\2\2\u1666\u1667\7\u0298\2\2\u1667\u166c\5\u024a\u0126\2"+
		"\u1668\u1669\7\u0293\2\2\u1669\u166b\5\u024a\u0126\2\u166a\u1668\3\2\2"+
		"\2\u166b\u166e\3\2\2\2\u166c\u166a\3\2\2\2\u166c\u166d\3\2\2\2\u166d\u166f"+
		"\3\2\2\2\u166e\u166c\3\2\2\2\u166f\u1670\7\u0299\2\2\u1670\u1678\3\2\2"+
		"\2\u1671\u1672\7\u028d\2\2\u1672\u1673\7\u0298\2\2\u1673\u1674\5\u0298"+
		"\u014d\2\u1674\u1675\7\u0299\2\2\u1675\u1678\3\2\2\2\u1676\u1678\7\u028c"+
		"\2\2\u1677\u1635\3\2\2\2\u1677\u1636\3\2\2\2\u1677\u1638\3\2\2\2\u1677"+
		"\u1639\3\2\2\2\u1677\u163a\3\2\2\2\u1677\u163b\3\2\2\2\u1677\u1642\3\2"+
		"\2\2\u1677\u1643\3\2\2\2\u1677\u164f\3\2\2\2\u1677\u1654\3\2\2\2\u1677"+
		"\u1659\3\2\2\2\u1677\u1665\3\2\2\2\u1677\u1671\3\2\2\2\u1677\u1676\3\2"+
		"\2\2\u1678\u023d\3\2\2\2\u1679\u167a\5\u025c\u012f\2\u167a\u167b\7\u029a"+
		"\2\2\u167b\u167d\3\2\2\2\u167c\u1679\3\2\2\2\u167c\u167d\3\2\2\2\u167d"+
		"\u167e\3\2\2\2\u167e\u167f\5\u027e\u0140\2\u167f\u1680\7\u029a\2\2\u1680"+
		"\u1682\3\2\2\2\u1681\u167c\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1683\3\2"+
		"\2\2\u1683\u1684\5\u0280\u0141\2\u1684\u1685\7\u029a\2\2\u1685\u1687\3"+
		"\2\2\2\u1686\u1681\3\2\2\2\u1686\u1687\3\2\2\2\u1687\u1688\3\2\2\2\u1688"+
		"\u1689\5\u0290\u0149\2\u1689\u023f\3\2\2\2\u168a\u168b\5\u025c\u012f\2"+
		"\u168b\u168c\7\u029a\2\2\u168c\u168e\3\2\2\2\u168d\u168a\3\2\2\2\u168d"+
		"\u168e\3\2\2\2\u168e\u168f\3\2\2\2\u168f\u1690\5\u027e\u0140\2\u1690\u1691"+
		"\7\u029a\2\2\u1691\u1693\3\2\2\2\u1692\u168d\3\2\2\2\u1692\u1693\3\2\2"+
		"\2\u1693\u1694\3\2\2\2\u1694\u1695\5\u0280\u0141\2\u1695\u0241\3\2\2\2"+
		"\u1696\u1697\5\u025c\u012f\2\u1697\u1698\7\u029a\2\2\u1698\u169a\3\2\2"+
		"\2\u1699\u1696\3\2\2\2\u1699\u169a\3\2\2\2\u169a\u169b\3\2\2\2\u169b\u169c"+
		"\5\u027e\u0140\2\u169c\u169d\7\u029a\2\2\u169d\u169f\3\2\2\2\u169e\u1699"+
		"\3\2\2\2\u169e\u169f\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16a1\5\u026e\u0138"+
		"\2\u16a1\u0243\3\2\2\2\u16a2\u16a3\5\u025c\u012f\2\u16a3\u16a4\7\u029a"+
		"\2\2\u16a4\u16a6\3\2\2\2\u16a5\u16a2\3\2\2\2\u16a5\u16a6\3\2\2\2\u16a6"+
		"\u16a7\3\2\2\2\u16a7\u16a8\5\u027e\u0140\2\u16a8\u16a9\7\u029a\2\2\u16a9"+
		"\u16ab\3\2\2\2\u16aa\u16a5\3\2\2\2\u16aa\u16ab\3\2\2\2\u16ab\u16ac\3\2"+
		"\2\2\u16ac\u16ad\5\u0264\u0133\2\u16ad\u0245\3\2\2\2\u16ae\u16af\5\u025c"+
		"\u012f\2\u16af\u16b0\7\u029a\2\2\u16b0\u16b2\3\2\2\2\u16b1\u16ae\3\2\2"+
		"\2\u16b1\u16b2\3\2\2\2\u16b2\u16b3\3\2\2\2\u16b3\u16b4\5\u027e\u0140\2"+
		"\u16b4\u16b5\7\u029a\2\2\u16b5\u16b7\3\2\2\2\u16b6\u16b1\3\2\2\2\u16b6"+
		"\u16b7\3\2\2\2\u16b7\u16b8\3\2\2\2\u16b8\u16b9\5\u026a\u0136\2\u16b9\u0247"+
		"\3\2\2\2\u16ba\u16bb\5\u025c\u012f\2\u16bb\u16bc\7\u029a\2\2\u16bc\u16be"+
		"\3\2\2\2\u16bd\u16ba\3\2\2\2\u16bd\u16be\3\2\2\2\u16be\u16bf\3\2\2\2\u16bf"+
		"\u16c0\5\u027e\u0140\2\u16c0\u16c1\7\u029a\2\2\u16c1\u16c3\3\2\2\2\u16c2"+
		"\u16bd\3\2\2\2\u16c2\u16c3\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16c5\5\u026c"+
		"\u0137\2\u16c5\u0249\3\2\2\2\u16c6\u16c7\5\u025c\u012f\2\u16c7\u16c8\7"+
		"\u029a\2\2\u16c8\u16ca\3\2\2\2\u16c9\u16c6\3\2\2\2\u16c9\u16ca\3\2\2\2"+
		"\u16ca\u16cb\3\2\2\2\u16cb\u16cc\5\u027e\u0140\2\u16cc\u16cd\7\u029a\2"+
		"\2\u16cd\u16cf\3\2\2\2\u16ce\u16c9\3\2\2\2\u16ce\u16cf\3\2\2\2\u16cf\u16d0"+
		"\3\2\2\2\u16d0\u16d1\5\u0280\u0141\2\u16d1\u16d2\7\u029a\2\2\u16d2\u16d4"+
		"\3\2\2\2\u16d3\u16ce\3\2\2\2\u16d3\u16d4\3\2\2\2\u16d4\u16d5\3\2\2\2\u16d5"+
		"\u16d6\5\u0284\u0143\2\u16d6\u024b\3\2\2\2\u16d7\u16d8\5\u025c\u012f\2"+
		"\u16d8\u16d9\7\u029a\2\2\u16d9\u16db\3\2\2\2\u16da\u16d7\3\2\2\2\u16da"+
		"\u16db\3\2\2\2\u16db\u16dc\3\2\2\2\u16dc\u16dd\5\u027e\u0140\2\u16dd\u16de"+
		"\7\u029a\2\2\u16de\u16e0\3\2\2\2\u16df\u16da\3\2\2\2\u16df\u16e0\3\2\2"+
		"\2\u16e0\u16e1\3\2\2\2\u16e1\u16e2\5\u0280\u0141\2\u16e2\u16e3\7\u029a"+
		"\2\2\u16e3\u16e5\3\2\2\2\u16e4\u16df\3\2\2\2\u16e4\u16e5\3\2\2\2\u16e5"+
		"\u16e6\3\2\2\2\u16e6\u16e7\5\u024e\u0128\2\u16e7\u024d\3\2\2\2\u16e8\u16e9"+
		"\5\u02ae\u0158\2\u16e9\u024f\3\2\2\2\u16ea\u16eb\5\u025c\u012f\2\u16eb"+
		"\u16ec\7\u029a\2\2\u16ec\u16ee\3\2\2\2\u16ed\u16ea\3\2\2\2\u16ed\u16ee"+
		"\3\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u16f0\5\u027e\u0140\2\u16f0\u16f1\7"+
		"\u029a\2\2\u16f1\u16f3\3\2\2\2\u16f2\u16ed\3\2\2\2\u16f2\u16f3\3\2\2\2"+
		"\u16f3\u16f4\3\2\2\2\u16f4\u16f5\5\u0288\u0145\2\u16f5\u0251\3\2\2\2\u16f6"+
		"\u16f7\5\u025c\u012f\2\u16f7\u16f8\7\u029a\2\2\u16f8\u16fa\3\2\2\2\u16f9"+
		"\u16f6\3\2\2\2\u16f9\u16fa\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fc\5\u027e"+
		"\u0140\2\u16fc\u16fd\7\u029a\2\2\u16fd\u16ff\3\2\2\2\u16fe\u16f9\3\2\2"+
		"\2\u16fe\u16ff\3\2\2\2\u16ff\u1700\3\2\2\2\u1700\u1701\5\u0286\u0144\2"+
		"\u1701\u0253\3\2\2\2\u1702\u1703\5\u025c\u012f\2\u1703\u1704\7\u029a\2"+
		"\2\u1704\u1706\3\2\2\2\u1705\u1702\3\2\2\2\u1705\u1706\3\2\2\2\u1706\u1707"+
		"\3\2\2\2\u1707\u1708\5\u027e\u0140\2\u1708\u1709\7\u029a\2\2\u1709\u170b"+
		"\3\2\2\2\u170a\u1705\3\2\2\2\u170a\u170b\3\2\2\2\u170b\u170c\3\2\2\2\u170c"+
		"\u170d\5\u028e\u0148\2\u170d\u0255\3\2\2\2\u170e\u170f\5\u025c\u012f\2"+
		"\u170f\u1710\7\u029a\2\2\u1710\u1712\3\2\2\2\u1711\u170e\3\2\2\2\u1711"+
		"\u1712\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1714\5\u027e\u0140\2\u1714\u1715"+
		"\7\u029a\2\2\u1715\u1717\3\2\2\2\u1716\u1711\3\2\2\2\u1716\u1717\3\2\2"+
		"\2\u1717\u1718\3\2\2\2\u1718\u1719\5\u0268\u0135\2\u1719\u0257\3\2\2\2"+
		"\u171a\u171b\5\u025c\u012f\2\u171b\u171c\7\u029a\2\2\u171c\u171e\3\2\2"+
		"\2\u171d\u171a\3\2\2\2\u171d\u171e\3\2\2\2\u171e\u171f\3\2\2\2\u171f\u1720"+
		"\5\u027e\u0140\2\u1720\u1721\7\u029a\2\2\u1721\u1723\3\2\2\2\u1722\u171d"+
		"\3\2\2\2\u1722\u1723\3\2\2\2\u1723\u1724\3\2\2\2\u1724\u1725\5\u025e\u0130"+
		"\2\u1725\u0259\3\2\2\2\u1726\u1727\5\u025c\u012f\2\u1727\u1728\7\u029a"+
		"\2\2\u1728\u172a\3\2\2\2\u1729\u1726\3\2\2\2\u1729\u172a\3\2\2\2\u172a"+
		"\u172b\3\2\2\2\u172b\u172c\5\u027e\u0140\2\u172c\u025b\3\2\2\2\u172d\u172e"+
		"\5\u02ae\u0158\2\u172e\u025d\3\2\2\2\u172f\u1730\5\u02ae\u0158\2\u1730"+
		"\u025f\3\2\2\2\u1731\u1732\5\u02ae\u0158\2\u1732\u0261\3\2\2\2\u1733\u1734"+
		"\7\u02b8\2\2\u1734\u0263\3\2\2\2\u1735\u1736\5\u02ae\u0158\2\u1736\u0265"+
		"\3\2\2\2\u1737\u1738\5\u02ae\u0158\2\u1738\u0267\3\2\2\2\u1739\u173a\5"+
		"\u02ae\u0158\2\u173a\u0269\3\2\2\2\u173b\u173c\5\u02ae\u0158\2\u173c\u026b"+
		"\3\2\2\2\u173d\u173e\5\u02ae\u0158\2\u173e\u026d\3\2\2\2\u173f\u1740\5"+
		"\u02ae\u0158\2\u1740\u026f\3\2\2\2\u1741\u1742\5\u02ae\u0158\2\u1742\u0271"+
		"\3\2\2\2\u1743\u1744\5\u02ae\u0158\2\u1744\u0273\3\2\2\2\u1745\u1746\5"+
		"\u02ae\u0158\2\u1746\u0275\3\2\2\2\u1747\u1749\5\u02ae\u0158\2\u1748\u174a"+
		"\5\u0296\u014c\2\u1749\u1748\3\2\2\2\u1749\u174a\3\2\2\2\u174a\u0277\3"+
		"\2\2\2\u174b\u174c\5\u02ae\u0158\2\u174c\u0279\3\2\2\2\u174d\u174e\5\u0292"+
		"\u014a\2\u174e\u027b\3\2\2\2\u174f\u1750\5\u02ae\u0158\2\u1750\u027d\3"+
		"\2\2\2\u1751\u1754\5\u02ae\u0158\2\u1752\u1754\7\u0260\2\2\u1753\u1751"+
		"\3\2\2\2\u1753\u1752\3\2\2\2\u1754\u027f\3\2\2\2\u1755\u1756\5\u02ae\u0158"+
		"\2\u1756\u0281\3\2\2\2\u1757\u175c\5\u028a\u0146\2\u1758\u1759\7\u0293"+
		"\2\2\u1759\u175b\5\u028a\u0146\2\u175a\u1758\3\2\2\2\u175b\u175e\3\2\2"+
		"\2\u175c\u175a\3\2\2\2\u175c\u175d\3\2\2\2\u175d\u0283\3\2\2\2\u175e\u175c"+
		"\3\2\2\2\u175f\u1760\5\u02ae\u0158\2\u1760\u0285\3\2\2\2\u1761\u1762\5"+
		"\u02ae\u0158\2\u1762\u0287\3\2\2\2\u1763\u176b\7\u0284\2\2\u1764\u176b"+
		"\7\u01f5\2\2\u1765\u1767\5\u02ae\u0158\2\u1766\u1765\3\2\2\2\u1767\u1768"+
		"\3\2\2\2\u1768\u1766\3\2\2\2\u1768\u1769\3\2\2\2\u1769\u176b\3\2\2\2\u176a"+
		"\u1763\3\2\2\2\u176a\u1764\3\2\2\2\u176a\u1766\3\2\2\2\u176b\u0289\3\2"+
		"\2\2\u176c\u176d\5\u02ae\u0158\2\u176d\u028b\3\2\2\2\u176e\u176f\5\u02ae"+
		"\u0158\2\u176f\u028d\3\2\2\2\u1770\u1771\5\u02ae\u0158\2\u1771\u028f\3"+
		"\2\2\2\u1772\u1773\5\u02ae\u0158\2\u1773\u0291\3\2\2\2\u1774\u1775\t$"+
		"\2\2\u1775\u0293\3\2\2\2\u1776\u1777\7\u02b5\2\2\u1777\u0295\3\2\2\2\u1778"+
		"\u1779\t%\2\2\u1779\u0297\3\2\2\2\u177a\u177b\7\u02b8\2\2\u177b\u0299"+
		"\3\2\2\2\u177c\u177d\7\u0295\2\2\u177d\u029b\3\2\2\2\u177e\u177f\5\u02ae"+
		"\u0158\2\u177f\u029d\3\2\2\2\u1780\u1781\5\u02ae\u0158\2\u1781\u029f\3"+
		"\2\2\2\u1782\u1783\5\u02ae\u0158\2\u1783\u02a1\3\2\2\2\u1784\u1785\5\u02ae"+
		"\u0158\2\u1785\u02a3\3\2\2\2\u1786\u1787\5\u02ae\u0158\2\u1787\u02a5\3"+
		"\2\2\2\u1788\u1789\5\u02ae\u0158\2\u1789\u02a7\3\2\2\2\u178a\u178b\5\u02ae"+
		"\u0158\2\u178b\u02a9\3\2\2\2\u178c\u178d\5\u02ae\u0158\2\u178d\u02ab\3"+
		"\2\2\2\u178e\u178f\5\u02ae\u0158\2\u178f\u02ad\3\2\2\2\u1790\u1796\7\u02b4"+
		"\2\2\u1791\u1796\7\u02b3\2\2\u1792\u1796\7\u02b5\2\2\u1793\u1796\7&\2"+
		"\2\u1794\u1796\n&\2\2\u1795\u1790\3\2\2\2\u1795\u1791\3\2\2\2\u1795\u1792"+
		"\3\2\2\2\u1795\u1793\3\2\2\2\u1795\u1794\3\2\2\2\u1796\u02af\3\2\2\2\u1797"+
		"\u17a0\7\u02b4\2\2\u1798\u17a0\7\u02b3\2\2\u1799\u17a0\7\u02b5\2\2\u179a"+
		"\u17a0\7\u02b8\2\2\u179b\u17a0\7\u02b6\2\2\u179c\u17a0\7\u02b7\2\2\u179d"+
		"\u17a0\7\u02b9\2\2\u179e\u17a0\n&\2\2\u179f\u1797\3\2\2\2\u179f\u1798"+
		"\3\2\2\2\u179f\u1799\3\2\2\2\u179f\u179a\3\2\2\2\u179f\u179b\3\2\2\2\u179f"+
		"\u179c\3\2\2\2\u179f\u179d\3\2\2\2\u179f\u179e\3\2\2\2\u17a0\u02b1\3\2"+
		"\2\2\u17a1\u17a2\t\t\2\2\u17a2\u02b3\3\2\2\2\u17a3\u17a5\7W\2\2\u17a4"+
		"\u17a3\3\2\2\2\u17a4\u17a5\3\2\2\2\u17a5\u17a6\3\2\2\2\u17a6\u17a7\7Y"+
		"\2\2\u17a7\u02b5\3\2\2\2\u17a8\u17a9\t\'\2\2\u17a9\u02b7\3\2\2\2\u17aa"+
		"\u17ab\t(\2\2\u17ab\u02b9\3\2\2\2\u17ac\u17ad\t)\2\2\u17ad\u17ae\5\u02b0"+
		"\u0159\2\u17ae\u02bb\3\2\2\2\u17af\u17b0\5\u02be\u0160\2\u17b0\u02bd\3"+
		"\2\2\2\u17b1\u17b2\t*\2\2\u17b2\u02bf\3\2\2\2\u17b3\u17b4\7\u01d9\2\2"+
		"\u17b4\u17bb\7\u00d2\2\2\u17b5\u17bb\7\u0208\2\2\u17b6\u17b7\7\u01e7\2"+
		"\2\u17b7\u17bb\7\u01d9\2\2\u17b8\u17b9\7\u01d9\2\2\u17b9\u17bb\7\u023e"+
		"\2\2\u17ba\u17b3\3\2\2\2\u17ba\u17b5\3\2\2\2\u17ba\u17b6\3\2\2\2\u17ba"+
		"\u17b8\3\2\2\2\u17bb\u02c1\3\2\2\2\u17bc\u17be\7\u01d9\2\2\u17bd\u17bf"+
		"\t+\2\2\u17be\u17bd\3\2\2\2\u17be\u17bf\3\2\2\2\u17bf\u02c3\3\2\2\2\u17c0"+
		"\u17c1\t,\2\2\u17c1\u02c5\3\2\2\2\u17c2\u17cb\5\u02c8\u0165\2\u17c3\u17cb"+
		"\5\u02ca\u0166\2\u17c4\u17cb\5\u02cc\u0167\2\u17c5\u17cb\5\u02ce\u0168"+
		"\2\u17c6\u17cb\5\u02d0\u0169\2\u17c7\u17cb\5\u02d2\u016a\2\u17c8\u17cb"+
		"\5\u02d4\u016b\2\u17c9\u17cb\5\u02d6\u016c\2\u17ca\u17c2\3\2\2\2\u17ca"+
		"\u17c3\3\2\2\2\u17ca\u17c4\3\2\2\2\u17ca\u17c5\3\2\2\2\u17ca\u17c6\3\2"+
		"\2\2\u17ca\u17c7\3\2\2\2\u17ca\u17c8\3\2\2\2\u17ca\u17c9\3\2\2\2\u17cb"+
		"\u17d4\3\2\2\2\u17cc\u17cd\7\u0298\2\2\u17cd\u17d0\5\u02b0\u0159\2\u17ce"+
		"\u17cf\7\u0293\2\2\u17cf\u17d1\5\u02b0\u0159\2\u17d0\u17ce\3\2\2\2\u17d0"+
		"\u17d1\3\2\2\2\u17d1\u17d2\3\2\2\2\u17d2\u17d3\7\u0299\2\2\u17d3\u17d5"+
		"\3\2\2\2\u17d4\u17cc\3\2\2\2\u17d4\u17d5\3\2\2\2\u17d5\u02c7\3\2\2\2\u17d6"+
		"\u17dd\7\f\2\2\u17d7\u17d8\7\u016e\2\2\u17d8\u17dd\7\u0090\2\2\u17d9\u17dd"+
		"\7\u0090\2\2\u17da\u17dd\7\u00bd\2\2\u17db\u17dd\7\u01d8\2\2\u17dc\u17d6"+
		"\3\2\2\2\u17dc\u17d7\3\2\2\2\u17dc\u17d9\3\2\2\2\u17dc\u17da\3\2\2\2\u17dc"+
		"\u17db\3\2\2\2\u17dd\u02c9\3\2\2\2\u17de\u17df\7\16\2\2\u17df\u02cb\3"+
		"\2\2\2\u17e0\u17e1\7\u016e\2\2\u17e1\u17e5\7\u0091\2\2\u17e2\u17e5\7\22"+
		"\2\2\u17e3\u17e5\7\u0091\2\2\u17e4\u17e0\3\2\2\2\u17e4\u17e2\3\2\2\2\u17e4"+
		"\u17e3\3\2\2\2\u17e5\u02cd\3\2\2\2\u17e6\u17e7\7|\2\2\u17e7\u17e8\7\u0096"+
		"\2\2\u17e8\u17fa\7\u0083\2\2\u17e9\u17fa\7\u0280\2\2\u17ea\u17fa\7|\2"+
		"\2\u17eb\u17fa\7t\2\2\u17ec\u17ed\7~\2\2\u17ed\u17ee\7\u0096\2\2\u17ee"+
		"\u17fa\7\u0083\2\2\u17ef\u17f0\7B\2\2\u17f0\u17f1\7\u00e8\2\2\u17f1\u17f2"+
		"\7\u0085\2\2\u17f2\u17fa\7\u01ff\2\2\u17f3\u17f4\7B\2\2\u17f4\u17f5\7"+
		"\u025c\2\2\u17f5\u17f6\7\u0085\2\2\u17f6\u17fa\7\u0189\2\2\u17f7\u17fa"+
		"\7~\2\2\u17f8\u17fa\7B\2\2\u17f9\u17e6\3\2\2\2\u17f9\u17e9\3\2\2\2\u17f9"+
		"\u17ea\3\2\2\2\u17f9\u17eb\3\2\2\2\u17f9\u17ec\3\2\2\2\u17f9\u17ef\3\2"+
		"\2\2\u17f9\u17f3\3\2\2\2\u17f9\u17f7\3\2\2\2\u17f9\u17f8\3\2\2\2\u17fa"+
		"\u02cf\3\2\2\2\u17fb\u17fc\7\u0104\2\2\u17fc\u1805\7j\2\2\u17fd\u17fe"+
		"\7\61\2\2\u17fe\u17ff\7\u0298\2\2\u17ff\u1800\7\u02b8\2\2\u1800\u1805"+
		"\7\u0299\2\2\u1801\u1805\7\u027d\2\2\u1802\u1805\7\61\2\2\u1803\u1805"+
		"\7l\2\2\u1804\u17fb\3\2\2\2\u1804\u17fd\3\2\2\2\u1804\u1801\3\2\2\2\u1804"+
		"\u1802\3\2\2\2\u1804\u1803\3\2\2\2\u1805\u02d1\3\2\2\2\u1806\u1807\t-"+
		"\2\2\u1807\u02d3\3\2\2\2\u1808\u1809\t.\2\2\u1809\u02d5\3\2\2\2\u180a"+
		"\u180b\7\u008f\2\2\u180b\u02d7\3\2\2\2\u0329\u02d9\u02de\u02e2\u036a\u0375"+
		"\u037a\u037c\u0383\u038c\u038f\u0392\u039b\u03ab\u03b0\u03b3\u03c8\u03ce"+
		"\u03d6\u03e0\u03e9\u03eb\u03f5\u0404\u040a\u040f\u0414\u0417\u041f\u0423"+
		"\u0431\u043f\u044d\u045f\u0464\u0469\u046e\u0473\u047a\u047f\u0484\u0489"+
		"\u0490\u04a0\u04a2\u04a9\u04ae\u04b7\u04b9\u04be\u04c4\u04ca\u04cf\u04d9"+
		"\u04db\u04e1\u04e6\u04ed\u04f4\u04f7\u0505\u0511\u0517\u051d\u0520\u0524"+
		"\u0527\u0530\u0535\u0554\u055f\u0563\u0567\u056b\u0576\u057c\u058c\u0594"+
		"\u059e\u05a9\u05ac\u05b1\u05b8\u05bf\u05c4\u05cc\u05d1\u05d8\u05e0\u05e9"+
		"\u05ec\u05f3\u05f5\u05f7\u0603\u0609\u060f\u0614\u0628\u0676\u067a\u068a"+
		"\u068f\u0693\u0696\u069a\u069d\u06a0\u06a4\u06a9\u06ad\u06b1\u06b5\u06b8"+
		"\u06bc\u06c1\u06c4\u06c8\u06cb\u06ce\u06d2\u06d7\u06db\u06df\u06e3\u06e6"+
		"\u06ea\u06f1\u06fc\u0703\u0705\u0708\u070d\u0710\u071b\u0720\u0725\u0727"+
		"\u0731\u0736\u0740\u0745\u074a\u0751\u0759\u075d\u075f\u0762\u076a\u076c"+
		"\u076f\u0774\u0776\u077a\u077d\u0781\u0785\u0788\u078f\u0793\u0796\u079b"+
		"\u079f\u07a4\u07a8\u07ac\u07b5\u07bb\u07bd\u07c5\u07c8\u07cb\u07cf\u07d4"+
		"\u07d7\u07da\u07df\u07e3\u07ea\u07f0\u07f3\u07f8\u07fc\u080c\u0818\u081b"+
		"\u081e\u0829\u082e\u0836\u083d\u0847\u084c\u0856\u085b\u0861\u0869\u086b"+
		"\u086e\u087d\u0884\u0889\u088d\u0897\u089a\u089e\u08a5\u08ab\u08b2\u08b5"+
		"\u08b8\u08be\u08c2\u08c6\u08c9\u08cc\u08d2\u08d6\u08db\u08e2\u08e9\u08ec"+
		"\u08f0\u08f4\u08f9\u08fd\u0901\u090e\u0916\u0919\u091c\u091f\u0922\u0925"+
		"\u0928\u092c\u0933\u093a\u0944\u0949\u0952\u0955\u0958\u0960\u0968\u096e"+
		"\u0972\u0975\u0979\u097d\u0980\u0984\u0989\u098d\u0990\u0995\u0999\u099e"+
		"\u09a2\u09a6\u09b5\u09b8\u09c9\u09cc\u09cf\u09d4\u09d6\u09e0\u09e5\u09ed"+
		"\u09f6\u09fb\u0a09\u0a0e\u0a15\u0a1e\u0a23\u0a2a\u0a33\u0a38\u0a48\u0a4f"+
		"\u0a56\u0a59\u0a5e\u0a66\u0a6f\u0a74\u0a7c\u0a87\u0a8c\u0a92\u0a94\u0a9d"+
		"\u0aa4\u0aa8\u0ab6\u0ac0\u0ac6\u0aca\u0ad5\u0ae1\u0ae4\u0ae8\u0aec\u0af0"+
		"\u0b0c\u0b1c\u0b22\u0b28\u0b33\u0b37\u0b3a\u0b3d\u0b41\u0b45\u0b4c\u0b55"+
		"\u0b5a\u0b5f\u0b62\u0b65\u0b68\u0b6c\u0b71\u0b7a\u0b7f\u0b84\u0b88\u0b8d"+
		"\u0b96\u0b9b\u0ba0\u0ba5\u0baa\u0bb3\u0bb8\u0bc0\u0bc2\u0bc5\u0bc9\u0bcf"+
		"\u0bd8\u0bdb\u0bea\u0bf9\u0c05\u0c17\u0c1c\u0c20\u0c25\u0c2b\u0c31\u0c37"+
		"\u0c3c\u0c46\u0c48\u0c53\u0c57\u0c5a\u0c61\u0c65\u0c68\u0c6c\u0c6f\u0c73"+
		"\u0c7b\u0c82\u0c85\u0c88\u0c93\u0c99\u0c9c\u0c9f\u0ca4\u0caf\u0cb2\u0cb6"+
		"\u0cb9\u0cbc\u0cbf\u0cc2\u0cc5\u0ccd\u0cd5\u0cda\u0ce1\u0ce3\u0cea\u0cf2"+
		"\u0cf6\u0cf9\u0d02\u0d07\u0d10\u0d1b\u0d21\u0d27\u0d2b\u0d2f\u0d38\u0d40"+
		"\u0d48\u0d4b\u0d4d\u0d51\u0d55\u0d5a\u0d61\u0d67\u0d6a\u0d6e\u0d71\u0d74"+
		"\u0d77\u0d7a\u0d80\u0d84\u0d8a\u0d8d\u0d91\u0d94\u0d98\u0da1\u0da6\u0da9"+
		"\u0db7\u0dc1\u0dc3\u0dcb\u0dd3\u0dd9\u0ddf\u0de6\u0deb\u0df3\u0e01\u0e0a"+
		"\u0e26\u0e2c\u0e34\u0e38\u0e3d\u0e44\u0e48\u0e4e\u0e55\u0e6f\u0e76\u0e7c"+
		"\u0e80\u0e88\u0e90\u0e96\u0e9a\u0e9f\u0ea6\u0eae\u0eb5\u0eb9\u0ebe\u0ec5"+
		"\u0ec9\u0ed3\u0eda\u0ede\u0ee8\u0eef\u0ef3\u0ef8\u0eff\u0f03\u0f08\u0f0c"+
		"\u0f11\u0f18\u0f1c\u0f22\u0f2a\u0f32\u0f39\u0f3d\u0f42\u0f4a\u0f4e\u0f51"+
		"\u0f60\u0f66\u0f6c\u0f72\u0f78\u0f7c\u0f86\u0f8d\u0f8f\u0f9e\u0fa3\u0fab"+
		"\u0fb1\u0fb7\u0fb9\u0fc6\u0fd0\u0fdc\u0fdf\u0fe4\u0fec\u0ff1\u0ff3\u0ffc"+
		"\u1008\u100b\u1010\u1018\u101d\u101f\u1027\u102d\u102f\u1038\u1044\u1047"+
		"\u104c\u1054\u1059\u105b\u1064\u106a\u1074\u107a\u1080\u1082\u108c\u1092"+
		"\u1098\u109a\u10a6\u10ac\u10b2\u10b4\u10bd\u10c3\u10c9\u10cb\u10d4\u10da"+
		"\u10e1\u10e3\u10eb\u10fc\u1101\u110b\u1110\u111a\u111e\u1123\u1128\u112b"+
		"\u1131\u1139\u1148\u114c\u1153\u115d\u1164\u1175\u117b\u1180\u1182\u118a"+
		"\u1190\u1196\u119b\u119d\u11aa\u11b4\u11c0\u11c3\u11c8\u11ce\u11d5\u11da"+
		"\u11dc\u11e0\u11e7\u11f3\u11f6\u11fb\u1201\u1208\u120d\u120f\u1217\u121d"+
		"\u1222\u1224\u122d\u1239\u123c\u1241\u1247\u124e\u1253\u1255\u125e\u1264"+
		"\u126a\u1271\u1277\u127d\u1282\u1284\u128e\u1294\u129a\u129f\u12a1\u12ad"+
		"\u12b3\u12b9\u12be\u12c0\u12c9\u12cf\u12d5\u12da\u12dc\u12e5\u12eb\u12f1"+
		"\u12f8\u12fd\u12ff\u1307\u1311\u1316\u1323\u1326\u132b\u1330\u133b\u1340"+
		"\u1342\u135a\u1366\u136a\u1374\u1378\u1386\u138a\u138d\u138f\u1398\u13a1"+
		"\u13aa\u13b8\u13c1\u13c8\u13d3\u13d7\u13de\u13e4\u13eb\u13f2\u13fa\u1403"+
		"\u140b\u140f\u1414\u1417\u141e\u1421\u1424\u1427\u142a\u142d\u1430\u1434"+
		"\u1436\u1439\u143c\u143f\u1442\u1445\u144f\u1452\u1454\u145c\u1460\u1463"+
		"\u1470\u1475\u1479\u147d\u1481\u1485\u1489\u1490\u1492\u14a1\u14a4\u14ab"+
		"\u14bc\u14c8\u14cb\u14d4\u14dc\u14e3\u14e7\u14f7\u14f9\u1501\u1505\u1518"+
		"\u151f\u152a\u152d\u1533\u1537\u153b\u153f\u1543\u1546\u1549\u1550\u1555"+
		"\u1558\u155f\u156c\u1571\u1578\u157f\u1583\u1585\u158e\u1596\u159c\u15a9"+
		"\u15b8\u15c3\u15c7\u15d0\u15d4\u15e2\u15e7\u15ec\u15f3\u15f6\u15ff\u1604"+
		"\u160a\u160e\u1615\u161a\u1620\u1624\u1630\u164a\u1660\u166c\u1677\u167c"+
		"\u1681\u1686\u168d\u1692\u1699\u169e\u16a5\u16aa\u16b1\u16b6\u16bd\u16c2"+
		"\u16c9\u16ce\u16d3\u16da\u16df\u16e4\u16ed\u16f2\u16f9\u16fe\u1705\u170a"+
		"\u1711\u1716\u171d\u1722\u1729\u1749\u1753\u175c\u1768\u176a\u1795\u179f"+
		"\u17a4\u17ba\u17be\u17ca\u17d0\u17d4\u17dc\u17e4\u17f9\u1804";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}